<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>计算机网络-第一章笔记</title>
      <link href="/%E8%BD%AF%E8%80%83-%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C-%E7%AC%AC%E4%B8%80%E7%AB%A0%E7%AC%94%E8%AE%B0/"/>
      <url>/%E8%BD%AF%E8%80%83-%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C-%E7%AC%AC%E4%B8%80%E7%AB%A0%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h1 id="计算机网络基础笔记"><a href="#计算机网络基础笔记" class="headerlink" title="计算机网络基础笔记"></a>计算机网络基础笔记</h1><h2 id="第1章：概论"><a href="#第1章：概论" class="headerlink" title="第1章：概论"></a>第1章：概论</h2><h3 id="学习目标："><a href="#学习目标：" class="headerlink" title="学习目标："></a>学习目标：</h3><ul><li>✓ 了解基本术语和概念</li><li>✓ 掌握网络的基本原理</li><li>✓ 为后续章节更深入的学习打下基础</li><li>✓ 方法：以Internet为例子</li></ul><h3 id="重点内容："><a href="#重点内容：" class="headerlink" title="重点内容："></a>重点内容：</h3><h2 id="1-什么是Internet？"><a href="#1-什么是Internet？" class="headerlink" title="1. 什么是Internet？"></a>1. 什么是Internet？</h2><h3 id="A-从具体构成角度"><a href="#A-从具体构成角度" class="headerlink" title="A. 从具体构成角度"></a>A. 从具体构成角度</h3><h4 id="节点"><a href="#节点" class="headerlink" title="节点"></a>节点</h4><ul><li><p><strong>主机及应用程序</strong>：</p><ul><li>主机 &#x3D; 端系统</li><li>运行网络应用程序</li><li>包括PC、服务器、无线笔记本、智能手机等</li></ul></li><li><p><strong>网络交换设备</strong>：</p><ul><li>路由器(router)</li><li>交换机(switch)等网络设备</li></ul></li></ul><h4 id="边：通信链路"><a href="#边：通信链路" class="headerlink" title="边：通信链路"></a>边：通信链路</h4><ul><li><strong>接入网链路</strong>：<ul><li>定义：主机连接到互联网的链路</li></ul></li><li><strong>主干链路</strong>：<ul><li>定义：路由器间的链路</li></ul></li><li><strong>通信链路类型</strong>：<ul><li>光纤</li><li>同轴电缆</li><li>无线电</li><li>卫星</li><li>传输速率 &#x3D; 带宽(bps)</li></ul></li></ul><h4 id="分组交换设备"><a href="#分组交换设备" class="headerlink" title="分组交换设备"></a>分组交换设备</h4><ul><li><strong>功能</strong>：转发分组(packets)</li><li><strong>类型</strong>：<ul><li>路由器</li><li>交换机</li></ul></li></ul><h3 id="B-从协议角度"><a href="#B-从协议角度" class="headerlink" title="B. 从协议角度"></a>B. 从协议角度</h3><ul><li><p><strong>协议作用</strong>：控制发送、接收消息</p></li><li><p><strong>协议实例</strong>：TCP、IP、HTTP、FTP、PPP</p></li><li><p><strong>Internet定义</strong>：”网络的网络”</p><ul><li>特点：松散的层次结构，互连的ISP</li><li>分类：公共Internet vs. 专用intranet</li></ul></li><li><p><strong>Internet标准</strong>：</p><ul><li>RFC: Request for Comments</li><li>IETF: Internet Engineering Task Force (互联网工程任务组)</li></ul></li></ul><h3 id="C-从服务角度"><a href="#C-从服务角度" class="headerlink" title="C. 从服务角度"></a>C. 从服务角度</h3><ul><li><strong>应用类型</strong>：使用通信设施进行通信的分布式应用<ul><li>Web</li><li>VoIP</li><li>email</li><li>分布式游戏</li><li>电子商务</li><li>社交网络</li></ul></li><li><strong>基础设施功能</strong>：<ul><li>为apps提供编程接口(通信服务)</li><li>将发送和接收数据的apps与互联网连接起来</li></ul></li><li><strong>服务选择</strong>：类似于邮政服务<ul><li>无连接不可靠服务</li><li>面向连接的可靠服务</li></ul></li></ul><h2 id="2-什么是协议？"><a href="#2-什么是协议？" class="headerlink" title="2. 什么是协议？"></a>2. 什么是协议？</h2><h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h3><blockquote><p>协议定义了在两个或多个通信实体之间交换的报文格式和次序，以及在报文传输和&#x2F;或接收或其他事件方面所采取的动作</p></blockquote><h3 id="人类协议示例"><a href="#人类协议示例" class="headerlink" title="人类协议示例"></a>人类协议示例</h3><ul><li>“几点了？”</li><li>“我有个问题”</li><li>“你好”</li><li>发送特定的消息</li><li>收到消息时采取的特定行动或其他事件</li></ul><h3 id="网络协议特点"><a href="#网络协议特点" class="headerlink" title="网络协议特点"></a>网络协议特点</h3><ul><li>类似人类协议</li><li>机器之间的协议而非人与人之间的协议</li><li>Internet中所有的通信行为都受协议制约</li></ul><h2 id="3-网络组成要素"><a href="#3-网络组成要素" class="headerlink" title="3. 网络组成要素"></a>3. 网络组成要素</h2><h3 id="网络边缘"><a href="#网络边缘" class="headerlink" title="网络边缘"></a>网络边缘</h3><ul><li>定义：网络的外围部分</li></ul><h3 id="接入网、物理媒体"><a href="#接入网、物理媒体" class="headerlink" title="接入网、物理媒体"></a>接入网、物理媒体</h3><ul><li>物理连接类型</li></ul><h3 id="网络核心"><a href="#网络核心" class="headerlink" title="网络核心"></a>网络核心</h3><ul><li><strong>分组交换</strong>：将数据分成小包进行传输</li><li><strong>线路交换</strong>：建立专用连接通道</li></ul><h3 id="Internet-ISP结构"><a href="#Internet-ISP结构" class="headerlink" title="Internet&#x2F;ISP结构"></a>Internet&#x2F;ISP结构</h3><ul><li><strong>ISP层次</strong>：<ul><li>全球ISP</li><li>区域ISP</li><li>本地ISP</li></ul></li><li><strong>网络类型</strong>：<ul><li>家庭网络</li><li>移动网络</li><li>机构网络</li></ul></li></ul><h3 id="性能指标"><a href="#性能指标" class="headerlink" title="性能指标"></a>性能指标</h3><ul><li>丢包率</li><li>延时</li><li>吞吐量</li></ul><h3 id="协议层次、服务模型"><a href="#协议层次、服务模型" class="headerlink" title="协议层次、服务模型"></a>协议层次、服务模型</h3><ul><li>不同层次的协议负责不同功能</li><li>各层提供的服务模型</li></ul><h3 id="历史"><a href="#历史" class="headerlink" title="历史"></a>历史</h3><ul><li>Internet发展历程</li></ul><h2 id="注意要点："><a href="#注意要点：" class="headerlink" title="注意要点："></a>注意要点：</h2><ol><li>Internet是”网络的网络”，由多层ISP和不同类型网络组成</li><li>协议是网络通信的基本规则，定义了通信格式和行为</li><li>网络由节点(设备)和边(链路)组成</li><li>从服务角度看，Internet为各种应用提供了通信基础设施</li></ol><hr><h2 id="网络边缘-1"><a href="#网络边缘-1" class="headerlink" title="网络边缘"></a>网络边缘</h2><ul><li><p><strong>主机</strong></p><ul><li>运行应用程序（如Web、email等）</li><li>位于”网络的边缘”</li><li>是用户直接接触的系统</li></ul></li><li><p><strong>客户&#x2F;服务器模式</strong></p><ul><li>客户端向服务器请求服务、接收服务</li><li>服务器提供资源和服务</li><li>例如：Web浏览器&#x2F;服务器、email客户端&#x2F;服务器</li><li>明确的角色分工，客户端发起请求，服务器响应请求</li></ul></li><li><p><strong>对等（peer-peer）模式</strong></p><ul><li>很少（甚至没有）专门的服务器</li><li>每个节点既可以是客户端也可以是服务器</li><li>例如：Gnutella、KaZaA、Emule等文件共享应用</li><li>分散式结构，没有中央控制点</li></ul></li></ul><h2 id="网络核心-1"><a href="#网络核心-1" class="headerlink" title="网络核心"></a>网络核心</h2><ul><li>互连着的路由器（构成数据传输的主干网络）</li><li>网络的网络（多层次、多区域的互联网结构）</li><li>负责高效转发数据包</li></ul><h2 id="接入网、物理媒体-1"><a href="#接入网、物理媒体-1" class="headerlink" title="接入网、物理媒体"></a>接入网、物理媒体</h2><ul><li>有线或者无线通信链路</li><li>是终端设备接入互联网的物理途径</li><li>包括各种传输介质和接入技术</li></ul><h2 id="面向连接服务"><a href="#面向连接服务" class="headerlink" title="面向连接服务"></a>面向连接服务</h2><ul><li><p><strong>目标</strong>：在端系统之间传输数据</p></li><li><p><strong>握手</strong>：在数据传输之前做好准备</p><ul><li>人类协议中的例子：”你好”、”你好”的交流</li><li>两个通信主机之间为连接建立状态</li><li>确保双方都准备好进行通信</li></ul></li><li><p><strong>TCP - 传输控制协议 [RFC 793]</strong></p><ul><li>互联网上面向连接的服务</li><li>特点：<ul><li>可靠地、按顺序地传送数据</li><li>确认和重传机制（保证数据不丢失）</li><li>流量控制<ul><li>发送方不会淹没接收方</li><li>根据接收方的接收能力调整发送速率</li></ul></li><li>拥塞控制<ul><li>当网络拥塞时，发送方降低发送速率</li><li>防止网络崩溃，保证网络整体效率</li></ul></li></ul></li></ul></li></ul><h2 id="无连接服务"><a href="#无连接服务" class="headerlink" title="无连接服务"></a>无连接服务</h2><ul><li><strong>目标</strong>：在端系统之间传输数据</li><li><strong>UDP - 用户数据报协议 [RFC 768]</strong><ul><li>无连接（不需要建立连接）</li><li>不可靠数据传输（不保证数据到达）</li><li>无流量控制（不考虑接收方的接收能力）</li><li>无拥塞控制（不考虑网络状况）</li><li>简单、开销小、延迟低</li></ul></li></ul><h2 id="协议应用"><a href="#协议应用" class="headerlink" title="协议应用"></a>协议应用</h2><ul><li><p><strong>使用TCP的应用</strong>:</p><ul><li>HTTP (Web网页浏览)</li><li>FTP (文件传送)</li><li>Telnet (远程登录)</li><li>SMTP (电子邮件传输)</li><li>这些应用需要可靠的数据传输</li></ul></li><li><p><strong>使用UDP的应用</strong>:</p><ul><li>流媒体（视频、音频流）</li><li>远程会议系统</li><li>DNS（域名解析系统）</li><li>互联网电话</li><li>这些应用通常可以容忍一定的数据丢失，但对延迟敏感</li></ul></li></ul><h2 id="网络拓扑结构"><a href="#网络拓扑结构" class="headerlink" title="网络拓扑结构"></a>网络拓扑结构</h2><ul><li><p><strong>移动网络</strong></p><ul><li>连接移动设备（手机、笔记本等）</li><li>通过基站接入互联网</li></ul></li><li><p><strong>家庭网络</strong></p><ul><li>连接家庭中的各种设备</li><li>通过路由器接入ISP</li></ul></li><li><p><strong>区域性和全球性ISP</strong></p><ul><li>提供互联网接入服务</li><li>构成互联网的骨干网络</li><li>不同级别的ISP相互连接</li></ul></li><li><p><strong>机构网络</strong></p><ul><li>连接企业、学校等机构内部的设备</li><li>通常规模较大，结构复杂</li><li>有专门的网络管理和安全策略</li></ul></li></ul><p>这些不同类型的网络通过路由器和交换设备相互连接，共同构成了完整的互联网架构，使得全球范围内的数据通信成为可能。</p><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      
      
      <categories>
          
          <category> 软考 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 软考 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>单线复用--家里宽带</title>
      <link href="/%E7%9E%8E%E6%8A%98%E8%85%BE-%E5%8D%95%E7%BA%BF%E5%A4%8D%E7%94%A8-%E5%AE%B6%E9%87%8C%E5%AE%BD%E5%B8%A6/"/>
      <url>/%E7%9E%8E%E6%8A%98%E8%85%BE-%E5%8D%95%E7%BA%BF%E5%A4%8D%E7%94%A8-%E5%AE%B6%E9%87%8C%E5%AE%BD%E5%B8%A6/</url>
      
        <content type="html"><![CDATA[<blockquote><p>上次通过光猫改桥接，让主路由拨号，可以实现客厅的Apple TV和IPTV都连接有线了，但是书房没有有线可以用了。我偶尔要打游戏只能拖一根10米的网线，非常不方便。所以还是要搞单线复用。</p></blockquote><h3 id="一、查看光猫上的VLAN-ID"><a href="#一、查看光猫上的VLAN-ID" class="headerlink" title="一、查看光猫上的VLAN ID"></a>一、查看光猫上的VLAN ID</h3><p>这里依然需要光猫的超级管理员密码，首先还是要将光猫的连接模式改为桥接，让路由器来拨号（这部分内容可以参考我的上一篇文章）。<br>这里进入光猫网页，是为了记下上网和IPTV的VLAN ID，如图所示，上网的VLAN ID为11，IPTV的VLAN ID为43。</p><p><img src="https://minio.xiaofeng.show/blog/2024/cat_bridge.png" alt="cat_bridge.png"></p><p><img src="https://minio.xiaofeng.show/blog/2024/cat_itv.png" alt="cat_itv.png"></p><h3 id="二、配置交换机"><a href="#二、配置交换机" class="headerlink" title="二、配置交换机"></a>二、配置交换机</h3><p>我用的是两个五口千兆的网管交换机，型号是水星SG105 Pro，其他网管交换机也可以，设置是类似的。</p><h4 id="2-1-登录"><a href="#2-1-登录" class="headerlink" title="2.1 登录"></a>2.1 登录</h4><p>在浏览器输入 192.168.0.1，用户名 admin，密码 admin（电脑也需要配置该网段）<br><img src="https://minio.xiaofeng.show/blog/2024/%E6%B0%B4%E6%98%9F%E7%99%BB%E5%BD%95.png" alt="水星登录.png"></p><h4 id="2-2-VLAN配置"><a href="#2-2-VLAN配置" class="headerlink" title="2.2 VLAN配置"></a>2.2 VLAN配置</h4><p>进入菜单 VLAN -&gt; 802.1Q VLAN，首先启用配置，然后将VLAN设置如下：<br><img src="https://minio.xiaofeng.show/blog/2024/%E6%B0%B4%E6%98%9FVLAN%E8%AE%BE%E7%BD%AE3.png" alt="水星VLAN设置3.png"></p><h4 id="2-3-PVID设置"><a href="#2-3-PVID设置" class="headerlink" title="2.3 PVID设置"></a>2.3 PVID设置</h4><p>进入菜单 VLAN -&gt; 802.1Q PVID设置，将对应端口设置PVID即可。两个交换机都要这样设置。<br><img src="https://minio.xiaofeng.show/blog/2024/%E6%B0%B4%E6%98%9FPVID%E8%AE%BE%E7%BD%AE3.png" alt="水星PVID设置3.png"></p><h4 id="2-4-配置保存"><a href="#2-4-配置保存" class="headerlink" title="2.4 配置保存"></a>2.4 配置保存</h4><p>这一步很重要，不然重启后，刚刚那些设置都没了。<br><img src="https://minio.xiaofeng.show/blog/2024/%E6%B0%B4%E6%98%9F%E9%85%8D%E7%BD%AE%E4%BF%9D%E5%AD%98.png" alt="水星配置保存.png"></p><h3 id="三、接线"><a href="#三、接线" class="headerlink" title="三、接线"></a>三、接线</h3><p><img src="https://minio.xiaofeng.show/blog/2024/%E5%8D%95%E7%BA%BF%E5%A4%8D%E7%94%A8%E8%BF%9E%E7%BA%BF.png" alt="单线复用连线.png"></p><h3 id="四、参考"><a href="#四、参考" class="headerlink" title="四、参考"></a>四、参考</h3><p>参考链接：<a href="https://post.smzdm.com/p/a992kk30/?nozhiyou">https://post.smzdm.com/p/a992kk30/?nozhiyou</a></p><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      
      
      <categories>
          
          <category> 瞎折腾 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> network </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>计算机网络 - B站学习计划</title>
      <link href="/%E8%BD%AF%E8%80%83-%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C-B%E7%AB%99%E5%AD%A6%E4%B9%A0%E8%AE%A1%E5%88%92/"/>
      <url>/%E8%BD%AF%E8%80%83-%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C-B%E7%AB%99%E5%AD%A6%E4%B9%A0%E8%AE%A1%E5%88%92/</url>
      
        <content type="html"><![CDATA[<p>去年就想体系化学习计算机网络，因为各种原因搁置了，今年再来一次，顺便把网络工程师拿下。</p><table><thead><tr><th>状态</th><th>序号</th><th>内容</th><th>时长</th><th>计划完成时间</th><th>实际完成时间</th></tr></thead><tbody><tr><td>✅</td><td>01</td><td>课程目标</td><td>05:57</td><td>2月12日</td><td>2月12日</td></tr><tr><td>✅</td><td>02</td><td>课程主要内容介绍</td><td>38:24</td><td>2月14日</td><td>2月15日</td></tr><tr><td>✅</td><td>03</td><td>1.1 什么是Internet？</td><td>55:02</td><td>2月15日</td><td>2月16日</td></tr><tr><td>✅</td><td>04</td><td>1.2 网络边缘</td><td>40:59</td><td>2月16日</td><td>2月25日</td></tr><tr><td>✅</td><td>05</td><td>1.3 网络核心</td><td>01:09:39</td><td>2月18日</td><td>3月1日</td></tr><tr><td>✅</td><td>06</td><td>1.4 接入网和物理媒体</td><td>40:56</td><td>2月19日</td><td>3月2日</td></tr><tr><td>✅</td><td>07</td><td>1.5 Internet结构和ISP</td><td>26:58</td><td>2月20日</td><td>3月4日</td></tr><tr><td></td><td>08</td><td>1.6 分组延时、丢失和吞吐量</td><td>44:48</td><td>2月21日</td><td></td></tr><tr><td></td><td>09</td><td>1.7 协议层次和服务模型</td><td>01:11:43</td><td>2月22日</td><td></td></tr><tr><td></td><td>10</td><td>1.8 历史</td><td>47:09</td><td>2月23日</td><td></td></tr><tr><td></td><td>11</td><td>1.9 小结</td><td>06:13</td><td>2月24日</td><td></td></tr></tbody></table><table><thead><tr><th>状态</th><th>序号</th><th>内容</th><th>时长</th><th>计划完成时间</th><th>实际完成时间</th></tr></thead><tbody><tr><td></td><td>12</td><td>2.0 应用层概述</td><td>04:25</td><td>2月25日</td><td></td></tr><tr><td></td><td>13</td><td>2.1 应用层原理</td><td>01:26:31</td><td>2月25日</td><td></td></tr><tr><td></td><td>14</td><td>2.2 Web and HTTP</td><td>01:28:35</td><td>2月26日</td><td></td></tr><tr><td></td><td>15</td><td>2.3 FTP</td><td>13:24</td><td>2月27日</td><td></td></tr><tr><td></td><td>16</td><td>2.4 EMail</td><td>28:44</td><td>2月28日</td><td></td></tr><tr><td></td><td>17</td><td>2.5 DNS</td><td>01:12:55</td><td>3月1日</td><td></td></tr><tr><td></td><td>18</td><td>2.6 P2P应用</td><td>01:19:40</td><td>3月2日</td><td></td></tr><tr><td></td><td>19</td><td>2.7 CDN</td><td>47:45</td><td>3月4日</td><td></td></tr><tr><td></td><td>20</td><td>2.8 TCP套接字编程</td><td>50:09</td><td>3月5日</td><td></td></tr><tr><td></td><td>21</td><td>2.9 UDP套接字编程</td><td>15:49</td><td>3月6日</td><td></td></tr><tr><td></td><td>22</td><td>2.10 小结</td><td>02:20</td><td>3月6日</td><td></td></tr></tbody></table><table><thead><tr><th>状态</th><th>序号</th><th>内容</th><th>时长</th><th>计划完成时间</th><th>实际完成时间</th></tr></thead><tbody><tr><td></td><td>23</td><td>3.1 概述和传输层服务</td><td>21:42</td><td>3月7日</td><td></td></tr><tr><td></td><td>24</td><td>3.2 多路复用和解复用</td><td>19:01</td><td>3月8日</td><td></td></tr><tr><td></td><td>25</td><td>3.3 无连接传输UDP</td><td>17:04</td><td>3月8日</td><td></td></tr><tr><td></td><td>26</td><td>3.4 可靠数据传输的原理</td><td>02:20:15</td><td>3月9日</td><td></td></tr><tr><td></td><td>27</td><td>3.5 面向连接的传输：TCP</td><td>01:33:51</td><td>3月11日</td><td></td></tr><tr><td></td><td>28</td><td>3.6 拥塞控制原理</td><td>32:06</td><td>3月12日</td><td></td></tr><tr><td></td><td>29</td><td>3.7 TCP拥塞</td><td>45:59</td><td>3月14日</td><td></td></tr></tbody></table><table><thead><tr><th>状态</th><th>序号</th><th>内容</th><th>时长</th><th>计划完成时间</th><th>实际完成时间</th></tr></thead><tbody><tr><td></td><td>30</td><td>4.1 导论</td><td>35:51</td><td>3月15日</td><td></td></tr><tr><td></td><td>31</td><td>4.2 路由器组成</td><td>33:51</td><td>3月15日</td><td></td></tr><tr><td></td><td>32</td><td>4.3 IP Internet Protocol</td><td>01:58:22</td><td>3月16日</td><td></td></tr><tr><td></td><td>33</td><td>4.4 通用转发和SDN</td><td>32:41</td><td>3月18日</td><td></td></tr></tbody></table><table><thead><tr><th>状态</th><th>序号</th><th>内容</th><th>时长</th><th>计划完成时间</th><th>实际完成时间</th></tr></thead><tbody><tr><td></td><td>34</td><td>5.1 导论</td><td>03:14</td><td>3月19日</td><td></td></tr><tr><td></td><td>35</td><td>5.2 路由选择算法</td><td>01:38:21</td><td>3月19日</td><td></td></tr><tr><td></td><td>36</td><td>5.3 自治系统内部的路由选择</td><td>15:58</td><td>3月20日</td><td></td></tr><tr><td></td><td>37</td><td>5.4 ISP之间的路由选择：BGP</td><td>50:19</td><td>3月21日</td><td></td></tr><tr><td></td><td>38</td><td>5.5 SDN控制平面</td><td>22:05</td><td>3月22日</td><td></td></tr><tr><td></td><td>39</td><td>5.6 总结</td><td>02:27</td><td>3月22日</td><td></td></tr></tbody></table><table><thead><tr><th>状态</th><th>序号</th><th>内容</th><th>时长</th><th>计划完成时间</th><th>实际完成时间</th></tr></thead><tbody><tr><td></td><td>40</td><td>6.1 引论和服务</td><td>44:25</td><td>3月23日</td><td></td></tr><tr><td></td><td>41</td><td>6.2 差错检测和纠正</td><td>23:13</td><td>3月23日</td><td></td></tr><tr><td></td><td>42</td><td>6.3 多点访协议</td><td>01:49:20</td><td>3月25日</td><td></td></tr><tr><td></td><td>43</td><td>6.4 LANs</td><td>01:40:04</td><td>3月26日</td><td></td></tr><tr><td></td><td>44</td><td>6.5 链路虚拟化</td><td>00:58</td><td>3月27日</td><td></td></tr><tr><td></td><td>45</td><td>6.6 数据中心网络</td><td>03:04</td><td>3月27日</td><td></td></tr><tr><td></td><td>46</td><td>6.7 A day in the life of web request</td><td>09:29</td><td>3月27日</td><td></td></tr></tbody></table><table><thead><tr><th>状态</th><th>序号</th><th>内容</th><th>时长</th><th>计划完成时间</th><th>实际完成时间</th></tr></thead><tbody><tr><td></td><td>47</td><td>8 概述</td><td>04:06</td><td>3月28日</td><td></td></tr><tr><td></td><td>48</td><td>8.1 什么是网络安全</td><td>11:05</td><td>3月28日</td><td></td></tr><tr><td></td><td>49</td><td>8.2 加密原理</td><td>44:31</td><td>3月29日</td><td></td></tr><tr><td></td><td>50</td><td>8.3 认证</td><td>16:45</td><td>3月30日</td><td></td></tr><tr><td></td><td>51</td><td>8.4 报文完整性</td><td>20:55</td><td>3月30日</td><td></td></tr><tr><td></td><td>52</td><td>8.5 密钥分发和证书</td><td>28:14</td><td>4月1日</td><td></td></tr><tr><td></td><td>53</td><td>8.6 各个层次的安全性</td><td>25:30</td><td>4月2日</td><td></td></tr><tr><td></td><td>54</td><td>8.7 防火墙</td><td>38:04</td><td>4月4日</td><td></td></tr><tr><td></td><td>55</td><td>8.8 攻击和对策</td><td>15:55</td><td>4月5日</td><td></td></tr><tr><td></td><td>56</td><td>8.9 总结</td><td>02:00</td><td>4月5日</td><td></td></tr></tbody></table><table><thead><tr><th>状态</th><th>序号</th><th>内容</th><th>时长</th><th>计划完成时间</th><th>实际完成时间</th></tr></thead><tbody><tr><td></td><td>57</td><td>9.1 软件定义网络</td><td>16:28</td><td>4月6日</td><td></td></tr><tr><td></td><td>58</td><td>9.2 命名数据网络（上）</td><td>12:14</td><td>4月6日</td><td></td></tr><tr><td></td><td>59</td><td>9.3 命名数据网络（下）</td><td>16:03</td><td>4月6日</td><td></td></tr><tr><td></td><td>60</td><td>9.4 移动优先网络和网络试验设施</td><td>17:04</td><td>4月6日</td><td></td></tr></tbody></table><table><thead><tr><th>状态</th><th>序号</th><th>内容</th><th>时长</th><th>计划完成时间</th><th>实际完成时间</th></tr></thead><tbody><tr><td></td><td>61</td><td>典型习题-陈双武副教授</td><td>48:08</td><td>4月8日</td><td></td></tr><tr><td></td><td>62</td><td>第一章习题</td><td>45:26</td><td>4月9日</td><td></td></tr><tr><td></td><td>63</td><td>第二章习题</td><td>01:21:36</td><td>4月11日</td><td></td></tr><tr><td></td><td>64</td><td>第三章习题</td><td>01:00:05</td><td>4月12日</td><td></td></tr><tr><td></td><td>65</td><td>第四章习题</td><td>22:04</td><td>4月13日</td><td></td></tr><tr><td></td><td>66</td><td>第五章习题</td><td>21:08</td><td>4月15日</td><td></td></tr><tr><td></td><td>67</td><td>第六章习题</td><td>50:53</td><td>4月16日</td><td></td></tr><tr><td></td><td>68</td><td>第八章习题</td><td>11:44</td><td>4月18日</td><td></td></tr></tbody></table><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      
      
      <categories>
          
          <category> 软考 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 软考 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>光猫路由改桥接，同时支持IPTV</title>
      <link href="/%E7%9E%8E%E6%8A%98%E8%85%BE-%E5%85%89%E7%8C%AB%E8%B7%AF%E7%94%B1%E6%94%B9%E6%A1%A5%E6%8E%A5%EF%BC%8C%E5%90%8C%E6%97%B6%E6%94%AF%E6%8C%81IPTV/"/>
      <url>/%E7%9E%8E%E6%8A%98%E8%85%BE-%E5%85%89%E7%8C%AB%E8%B7%AF%E7%94%B1%E6%94%B9%E6%A1%A5%E6%8E%A5%EF%BC%8C%E5%90%8C%E6%97%B6%E6%94%AF%E6%8C%81IPTV/</url>
      
        <content type="html"><![CDATA[<blockquote><p>最近用Apple TV的时候感觉卡顿严重（无线连接），便想着修改下网络。由于客厅电视机下只有一个网口，要同时给IPTV和Apple TV同时使用，只能考虑将光猫改成桥接模式。</p></blockquote><h3 id="一、路由模式改成桥接模式"><a href="#一、路由模式改成桥接模式" class="headerlink" title="一、路由模式改成桥接模式"></a>一、路由模式改成桥接模式</h3><h4 id="1-1-光猫设置"><a href="#1-1-光猫设置" class="headerlink" title="1.1 光猫设置"></a>1.1 光猫设置</h4><p>家里的宽带是电信的，500MB下行带宽。跟宽带师傅要了超级管理员的密码，在浏览器输入 192.168.1.1，输入帐号和密码， 就能进入如下界面：<br><img src="https://minio.xiaofeng.show/blog/2024/cat_overview.png" alt="cat_overview.png"><br>光猫默认是路由模式，即是由光猫完成拨号上网的。<br>在网络设置里，选择上网的连接，将连接模式改为桥接，同时勾选 iTV 选项，方便下一步进行 iTV 设置。<br><img src="https://minio.xiaofeng.show/blog/2024/cat_bridge.png" alt="cat_bridge.png"></p><p>设置成功后，光猫上可以看到连接方式已改为桥接。<br><img src="https://minio.xiaofeng.show/blog/2024/cat_port_info.png" alt="cat_port_info.png"></p><p>我使用的是网口3，如图所示：<br><img src="https://minio.xiaofeng.show/blog/2024/cat_user_info.png" alt="cat_user_info.png"></p><h4 id="1-2-路由器设置"><a href="#1-2-路由器设置" class="headerlink" title="1.2 路由器设置"></a>1.2 路由器设置</h4><p>我使用的路由器是 Redmi AC2100，同时刷了老毛子固件，在浏览器输入 192.168.123.1，输入帐号和密码，进入如下界面：<br><img src="https://minio.xiaofeng.show/blog/2024/route_plugin.png" alt="route_plugin.png"><br>在 高级设置 -&gt; 外部网络 -&gt; 外部设置里，将外网连接类型改为 PPPoE拨号，在下方输入宽带帐号和密码即可。<br><img src="https://minio.xiaofeng.show/blog/2024/route_bridge.png" alt="route_bridge.png"></p><h3 id="二、IPTV设置"><a href="#二、IPTV设置" class="headerlink" title="二、IPTV设置"></a>二、IPTV设置</h3><h4 id="2-1-光猫设置"><a href="#2-1-光猫设置" class="headerlink" title="2.1 光猫设置"></a>2.1 光猫设置</h4><p>绑定VLAN<br>从网络连接这里可以看到，IPTV的 VlanId是43。<br><img src="https://minio.xiaofeng.show/blog/2024/cat_itv.png" alt="cat_itv.png"><br>由于上一步操作我用的是网口3，所以这里绑定 IPTV 还是网口3。<br><img src="https://minio.xiaofeng.show/blog/2024/cat_itv_vlan.png" alt="cat_itv.png"></p><h4 id="2-2-路由器设置"><a href="#2-2-路由器设置" class="headerlink" title="2.2 路由器设置"></a>2.2 路由器设置</h4><p>外部网络设置，我这里用的是LAN1，即第一个网口，同时在 VLAN CPU 和 VLAN LAN1绑定 VLAN ID 43。<br><img src="https://minio.xiaofeng.show/blog/2024/route_itv_wan.png" alt="route_itv_wan.png"></p><p>内部网络设置，转到IPTV设置，在组播流量中启用 IGMP&#x2F;MLD 侦听，M2U – 以太网交换机选择Multicast to Unicast。<br><img src="https://minio.xiaofeng.show/blog/2024/route_itv_lan.png" alt="route_itv_lan.png"></p><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      
      
      <categories>
          
          <category> 瞎折腾 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> network </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Centrifugo安装与使用</title>
      <link href="/%E5%BC%80%E5%8F%91%E7%9B%B8%E5%85%B3-Centrifugo%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8/"/>
      <url>/%E5%BC%80%E5%8F%91%E7%9B%B8%E5%85%B3-Centrifugo%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<h3 id="一、安装"><a href="#一、安装" class="headerlink" title="一、安装"></a>一、安装</h3><p>使用 docker-compose 安装，指定 config.json 配置文件。</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">&quot;3.9&quot;</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">centrifugo:</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">centrifugo</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">centrifugo/centrifugo:v5</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./config.json:/centrifugo/config.json</span></span><br><span class="line">    <span class="attr">command:</span> <span class="string">centrifugo</span> <span class="string">-c</span> <span class="string">config.json</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">8000</span><span class="string">:8000</span></span><br><span class="line">    <span class="attr">ulimits:</span></span><br><span class="line">      <span class="attr">nofile:</span></span><br><span class="line">        <span class="attr">soft:</span> <span class="number">65535</span></span><br><span class="line">        <span class="attr">hard:</span> <span class="number">65535</span></span><br></pre></td></tr></table></figure><p>docker-compose.yml 如上所示，使用 v5 版本。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;token_hmac_secret_key&quot;</span><span class="punctuation">:</span> <span class="string">&quot;kkc_secret&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;api_key&quot;</span><span class="punctuation">:</span> <span class="string">&quot;kkc_api_key&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;admin_password&quot;</span><span class="punctuation">:</span> <span class="string">&quot;password&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;admin_secret&quot;</span><span class="punctuation">:</span> <span class="string">&quot;secret&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;admin&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;allowed_origins&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;*&quot;</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;anonymous&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;publish&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;subscribe_to_publish&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;presence&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;debug&quot;</span><span class="punctuation">:</span><span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;client_anonymous&quot;</span><span class="punctuation">:</span><span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;join_leave&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;allow_subscribe_for_client&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>config.json 配置如上所示，我最初写配置时，参考的是官网的 quik start，只有前5行，导致 channel 订阅失败，后面才加了下面的，当然还不全，具体参数可去官网查看。</p><p>执行启动命令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker-compose up -d</span><br></pre></td></tr></table></figure><p>在浏览器输入 IP + 8000 端口，并输入配置文件中的 admin_password，即可进入主页面，如图所示：</p><p><img src="https://minio.xiaofeng.show/blog/2024/20250109184145.png" alt="image.png"></p><h3 id="二、服务端推送及客户端token获取"><a href="#二、服务端推送及客户端token获取" class="headerlink" title="二、服务端推送及客户端token获取"></a>二、服务端推送及客户端token获取</h3><h4 id="2-1-maven依赖"><a href="#2-1-maven依赖" class="headerlink" title="2.1 maven依赖"></a>2.1 maven依赖</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.auth0<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>java-jwt<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.19.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-openfeign<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.1.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>引入 java-jwt 依赖，用于生成 token。<br>引入 spring-cloud-starter-openfeign 依赖，用于 Centrifugo API 调用。</p><h4 id="2-2-客户端token生成"><a href="#2-2-客户端token生成" class="headerlink" title="2.2 客户端token生成"></a>2.2 客户端token生成</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">generateToken</span><span class="params">(String user)</span> &#123;  </span><br><span class="line">    <span class="keyword">return</span> JWT.create()  </span><br><span class="line">            .withExpiresAt(<span class="keyword">new</span> <span class="title class_">Date</span>(System.currentTimeMillis() + <span class="number">86400</span> * <span class="number">100000</span>))  </span><br><span class="line">            .withClaim(<span class="string">&quot;sub&quot;</span>, user)  </span><br><span class="line">            .withSubject(user)  </span><br><span class="line">            .sign(Algorithm.HMAC256(<span class="string">&quot;kkc-secret&quot;</span>));  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上述代码用来生成客户端token，可自定义过期时间，密钥为 config.json 配置的 token_hmac_secret_key。</p><h4 id="2-3-服务端推送"><a href="#2-3-服务端推送" class="headerlink" title="2.3 服务端推送"></a>2.3 服务端推送</h4><h5 id="2-3-1-结构体定义"><a href="#2-3-1-结构体定义" class="headerlink" title="2.3.1 结构体定义"></a>2.3.1 结构体定义</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span>  </span><br><span class="line"><span class="meta">@AllArgsConstructor</span>  </span><br><span class="line"><span class="meta">@NoArgsConstructor</span>  </span><br><span class="line"><span class="meta">@Builder</span>  </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">InstantStructDTO</span> &#123;  </span><br><span class="line">  </span><br><span class="line">    <span class="comment">/**  </span></span><br><span class="line"><span class="comment">     * 方法  </span></span><br><span class="line"><span class="comment">     */</span>  </span><br><span class="line">    <span class="keyword">private</span> String method;  </span><br><span class="line">  </span><br><span class="line">    <span class="comment">/**  </span></span><br><span class="line"><span class="comment">     * 参数  </span></span><br><span class="line"><span class="comment">     */</span>  </span><br><span class="line">    <span class="keyword">private</span> InstantMsgDTO params;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span>  </span><br><span class="line"><span class="meta">@AllArgsConstructor</span>  </span><br><span class="line"><span class="meta">@NoArgsConstructor</span>  </span><br><span class="line"><span class="meta">@Builder</span>  </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">InstantMsgDTO</span> &#123;  </span><br><span class="line">  </span><br><span class="line">    <span class="comment">/**  </span></span><br><span class="line"><span class="comment">     * 通道  </span></span><br><span class="line"><span class="comment">     */</span>  </span><br><span class="line">    <span class="keyword">private</span> String channel;  </span><br><span class="line">    <span class="comment">/**  </span></span><br><span class="line"><span class="comment">     * 通道列表  </span></span><br><span class="line"><span class="comment">     */</span>  </span><br><span class="line">    <span class="keyword">private</span> List&lt;String&gt; channels;  </span><br><span class="line">    <span class="comment">/**  </span></span><br><span class="line"><span class="comment">     * 用户  </span></span><br><span class="line"><span class="comment">     */</span>  </span><br><span class="line">    <span class="keyword">private</span> String user;  </span><br><span class="line">    <span class="comment">/**  </span></span><br><span class="line"><span class="comment">     * 数据  </span></span><br><span class="line"><span class="comment">     */</span>  </span><br><span class="line">    <span class="keyword">private</span> JSONObject data;  </span><br><span class="line">    <span class="comment">/**  </span></span><br><span class="line"><span class="comment">     * 信息  </span></span><br><span class="line"><span class="comment">     */</span>  </span><br><span class="line">    <span class="keyword">private</span> JSONObject info;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="2-3-2-open-feign调用"><a href="#2-3-2-open-feign调用" class="headerlink" title="2.3.2 open-feign调用"></a>2.3.2 open-feign调用</h5><p>统一配置 Header，在 header 中加入 X-API-Key，值为 config.json 中配置的 api_key。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">InstantMsgConfiguration</span> &#123;  </span><br><span class="line">  </span><br><span class="line">    <span class="meta">@Bean</span>  </span><br><span class="line">    <span class="keyword">public</span> RequestInterceptor <span class="title function_">MyBasicAuthRequestInterceptor</span><span class="params">()</span> &#123;  </span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">MyBasicAuthRequestInterceptor</span>();  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">MyBasicAuthRequestInterceptor</span> <span class="keyword">implements</span> <span class="title class_">RequestInterceptor</span> &#123;  </span><br><span class="line">  </span><br><span class="line">        <span class="meta">@Override</span>  </span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">apply</span><span class="params">(RequestTemplate requestTemplate)</span> &#123;  </span><br><span class="line">            requestTemplate.header(<span class="string">&quot;X-API-Key&quot;</span>, <span class="string">&quot;kkc_api_key&quot;</span>);  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>FallbackFactory定义。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span>  </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">InstantMsgServiceFallbackFactory</span> <span class="keyword">implements</span> <span class="title class_">FallbackFactory</span>&lt;InstantMsgService&gt; &#123;  </span><br><span class="line">  </span><br><span class="line">    <span class="meta">@Override</span>  </span><br><span class="line">    <span class="keyword">public</span> InstantMsgService <span class="title function_">create</span><span class="params">(Throwable cause)</span> &#123;  </span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">InstantMsgService</span>() &#123;  </span><br><span class="line">            <span class="meta">@Override</span>  </span><br><span class="line">            <span class="keyword">public</span> ResponseEntity&lt;Object&gt; <span class="title function_">sendMsg</span><span class="params">(InstantStructDTO body)</span> &#123;  </span><br><span class="line">                <span class="keyword">if</span> (cause <span class="keyword">instanceof</span> FeignException) &#123;  </span><br><span class="line">                    <span class="type">FeignException</span> <span class="variable">feignException</span> <span class="operator">=</span> (FeignException) cause;  </span><br><span class="line">                    <span class="keyword">return</span> ResponseEntity.status(feignException.status()).body(feignException.contentUTF8());  </span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;  </span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">null</span>;  </span><br><span class="line">                &#125;  </span><br><span class="line">            &#125;  </span><br><span class="line">        &#125;;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>service定义。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@FeignClient(name = &quot;instantMsg-server&quot;, url = &quot;http://10.64.4.78:8000&quot;, configuration = InstantMsgConfiguration.class, fallbackFactory = InstantMsgServiceFallbackFactory.class)</span>  </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">InstantMsgService</span> &#123;  </span><br><span class="line">  </span><br><span class="line">    <span class="comment">/**  </span></span><br><span class="line"><span class="comment">     * 即时通讯API  </span></span><br><span class="line"><span class="comment">     *     * <span class="doctag">@param</span> body  </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span>  </span></span><br><span class="line"><span class="comment">     */</span>    <span class="meta">@RequestMapping(value = &quot;/api&quot;, method = RequestMethod.POST)</span>  </span><br><span class="line">    ResponseEntity&lt;Object&gt; <span class="title function_">sendMsg</span><span class="params">(<span class="meta">@RequestBody</span> InstantStructDTO body)</span>;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当然，别忘了在启动类上加 @EnableFeignClients 注解。</p><h5 id="2-3-3-服务端推送"><a href="#2-3-3-服务端推送" class="headerlink" title="2.3.3 服务端推送"></a>2.3.3 服务端推送</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Resource</span>  </span><br><span class="line"><span class="keyword">private</span> InstantMsgService instantMsgService;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">sendStatus</span><span class="params">(String serviceCode, Boolean healthStatus)</span> &#123;  </span><br><span class="line">    <span class="type">JSONObject</span> <span class="variable">data</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JSONObject</span>();  </span><br><span class="line">    data.put(<span class="string">&quot;serviceCode&quot;</span>, serviceCode);  </span><br><span class="line">    data.put(<span class="string">&quot;healthStatus&quot;</span>, healthStatus);  </span><br><span class="line">    <span class="type">InstantMsgDTO</span> <span class="variable">instantMsgDTO</span> <span class="operator">=</span> InstantMsgDTO.builder()  </span><br><span class="line">            .channel(<span class="string">&quot;service-register-health&quot;</span>)  </span><br><span class="line">            .data(data)  </span><br><span class="line">            .build();  </span><br><span class="line">    <span class="type">InstantStructDTO</span> <span class="variable">instantStructDTO</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">InstantStructDTO</span>(<span class="string">&quot;publish&quot;</span>, instantMsgDTO);  </span><br><span class="line">    ResponseEntity&lt;Object&gt; response = instantMsgService.sendMsg(instantStructDTO);  </span><br><span class="line">    log.debug(<span class="string">&quot;instant msg service response:&#123;&#125;&quot;</span>, response);  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上述代码就是将服务的健康状态使用 Centrifugo 推送给前端。这里feign调用的过程就是执行下面的HTTP请求。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">curl --location --request POST &#x27;10.64.4.78:8000/api&#x27; \</span><br><span class="line">--header &#x27;X-API-Key: kkc_api_key&#x27; \</span><br><span class="line">--header &#x27;Content-Type: application/json&#x27; \</span><br><span class="line">--data-raw &#x27;&#123;</span><br><span class="line">    &quot;method&quot;: &quot;publish&quot;,</span><br><span class="line">    &quot;params&quot;: &#123;</span><br><span class="line">        &quot;channel&quot;: &quot;service-register-health&quot;,</span><br><span class="line">        &quot;data&quot;: &#123;</span><br><span class="line">            &quot;serviceCode&quot;: &quot;kkc-whale&quot;,</span><br><span class="line">            &quot;healthStatus&quot;: true</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;&#x27;</span><br></pre></td></tr></table></figure><p>前端建立连接，订阅 channel 后会收到如下消息：<br><img src="https://minio.xiaofeng.show/blog/2024/20250109191420.png" alt="image.png"></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span><span class="attr">&quot;connect&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span><span class="attr">&quot;token&quot;</span><span class="punctuation">:</span><span class="string">&quot;eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJhZG1pbiIsImV4cCI6MTc0NTA2MTE0MH0.POlYmjLFv2xJOjIzNkuJiy5tkpRNz5xynimcxyXufn4&quot;</span><span class="punctuation">,</span><span class="attr">&quot;name&quot;</span><span class="punctuation">:</span><span class="string">&quot;js&quot;</span><span class="punctuation">&#125;</span><span class="punctuation">,</span><span class="attr">&quot;id&quot;</span><span class="punctuation">:</span><span class="number">1</span><span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#123;</span><span class="attr">&quot;subscribe&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span><span class="attr">&quot;channel&quot;</span><span class="punctuation">:</span><span class="string">&quot;service-register-health&quot;</span><span class="punctuation">&#125;</span><span class="punctuation">,</span><span class="attr">&quot;id&quot;</span><span class="punctuation">:</span><span class="number">2</span><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span><span class="attr">&quot;id&quot;</span><span class="punctuation">:</span><span class="number">1</span><span class="punctuation">,</span><span class="attr">&quot;connect&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span><span class="attr">&quot;client&quot;</span><span class="punctuation">:</span><span class="string">&quot;3c950d00-fcc8-4e89-aae6-34066c582791&quot;</span><span class="punctuation">,</span><span class="attr">&quot;version&quot;</span><span class="punctuation">:</span><span class="string">&quot;5.4.9&quot;</span><span class="punctuation">,</span><span class="attr">&quot;expires&quot;</span><span class="punctuation">:</span><span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span><span class="attr">&quot;ttl&quot;</span><span class="punctuation">:</span><span class="number">8639947</span><span class="punctuation">,</span><span class="attr">&quot;ping&quot;</span><span class="punctuation">:</span><span class="number">25</span><span class="punctuation">,</span><span class="attr">&quot;pong&quot;</span><span class="punctuation">:</span><span class="literal"><span class="keyword">true</span></span><span class="punctuation">&#125;</span><span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#123;</span><span class="attr">&quot;id&quot;</span><span class="punctuation">:</span><span class="number">2</span><span class="punctuation">,</span><span class="attr">&quot;subscribe&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span><span class="punctuation">&#125;</span><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>收到推送消息时，如下：<br><img src="https://minio.xiaofeng.show/blog/2024/20250109191737.png" alt="image.png"></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span><span class="attr">&quot;push&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span><span class="attr">&quot;channel&quot;</span><span class="punctuation">:</span><span class="string">&quot;service-register-health&quot;</span><span class="punctuation">,</span><span class="attr">&quot;pub&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span><span class="attr">&quot;data&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span><span class="attr">&quot;serviceCode&quot;</span><span class="punctuation">:</span><span class="string">&quot;kkc-whale&quot;</span><span class="punctuation">,</span><span class="attr">&quot;healthStatus&quot;</span><span class="punctuation">:</span><span class="literal"><span class="keyword">false</span></span><span class="punctuation">&#125;</span><span class="punctuation">&#125;</span><span class="punctuation">&#125;</span><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h3 id="三、参考"><a href="#三、参考" class="headerlink" title="三、参考"></a>三、参考</h3><p>官网：<a href="https://centrifugal.dev/">https://centrifugal.dev/</a></p><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      
      
      <categories>
          
          <category> 开发相关 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>基于Prometheus的API查询Linux系统指标</title>
      <link href="/%E5%BC%80%E5%8F%91%E7%9B%B8%E5%85%B3-%E5%9F%BA%E4%BA%8EPrometheus%E7%9A%84API%E6%9F%A5%E8%AF%A2Linux%E7%B3%BB%E7%BB%9F%E6%8C%87%E6%A0%87/"/>
      <url>/%E5%BC%80%E5%8F%91%E7%9B%B8%E5%85%B3-%E5%9F%BA%E4%BA%8EPrometheus%E7%9A%84API%E6%9F%A5%E8%AF%A2Linux%E7%B3%BB%E7%BB%9F%E6%8C%87%E6%A0%87/</url>
      
        <content type="html"><![CDATA[<h3 id="一、写在前面"><a href="#一、写在前面" class="headerlink" title="一、写在前面"></a>一、写在前面</h3><p>最近项目上需要统计显示Linux系统指标，如CPU、内存、磁盘使用情况等指标。虽然 Granfana 可以展示这些指标，但是将其内嵌至系统中展示可能并不友好，所以需要定制开发。</p><h3 id="二、环境安装"><a href="#二、环境安装" class="headerlink" title="二、环境安装"></a>二、环境安装</h3><p>目标服务器的 node_exporter 是直接装在系统上的。Prometheus 是通过 docker-compose 安装的。</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">&#x27;2&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="attr">networks:</span></span><br><span class="line">  <span class="attr">monitor:</span></span><br><span class="line">    <span class="attr">driver:</span> <span class="string">bridge</span></span><br><span class="line"></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">prometheus:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">prom/prometheus</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">prometheus</span></span><br><span class="line">    <span class="attr">hostname:</span> <span class="string">prometheus</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./config/prometheus.yml:/etc/prometheus/prometheus.yml</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&#x27;9090:9090&#x27;</span></span><br></pre></td></tr></table></figure><p>prometheus.yml配置文件如下：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># my global config</span></span><br><span class="line"><span class="attr">global:</span></span><br><span class="line">  <span class="attr">scrape_interval:</span> <span class="string">15s</span> <span class="comment"># Set the scrape interval to every 15 seconds. Default is every 1 minute.</span></span><br><span class="line">  <span class="attr">evaluation_interval:</span> <span class="string">15s</span> <span class="comment"># Evaluate rules every 15 seconds. The default is every 1 minute.</span></span><br><span class="line">  <span class="comment"># scrape_timeout is set to the global default (10s).</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Alertmanager configuration</span></span><br><span class="line"><span class="attr">alerting:</span></span><br><span class="line">  <span class="attr">alertmanagers:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">static_configs:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">targets:</span></span><br><span class="line">          <span class="comment"># - alertmanager:9093</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Load rules once and periodically evaluate them according to the global &#x27;evaluation_interval&#x27;.</span></span><br><span class="line"><span class="attr">rule_files:</span></span><br><span class="line">  <span class="comment"># - &quot;first_rules.yml&quot;</span></span><br><span class="line">  <span class="comment"># - &quot;second_rules.yml&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># A scrape configuration containing exactly one endpoint to scrape:</span></span><br><span class="line"><span class="comment"># Here it&#x27;s Prometheus itself.</span></span><br><span class="line"><span class="attr">scrape_configs:</span></span><br><span class="line">  <span class="comment"># The job name is added as a label `job=&lt;job_name&gt;` to any timeseries scraped from this config.</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">job_name:</span> <span class="string">&quot;prometheus&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># metrics_path defaults to &#x27;/metrics&#x27;</span></span><br><span class="line">    <span class="comment"># scheme defaults to &#x27;http&#x27;.</span></span><br><span class="line"></span><br><span class="line">    <span class="attr">static_configs:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">targets:</span> [<span class="string">&quot;10.64.4.78:9090&quot;</span>]</span><br><span class="line"></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">job_name:</span> <span class="string">&quot;linux_metrics&quot;</span></span><br><span class="line">    <span class="attr">static_configs:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">targets:</span> [<span class="string">&quot;10.64.4.78:7777&quot;</span>]</span><br></pre></td></tr></table></figure><p>job_name为 <code>linux_metrics</code> 的是我要监听的服务器。<br><img src="https://minio.xiaofeng.show/blog/2024/20250106191233.png" alt="image.png"></p><h3 id="三、指标查询"><a href="#三、指标查询" class="headerlink" title="三、指标查询"></a>三、指标查询</h3><p><img src="https://minio.xiaofeng.show/blog/2024/20250106191735.png" alt="image.png"><br>如图所示，可将 PromSql 表达式写在查询栏内（多个指标用 OR 连接），下方图标会显示对应指标。</p><p>API 的使用与此类似, 参考:<a href="https://prometheus.io/docs/prometheus/latest/querying/api/">https://prometheus.io/docs/prometheus/latest/querying/api/</a><br>我主要用的是 <code>/api/v1/query</code> 和 <code>/api/v1/query_range</code></p><h4 id="api-v1-query"><a href="#api-v1-query" class="headerlink" title="&#x2F;api&#x2F;v1&#x2F;query"></a>&#x2F;api&#x2F;v1&#x2F;query</h4><p>主要用来查询指标的当前状态。参数只有 query，参数值只要把 PromSql 放进去即可。<br>如下所示：<br><img src="https://minio.xiaofeng.show/blog/2024/20250106193429.png" alt="image.png"><br>获取CPU使用率（多个指标可用 OR 连接），请求URL：<a href="http://10.64.4.78:9090/api/v1/query?query=label_replace">http://10.64.4.78:9090/api/v1/query?query=label_replace</a>((1 - avg(irate(node_cpu_seconds_total{mode&#x3D;”idle”}[5m]))) * 100, “metric”, “cpu_usage”, “”, “”)</p><p>响应结构如下：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;status&quot;</span><span class="punctuation">:</span> <span class="string">&quot;success&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;data&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;resultType&quot;</span><span class="punctuation">:</span> <span class="string">&quot;vector&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;result&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">            <span class="punctuation">&#123;</span></span><br><span class="line">                <span class="attr">&quot;metric&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">                    <span class="attr">&quot;metric&quot;</span><span class="punctuation">:</span> <span class="string">&quot;cpu_usage&quot;</span></span><br><span class="line">                <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;value&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">                    <span class="number">1736163220.039</span><span class="punctuation">,</span></span><br><span class="line">                    <span class="string">&quot;21.499999999689557&quot;</span></span><br><span class="line">                <span class="punctuation">]</span></span><br><span class="line">            <span class="punctuation">&#125;</span></span><br><span class="line">        <span class="punctuation">]</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h4 id="api-v1-query-range"><a href="#api-v1-query-range" class="headerlink" title="&#x2F;api&#x2F;v1&#x2F;query_range"></a>&#x2F;api&#x2F;v1&#x2F;query_range</h4><p>主要用来查询指标在某一时间段内的状态。除了参数 query 外，还有三个参数：</p><ul><li>start：开始时间</li><li>end：结束时间</li><li>step：步长<br>上述三个参数的单位都是秒，返回结果里的时间戳也是秒。<br>如下所示，查询一个小时内系统1分钟和5分钟的负载情况，步长为300秒。<br>请求 URL：<a href="http://10.64.4.78:9090/api/v1/query_range?start=1735264800&end=1735268399&step=300&query=label_replace">http://10.64.4.78:9090/api/v1/query_range?start=1735264800&amp;end=1735268399&amp;step=300&amp;query=label_replace</a>(node_load1{job&#x3D;’linux_metrics’}, “metric”, “one_min_load”, “”, “”) OR label_replace(node_load5{job&#x3D;’linux_metrics’}, “metric”, “five_min_load”, “”, “”)。响应如下：<figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;status&quot;</span><span class="punctuation">:</span> <span class="string">&quot;success&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;data&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;resultType&quot;</span><span class="punctuation">:</span> <span class="string">&quot;matrix&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;result&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">            <span class="punctuation">&#123;</span></span><br><span class="line">                <span class="attr">&quot;metric&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">                    <span class="attr">&quot;__name__&quot;</span><span class="punctuation">:</span> <span class="string">&quot;node_load1&quot;</span><span class="punctuation">,</span></span><br><span class="line">                    <span class="attr">&quot;instance&quot;</span><span class="punctuation">:</span> <span class="string">&quot;10.64.4.78:7777&quot;</span><span class="punctuation">,</span></span><br><span class="line">                    <span class="attr">&quot;job&quot;</span><span class="punctuation">:</span> <span class="string">&quot;linux_metrics&quot;</span><span class="punctuation">,</span></span><br><span class="line">                    <span class="attr">&quot;metric&quot;</span><span class="punctuation">:</span> <span class="string">&quot;one_min_load&quot;</span></span><br><span class="line">                <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;values&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">                    <span class="punctuation">[</span></span><br><span class="line">                        <span class="number">1735264800</span><span class="punctuation">,</span></span><br><span class="line">                        <span class="string">&quot;0.74&quot;</span></span><br><span class="line">                    <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">                    <span class="punctuation">[</span></span><br><span class="line">                        <span class="number">1735265100</span><span class="punctuation">,</span></span><br><span class="line">                        <span class="string">&quot;0.28&quot;</span></span><br><span class="line">                    <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">                    <span class="punctuation">[</span></span><br><span class="line">                        <span class="number">1735265400</span><span class="punctuation">,</span></span><br><span class="line">                        <span class="string">&quot;1.92&quot;</span></span><br><span class="line">                    <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">                    <span class="punctuation">[</span></span><br><span class="line">                        <span class="number">1735265700</span><span class="punctuation">,</span></span><br><span class="line">                        <span class="string">&quot;0.7&quot;</span></span><br><span class="line">                    <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">                    <span class="punctuation">[</span></span><br><span class="line">                        <span class="number">1735266000</span><span class="punctuation">,</span></span><br><span class="line">                        <span class="string">&quot;0.55&quot;</span></span><br><span class="line">                    <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">                    <span class="punctuation">[</span></span><br><span class="line">                        <span class="number">1735266300</span><span class="punctuation">,</span></span><br><span class="line">                        <span class="string">&quot;0.39&quot;</span></span><br><span class="line">                    <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">                    <span class="punctuation">[</span></span><br><span class="line">                        <span class="number">1735266600</span><span class="punctuation">,</span></span><br><span class="line">                        <span class="string">&quot;0.97&quot;</span></span><br><span class="line">                    <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">                    <span class="punctuation">[</span></span><br><span class="line">                        <span class="number">1735266900</span><span class="punctuation">,</span></span><br><span class="line">                        <span class="string">&quot;1.18&quot;</span></span><br><span class="line">                    <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">                    <span class="punctuation">[</span></span><br><span class="line">                        <span class="number">1735267200</span><span class="punctuation">,</span></span><br><span class="line">                        <span class="string">&quot;1.19&quot;</span></span><br><span class="line">                    <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">                    <span class="punctuation">[</span></span><br><span class="line">                        <span class="number">1735267500</span><span class="punctuation">,</span></span><br><span class="line">                        <span class="string">&quot;0.35&quot;</span></span><br><span class="line">                    <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">                    <span class="punctuation">[</span></span><br><span class="line">                        <span class="number">1735267800</span><span class="punctuation">,</span></span><br><span class="line">                        <span class="string">&quot;0.65&quot;</span></span><br><span class="line">                    <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">                    <span class="punctuation">[</span></span><br><span class="line">                        <span class="number">1735268100</span><span class="punctuation">,</span></span><br><span class="line">                        <span class="string">&quot;0.98&quot;</span></span><br><span class="line">                    <span class="punctuation">]</span></span><br><span class="line">                <span class="punctuation">]</span></span><br><span class="line">            <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="punctuation">&#123;</span></span><br><span class="line">                <span class="attr">&quot;metric&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">                    <span class="attr">&quot;__name__&quot;</span><span class="punctuation">:</span> <span class="string">&quot;node_load5&quot;</span><span class="punctuation">,</span></span><br><span class="line">                    <span class="attr">&quot;instance&quot;</span><span class="punctuation">:</span> <span class="string">&quot;10.64.4.78:7777&quot;</span><span class="punctuation">,</span></span><br><span class="line">                    <span class="attr">&quot;job&quot;</span><span class="punctuation">:</span> <span class="string">&quot;linux_metrics&quot;</span><span class="punctuation">,</span></span><br><span class="line">                    <span class="attr">&quot;metric&quot;</span><span class="punctuation">:</span> <span class="string">&quot;five_min_load&quot;</span></span><br><span class="line">                <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;values&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">                    <span class="punctuation">[</span></span><br><span class="line">                        <span class="number">1735264800</span><span class="punctuation">,</span></span><br><span class="line">                        <span class="string">&quot;0.68&quot;</span></span><br><span class="line">                    <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">                    <span class="punctuation">[</span></span><br><span class="line">                        <span class="number">1735265100</span><span class="punctuation">,</span></span><br><span class="line">                        <span class="string">&quot;0.52&quot;</span></span><br><span class="line">                    <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">                    <span class="punctuation">[</span></span><br><span class="line">                        <span class="number">1735265400</span><span class="punctuation">,</span></span><br><span class="line">                        <span class="string">&quot;1.03&quot;</span></span><br><span class="line">                    <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">                    <span class="punctuation">[</span></span><br><span class="line">                        <span class="number">1735265700</span><span class="punctuation">,</span></span><br><span class="line">                        <span class="string">&quot;0.83&quot;</span></span><br><span class="line">                    <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">                    <span class="punctuation">[</span></span><br><span class="line">                        <span class="number">1735266000</span><span class="punctuation">,</span></span><br><span class="line">                        <span class="string">&quot;0.71&quot;</span></span><br><span class="line">                    <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">                    <span class="punctuation">[</span></span><br><span class="line">                        <span class="number">1735266300</span><span class="punctuation">,</span></span><br><span class="line">                        <span class="string">&quot;0.55&quot;</span></span><br><span class="line">                    <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">                    <span class="punctuation">[</span></span><br><span class="line">                        <span class="number">1735266600</span><span class="punctuation">,</span></span><br><span class="line">                        <span class="string">&quot;0.75&quot;</span></span><br><span class="line">                    <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">                    <span class="punctuation">[</span></span><br><span class="line">                        <span class="number">1735266900</span><span class="punctuation">,</span></span><br><span class="line">                        <span class="string">&quot;1.21&quot;</span></span><br><span class="line">                    <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">                    <span class="punctuation">[</span></span><br><span class="line">                        <span class="number">1735267200</span><span class="punctuation">,</span></span><br><span class="line">                        <span class="string">&quot;1.03&quot;</span></span><br><span class="line">                    <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">                    <span class="punctuation">[</span></span><br><span class="line">                        <span class="number">1735267500</span><span class="punctuation">,</span></span><br><span class="line">                        <span class="string">&quot;0.62&quot;</span></span><br><span class="line">                    <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">                    <span class="punctuation">[</span></span><br><span class="line">                        <span class="number">1735267800</span><span class="punctuation">,</span></span><br><span class="line">                        <span class="string">&quot;0.73&quot;</span></span><br><span class="line">                    <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">                    <span class="punctuation">[</span></span><br><span class="line">                        <span class="number">1735268100</span><span class="punctuation">,</span></span><br><span class="line">                        <span class="string">&quot;0.84&quot;</span></span><br><span class="line">                    <span class="punctuation">]</span></span><br><span class="line">                <span class="punctuation">]</span></span><br><span class="line">            <span class="punctuation">&#125;</span></span><br><span class="line">        <span class="punctuation">]</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ul><h3 id="四、效果呈现"><a href="#四、效果呈现" class="headerlink" title="四、效果呈现"></a>四、效果呈现</h3><p>有了这些数据，就可以在前端用 Echarts 来展示数据了，如下所示：<br><img src="https://minio.xiaofeng.show/blog/2024/20250106194621.png" alt="image.png"></p><h3 id="五、指标查询"><a href="#五、指标查询" class="headerlink" title="五、指标查询"></a>五、指标查询</h3><p><img src="https://minio.xiaofeng.show/blog/2024/20250106195407.png" alt="image.png"><br>Prometheus上有个 Query Options，里面有个 Explore metrics，可以看到每个指标的含义。<br><img src="https://minio.xiaofeng.show/blog/2024/20250106195532.png" alt="image.png"></p><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      
      
      <categories>
          
          <category> 开发相关 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用Easy-Es对数据做多重聚合</title>
      <link href="/spring-%E4%BD%BF%E7%94%A8Easy-Es%E5%AF%B9%E6%95%B0%E6%8D%AE%E5%81%9A%E5%A4%9A%E9%87%8D%E8%81%9A%E5%90%88/"/>
      <url>/spring-%E4%BD%BF%E7%94%A8Easy-Es%E5%AF%B9%E6%95%B0%E6%8D%AE%E5%81%9A%E5%A4%9A%E9%87%8D%E8%81%9A%E5%90%88/</url>
      
        <content type="html"><![CDATA[<h3 id="一、引入依赖及配置"><a href="#一、引入依赖及配置" class="headerlink" title="一、引入依赖及配置"></a>一、引入依赖及配置</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>easyexcel<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">easy-es:</span>  </span><br><span class="line">  <span class="attr">address:</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span><span class="string">:9200</span>  </span><br><span class="line">  <span class="attr">username:</span> <span class="string">elastic</span>  </span><br><span class="line">  <span class="attr">password:</span> <span class="string">elastic</span>  </span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span>  </span><br><span class="line">  <span class="attr">global-config:</span>  </span><br><span class="line">    <span class="attr">print-dsl:</span> <span class="literal">false</span>  </span><br><span class="line">    <span class="attr">db-config:</span>  </span><br><span class="line">      <span class="attr">map-underscore-to-camel-case:</span> <span class="literal">false</span>  </span><br><span class="line">      <span class="attr">smartAddKeywordSuffix:</span> <span class="literal">false</span>  </span><br><span class="line">  <span class="attr">async:</span>  </span><br><span class="line">    <span class="attr">concurrent:</span> <span class="number">10</span></span><br></pre></td></tr></table></figure><h3 id="二、类构建（pojo、mapper、dao）"><a href="#二、类构建（pojo、mapper、dao）" class="headerlink" title="二、类构建（pojo、mapper、dao）"></a>二、类构建（pojo、mapper、dao）</h3><h4 id="2-1-实体类"><a href="#2-1-实体类" class="headerlink" title="2.1 实体类"></a>2.1 实体类</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@IndexName(value = &quot;my_stats&quot;, refreshPolicy = RefreshPolicy.IMMEDIATE)</span>  </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyStatistics</span> &#123;  </span><br><span class="line">    <span class="meta">@IndexId(type = IdType.TIME_ID)</span>  </span><br><span class="line">    <span class="meta">@IndexField(&quot;id&quot;)</span>  </span><br><span class="line">    <span class="keyword">private</span> String id;  </span><br><span class="line">  </span><br><span class="line">    <span class="comment">/**  </span></span><br><span class="line"><span class="comment">     * 通信时长 单位是秒 </span></span><br><span class="line"><span class="comment">     */</span>  </span><br><span class="line">    <span class="meta">@IndexField(&quot;communication_duration&quot;)</span>  </span><br><span class="line">    <span class="keyword">private</span> Integer communicationDuration;  </span><br><span class="line"></span><br><span class="line">    <span class="comment">/**  </span></span><br><span class="line"><span class="comment">     * 记录时间  </span></span><br><span class="line"><span class="comment">     */</span>  </span><br><span class="line">    <span class="meta">@IndexField(&quot;count_time&quot;)</span>  </span><br><span class="line">    <span class="keyword">private</span> Long countTime;  </span><br><span class="line">  </span><br><span class="line">    <span class="comment">/**  </span></span><br><span class="line"><span class="comment">     * 记录时间  </span></span><br><span class="line"><span class="comment">     */</span>  </span><br><span class="line">    <span class="meta">@IndexField(&quot;record_time&quot;)</span>  </span><br><span class="line">    <span class="meta">@JsonFormat(pattern = DatePattern.NORM_DATETIME_PATTERN, timezone = &quot;GMT+8&quot;)</span> </span><br><span class="line">    <span class="keyword">private</span> Date recordTime;  </span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**  </span></span><br><span class="line"><span class="comment">     * 设备编号  </span></span><br><span class="line"><span class="comment">     */</span>  </span><br><span class="line">    <span class="meta">@IndexField(&quot;device_no&quot;)</span>  </span><br><span class="line">    <span class="keyword">private</span> Integer deviceNo;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>实体类的注解类似于Mybatis-plus。</p><h4 id="2-2-mapper层"><a href="#2-2-mapper层" class="headerlink" title="2.2 mapper层"></a>2.2 mapper层</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">MyStatisticsMapper</span> <span class="keyword">extends</span> <span class="title class_">BaseEsMapper</span>&lt;MyStatistics&gt; &#123;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Mapper层写法也与Mybatis-plus类似。</p><h4 id="2-3-dao层"><a href="#2-3-dao层" class="headerlink" title="2.3 dao层"></a>2.3 dao层</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span>  </span><br><span class="line"><span class="meta">@RequiredArgsConstructor</span>  </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyStatisticsDao</span> &#123;  </span><br><span class="line">  </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> MyStatisticsMapper myStatisticsMapper;  </span><br><span class="line">  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">save</span><span class="params">(MyStatistics myStatistics)</span> &#123;  </span><br><span class="line">        myStatisticsMapper.insert(myStatistics);  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    <span class="keyword">public</span> List&lt;MyStatistics&gt; <span class="title function_">list</span><span class="params">()</span> &#123;  </span><br><span class="line">        <span class="keyword">return</span> EsWrappers.lambdaChainQuery(myStatisticsMapper)  </span><br><span class="line">                .list();  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    <span class="keyword">public</span> Boolean <span class="title function_">recordExist</span><span class="params">(Long countTime, String deviceNo)</span> &#123;  </span><br><span class="line">        <span class="keyword">return</span> EsWrappers.lambdaChainQuery(myStatisticsMapper)  </span><br><span class="line">                .eq(MyStatistics::getCountTime, countTime)  </span><br><span class="line">                .eq(MyStatistics::getDeviceNo, deviceNo)  </span><br><span class="line">                .exists();  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>dao层的基本的增删查改也与Mybatis-plus类似。</p><h4 id="2-4-启动程序加入EsMapper-扫描"><a href="#2-4-启动程序加入EsMapper-扫描" class="headerlink" title="2.4 启动程序加入EsMapper 扫描"></a>2.4 启动程序加入EsMapper 扫描</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@EsMapperScan(&quot;xxx.**.esmapper.**&quot;)</span>  </span><br><span class="line"><span class="meta">@SpringBootApplication</span>   </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Application</span> &#123;  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;  </span><br><span class="line">        SpringApplication.run(Application.class, args);  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="三、聚合函数"><a href="#三、聚合函数" class="headerlink" title="三、聚合函数"></a>三、聚合函数</h3><p>Easy-Es虽然也做了一些简单聚合的封装，但是复杂的聚合，还是得自己写。好在Easy-Es还提供了原生查询。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 半原生查询(也可以归于混合查询,通常在自定义聚合Aggregation时使用)</span></span><br><span class="line">   SearchResponse <span class="title function_">search</span><span class="params">(LambdaEsQueryWrapper&lt;T&gt; wrapper)</span> <span class="keyword">throws</span> IOException;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 标准原生查询 可指定 RequestOptions</span></span><br><span class="line">   SearchResponse <span class="title function_">search</span><span class="params">(SearchRequest searchRequest, RequestOptions requestOptions)</span> <span class="keyword">throws</span> IOException;</span><br></pre></td></tr></table></figure><p>我使用的是标准原生查询。下面代码是按时间统计（超过一天按天统计，不足一天按小时统计）通信时长。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> AccessUseTimeStatsVO <span class="title function_">getStats</span><span class="params">(String deviceNo, Long beginTime, Long endTime)</span> &#123;  </span><br><span class="line">    <span class="type">Boolean</span> <span class="variable">sortByHour</span> <span class="operator">=</span> (endTime - beginTime) &lt;= <span class="number">86400000L</span>;  </span><br><span class="line">    <span class="type">SearchRequest</span> <span class="variable">request</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SearchRequest</span>(<span class="string">&quot;my_stats&quot;</span>);  </span><br><span class="line">    <span class="comment">// 根据设备编号和起止时间查询  </span></span><br><span class="line">    <span class="type">QueryBuilder</span> <span class="variable">queryBuilder</span> <span class="operator">=</span> QueryBuilders.boolQuery()  </span><br><span class="line">            .must(QueryBuilders.matchQuery(<span class="string">&quot;device_no&quot;</span>, deviceNo))  </span><br><span class="line">            .must(QueryBuilders.rangeQuery(<span class="string">&quot;count_time&quot;</span>)  </span><br><span class="line">                    .gte(beginTime)  </span><br><span class="line">                    .lte(endTime));  </span><br><span class="line">    <span class="comment">// 通信时长  </span></span><br><span class="line">    <span class="type">String</span> <span class="variable">durationMaxAggrName</span> <span class="operator">=</span> <span class="string">&quot;durationMax&quot;</span>;  </span><br><span class="line">    <span class="type">AggregationBuilder</span> <span class="variable">durationMaxAggr</span> <span class="operator">=</span> AggregationBuilders.max(durationMaxAggrName)  </span><br><span class="line">            .field(<span class="string">&quot;communication_duration&quot;</span>);  </span><br><span class="line">    <span class="type">String</span> <span class="variable">durationMinAggrName</span> <span class="operator">=</span> <span class="string">&quot;durationMin&quot;</span>;  </span><br><span class="line">    <span class="type">AggregationBuilder</span> <span class="variable">durationMinAggr</span> <span class="operator">=</span> AggregationBuilders.min(durationMinAggrName)  </span><br><span class="line">            .field(<span class="string">&quot;communication_duration&quot;</span>);  </span><br><span class="line">    <span class="comment">// 根据时间聚合  </span></span><br><span class="line">    <span class="type">String</span> <span class="variable">dateHistogramAggName</span> <span class="operator">=</span> <span class="string">&quot;groupDate&quot;</span>;  </span><br><span class="line">    <span class="type">DateHistogramAggregationBuilder</span> <span class="variable">dateHistogramAgg</span> <span class="operator">=</span> AggregationBuilders.dateHistogram(dateHistogramAggName)  </span><br><span class="line">            .field(<span class="string">&quot;record_time&quot;</span>)  </span><br><span class="line">            .timeZone(ZoneId.of(<span class="string">&quot;Asia/Shanghai&quot;</span>))  </span><br><span class="line">            .subAggregation(durationMaxAggr)  </span><br><span class="line">            .subAggregation(durationMinAggr);  </span><br><span class="line">    <span class="comment">// 按小时 or 按天  </span></span><br><span class="line">    <span class="keyword">if</span> (sortByHour) &#123;  </span><br><span class="line">        dateHistogramAgg.calendarInterval(DateHistogramInterval.HOUR)  </span><br><span class="line">                .format(<span class="string">&quot;HH&quot;</span>);  </span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;  </span><br><span class="line">        dateHistogramAgg.calendarInterval(DateHistogramInterval.DAY)  </span><br><span class="line">                .format(<span class="string">&quot;MM-dd&quot;</span>);  </span><br><span class="line">    &#125;  </span><br><span class="line">    request.source().query(queryBuilder).aggregation(dateHistogramAgg);  </span><br><span class="line">    <span class="type">SearchResponse</span> <span class="variable">response</span> <span class="operator">=</span> search(request);  </span><br><span class="line">    <span class="type">Aggregations</span> <span class="variable">aggregations</span> <span class="operator">=</span> response.getAggregations();  </span><br><span class="line">    <span class="type">Histogram</span> <span class="variable">groupDateAggr</span> <span class="operator">=</span> aggregations.get(dateHistogramAggName);  </span><br><span class="line">    <span class="comment">// 时间段  </span></span><br><span class="line">    List&lt;String&gt; dateTimeArray = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();  </span><br><span class="line">    <span class="comment">// 入网时长  </span></span><br><span class="line">    List&lt;Integer&gt; accessDurationArray = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();  </span><br><span class="line">    List&lt;? <span class="keyword">extends</span> <span class="title class_">Histogram</span>.Bucket&gt; buckets = groupDateAggr.getBuckets();  </span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; buckets.size(); i++) &#123;  </span><br><span class="line">        Histogram.<span class="type">Bucket</span> <span class="variable">bucket</span> <span class="operator">=</span> buckets.get(i);  </span><br><span class="line">        <span class="comment">// 时间  </span></span><br><span class="line">        dateTimeArray.add(bucket.getKeyAsString());  </span><br><span class="line">        <span class="comment">// 入网时长  </span></span><br><span class="line">        <span class="type">Aggregation</span> <span class="variable">durationMax</span> <span class="operator">=</span> bucket.getAggregations().get(durationMaxAggrName);  </span><br><span class="line">        <span class="type">double</span> <span class="variable">maxValue</span> <span class="operator">=</span> ((ParsedMax) durationMax).getValue();  </span><br><span class="line">        <span class="type">Aggregation</span> <span class="variable">durationMin</span> <span class="operator">=</span> bucket.getAggregations().get(durationMinAggrName);  </span><br><span class="line">        <span class="type">double</span> <span class="variable">minValue</span> <span class="operator">=</span> ((ParsedMin) durationMin).getValue();  </span><br><span class="line">        <span class="type">int</span> durationValue;  </span><br><span class="line">        <span class="keyword">if</span> (Double.isInfinite(maxValue) || Double.isInfinite(minValue)) &#123;  </span><br><span class="line">            durationValue = <span class="number">0</span>;  </span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;  </span><br><span class="line">            durationValue = <span class="keyword">new</span> <span class="title class_">BigDecimal</span>(maxValue - minValue)  </span><br><span class="line">                    .divide(<span class="keyword">new</span> <span class="title class_">BigDecimal</span>(<span class="number">60</span>), <span class="number">2</span>, BigDecimal.ROUND_HALF_UP).intValue();  </span><br><span class="line">        &#125;  </span><br><span class="line">        accessDurationArray.add(durationValue);  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="keyword">return</span> AccessUseTimeStatsVO.builder()  </span><br><span class="line">            .dateTimeArray(dateTimeArray)  </span><br><span class="line">            .accessDurationArray(accessDurationArray)  </span><br><span class="line">            .build();  </span><br><span class="line">&#125;  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">private</span> SearchResponse <span class="title function_">search</span><span class="params">(SearchRequest request)</span> &#123;  </span><br><span class="line">    <span class="type">SearchResponse</span> <span class="variable">response</span> <span class="operator">=</span> <span class="literal">null</span>;  </span><br><span class="line">    <span class="keyword">try</span> &#123;  </span><br><span class="line">        response = myStatisticsMapper.search(request, RequestOptions.DEFAULT);  </span><br><span class="line">        log.debug(<span class="string">&quot;response:&#123;&#125;&quot;</span>, response);  </span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception ex) &#123;  </span><br><span class="line">        log.error(<span class="string">&quot;search error&quot;</span>, ex);  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="keyword">return</span> response;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span>  </span><br><span class="line"><span class="meta">@AllArgsConstructor</span>  </span><br><span class="line"><span class="meta">@NoArgsConstructor</span>  </span><br><span class="line"><span class="meta">@Builder</span>  </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AccessUseTimeStatsVO</span> &#123;  </span><br><span class="line">  </span><br><span class="line">    <span class="comment">/**  </span></span><br><span class="line"><span class="comment">     * 小时 或 日  </span></span><br><span class="line"><span class="comment">     */</span>  </span><br><span class="line">    <span class="keyword">private</span> List&lt;String&gt; dateTimeArray;  </span><br><span class="line">  </span><br><span class="line">    <span class="comment">/**  </span></span><br><span class="line"><span class="comment">     * 入网时长 min  </span></span><br><span class="line"><span class="comment">     */</span>    </span><br><span class="line">     <span class="keyword">private</span> List&lt;Integer&gt; accessDurationArray;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="四、参考"><a href="#四、参考" class="headerlink" title="四、参考"></a>四、参考</h3><p>Easy-Es官网：<a href="https://www.easy-es.cn/">https://www.easy-es.cn/</a><br>ElasticSearch官网：<a href="https://www.elastic.co/docs">https://www.elastic.co/docs</a></p><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      
      
      <categories>
          
          <category> spring </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Ubuntu安装翻墙软件</title>
      <link href="/%E5%B7%A5%E5%85%B7-Ubuntu%E5%AE%89%E8%A3%85%E7%BF%BB%E5%A2%99%E8%BD%AF%E4%BB%B6/"/>
      <url>/%E5%B7%A5%E5%85%B7-Ubuntu%E5%AE%89%E8%A3%85%E7%BF%BB%E5%A2%99%E8%BD%AF%E4%BB%B6/</url>
      
        <content type="html"><![CDATA[<h3 id="一、安装背景"><a href="#一、安装背景" class="headerlink" title="一、安装背景"></a>一、安装背景</h3><p>最近在云服务器上安装了Jenkins，需要从Github拉取代码。但是经常会出现超时，于是便有了安装代理的想法。</p><p>上网搜索一通后选择了 <code>v2ray</code> ，毕竟Windows上用过类似产品。</p><h3 id="二、安装步骤"><a href="#二、安装步骤" class="headerlink" title="二、安装步骤"></a>二、安装步骤</h3><h3 id="2-1-安装V2ray内核"><a href="#2-1-安装V2ray内核" class="headerlink" title="2.1 安装V2ray内核"></a>2.1 安装V2ray内核</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -Ls https://mirrors.v2raya.org/go.sh | sudo bash</span><br></pre></td></tr></table></figure><h3 id="2-2-安装V2rayA"><a href="#2-2-安装V2rayA" class="headerlink" title="2.2 安装V2rayA"></a>2.2 安装V2rayA</h3><p>1.添加公钥</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget -qO - https://apt.v2raya.org/key/public-key.asc | sudo tee /etc/apt/trusted.gpg.d/v2raya.asc   #添加公钥</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">echo &quot;deb https://apt.v2raya.org/ v2raya main&quot; | sudo tee /etc/apt/sources.list.d/v2raya.list    #添加v2rayA软件源</span><br><span class="line">sudo apt update    #更新软件源</span><br></pre></td></tr></table></figure><p>2.安装v2rayA</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install v2raya</span><br></pre></td></tr></table></figure><p>3.启动v2rayA</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl start v2raya.service</span><br></pre></td></tr></table></figure><p>参考文章到这里就安装完成了，但是我的打开页面却报错——检测到 geosite.dat, geoip.dat 文件或 v2ray-core 可能未正确安装，需要下载安装 v2ray &#x2F; xray core，我选择安装 v2ray。</p><p>4.安装v2ray</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">wget https://github.com/v2fly/v2ray-core/releases/latest/download/v2ray-linux-64.zip </span><br><span class="line"></span><br><span class="line">unzip v2ray-linux-64.zip -d ./v2ray </span><br><span class="line"></span><br><span class="line">sudo mkdir -p /usr/local/share/v2ray </span><br><span class="line"></span><br><span class="line">sudo cp ./v2ray/*dat /usr/local/share/v2ray </span><br><span class="line"></span><br><span class="line">sudo install -Dm755 ./v2ray/v2ray /usr/local/bin/v2ray</span><br></pre></td></tr></table></figure><h2 id="三、-GUI界面配置"><a href="#三、-GUI界面配置" class="headerlink" title="三、 GUI界面配置"></a>三、 GUI界面配置</h2><p>通过2017端口进入web管理界面<br>    <a href="http://localhost:2017/">http://localhost:2017</a><br>如果无法访问请检查服务是否启动！</p><p><img src="https://minio.xiaofeng.show/blog/2024/20241129162849.png" alt="image.png"><br>第一次进入创建一个管理员账号和密码。后续重置可以通过命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo v2raya --reset-password  #重置密码</span><br></pre></td></tr></table></figure><p>第一次进入之后导入你的订阅链接，或是输入自己部署的节点！</p><p>导入之后点击更新，之后切换标签至你的节点处查看你的全部节点情况<br><img src="https://minio.xiaofeng.show/blog/2024/20241129162939.png" alt="image.png"><br>在未启动服务时，连接的节点呈现柚红色。我们在左上角点击相应按钮启动服务。</p><p>选择一个或多个节点连接。这里不建议选择过多的节点，4 个以内为佳。之后启动服务！启动之后启动的节点呈现蓝色，左上角的图标也显示为蓝色的正在运行。启动成功。<br><img src="https://minio.xiaofeng.show/blog/2024/20241129163011.png" alt="image.png"><br>配置代理</p><p>默认情况下 v2rayA 会通过核心开放 20170(socks5), 20171(http), 20172(带分流规则的http) 端口。<br><img src="https://minio.xiaofeng.show/blog/2024/20241129163035.png" alt="image.png"><br>这种方法是 v2rayA 推荐的方法。它相比于其他方法具有诸多优势，v2rayA 可以一键开启透明代理，为所有程序提供代理服务。</p><p>在设置中选择透明代理的分流方式，以及实现方式，然后保存即可。</p><p>注意，如需选择 GFWList，需要下载对应的规则库，请点击右上角的更新以完成下载。</p><h2 id="四、参考链接"><a href="#四、参考链接" class="headerlink" title="四、参考链接"></a>四、参考链接</h2><p>参考一：<a href="https://github.com/ningmoon/v2ray">https://github.com/ningmoon/v2ray</a><br>参考二：<a href="https://aisikao.ren/22633/">https://aisikao.ren/22633/</a></p><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      
      
      <categories>
          
          <category> 工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ubuntu批量上传及更新</title>
      <link href="/%E5%BC%80%E5%8F%91%E7%9B%B8%E5%85%B3-ubuntu%E6%89%B9%E9%87%8F%E4%B8%8A%E4%BC%A0%E5%8F%8A%E6%9B%B4%E6%96%B0/"/>
      <url>/%E5%BC%80%E5%8F%91%E7%9B%B8%E5%85%B3-ubuntu%E6%89%B9%E9%87%8F%E4%B8%8A%E4%BC%A0%E5%8F%8A%E6%9B%B4%E6%96%B0/</url>
      
        <content type="html"><![CDATA[<h3 id="一、背景"><a href="#一、背景" class="headerlink" title="一、背景"></a>一、背景</h3><p>项目中需要批量上传.deb包并更新，但是需要上传的服务器并未开放 root 用户，只能登录普通用户再进行切换，我查阅资料后，决定借助 expect 来解决这一问题。</p><h3 id="二、依赖安装"><a href="#二、依赖安装" class="headerlink" title="二、依赖安装"></a>二、依赖安装</h3><p>因为项目服务器无法连接外网，所以只能手动下载deb包并安装。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">dpkg -i libtcl8.6_8.6.10+dfsg-1_amd64.deb</span><br><span class="line">dpkg -i tcl8.6_8.6.10+dfsg-1_amd64.deb</span><br><span class="line">dpkg -i tcl-expect_5.45.4-2build1_amd64.deb</span><br><span class="line">dpkg -i expect_5.45.4-2build1_amd64.deb</span><br></pre></td></tr></table></figure><h3 id="三、expect脚本"><a href="#三、expect脚本" class="headerlink" title="三、expect脚本"></a>三、expect脚本</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/usr/bin/expect -f</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">设置超时时间</span></span><br><span class="line">set timeout -1</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">从命令行参数中获取远程服务器信息、SSH 密码、root 密码和要执行的脚本路径</span></span><br><span class="line">set host [lindex $argv 0]</span><br><span class="line">set user [lindex $argv 1]</span><br><span class="line">set ssh_password [lindex $argv 2]</span><br><span class="line">set root_password [lindex $argv 3]</span><br><span class="line">set script_path [lindex $argv 4]</span><br><span class="line">set package_version [lindex $argv 5]</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">SSH 登录到远程服务器</span></span><br><span class="line">spawn ssh &quot;$user@$host&quot;</span><br><span class="line">expect &#123;</span><br><span class="line">    # 如果是首次连接，需要确认主机指纹</span><br><span class="line">    &quot;yes/no&quot; &#123; send &quot;yes\r&quot;; exp_continue &#125;</span><br><span class="line">    &quot;password:&quot; &#123; send &quot;$ssh_password\r&quot; &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">成功登录后，切换到 root 用户</span></span><br><span class="line">expect &quot;$ &quot;</span><br><span class="line">send &quot;su -\r&quot;</span><br><span class="line">expect &quot;Password:&quot;</span><br><span class="line">send &quot;$root_password\r&quot;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">切换成功后执行远程脚本</span></span><br><span class="line">expect &quot;# &quot;</span><br><span class="line">send &quot;bash $script_path $package_version \r&quot;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">等待脚本执行完成</span></span><br><span class="line">expect &quot;# &quot;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">退出 root 用户</span></span><br><span class="line">send &quot;exit\r&quot;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">退出 SSH 会话</span></span><br><span class="line">expect &quot;$ &quot;</span><br><span class="line">send &quot;exit\r&quot;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">结束 expect 会话</span></span><br><span class="line">expect eof</span><br></pre></td></tr></table></figure><h3 id="四、批量上传及更新脚本"><a href="#四、批量上传及更新脚本" class="headerlink" title="四、批量上传及更新脚本"></a>四、批量上传及更新脚本</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line"></span><br><span class="line">PACKAGE_VERSION=$1</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">主机列表文件</span></span><br><span class="line">HOSTS_FILE=&quot;hosts.txt&quot;</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">要上传的本地文件路径</span></span><br><span class="line">LOCAL_FILE=&quot;back_install_dir&quot;</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">远程路径</span></span><br><span class="line">REMOTE_PATH=&quot;/home/a123&quot;</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">SSH 用户名</span></span><br><span class="line">USER=&quot;a123&quot;</span><br><span class="line">PASSWORD=&quot;a123&quot;</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">root 用户密码</span></span><br><span class="line">ROOT_PASSWORD=&quot;1&quot; </span><br><span class="line">REMOTE_SCRIPT=&quot;/home/a123/back_install_dir/install_back_end.sh&quot;</span><br><span class="line">THREADS=14</span><br><span class="line"></span><br><span class="line">update_host() &#123;</span><br><span class="line">    HOST=$1</span><br><span class="line">    LOCAL_FILE=$2</span><br><span class="line">    REMOTE_PATH=$3</span><br><span class="line">    USER=$4</span><br><span class="line">    PASSWORD=$5</span><br><span class="line">    ROOT_PASSWORD=$6</span><br><span class="line">    REMOTE_SCRIPT=$7</span><br><span class="line">    PACKAGE_VERSION=$8</span><br><span class="line">    echo &quot;Connecting to $HOST...&quot;</span><br><span class="line">    echo &quot;upload $LOCAL_FILE to $USER @ $PASSWORD : $REMOTE_PATH&quot;</span><br><span class="line">    # 使用 scp 上传文件到远程主机</span><br><span class="line">    sshpass -p &quot;$PASSWORD&quot; scp -r -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null &quot;$LOCAL_FILE&quot; &quot;$USER@$HOST:$REMOTE_PATH&quot;</span><br><span class="line">    if [ $? -eq 0 ]; then</span><br><span class="line">        echo &quot;$HOST: Upload successful&quot;</span><br><span class="line">    else</span><br><span class="line">        echo &quot;$HOST: Upload failed&quot;</span><br><span class="line">return</span><br><span class="line">    fi</span><br><span class="line"></span><br><span class="line">    # 在本地使用 expect 登录远程服务器并执行脚本</span><br><span class="line">    ./local_expect_script.exp &quot;$HOST&quot; &quot;$USER&quot; &quot;$PASSWORD&quot; &quot;$ROOT_PASSWORD&quot; &quot;$REMOTE_SCRIPT&quot; &quot;$PACKAGE_VERSION&quot;</span><br><span class="line">    if [ $? -eq 0 ]; then</span><br><span class="line">echo &quot;$HOST: script executed successful&quot;</span><br><span class="line">    else</span><br><span class="line">        echo &quot;$HOST: script executed failed&quot;</span><br><span class="line">        return</span><br><span class="line">    fi</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">export -f update_host</span><br><span class="line">cat &quot;$HOSTS_FILE&quot; | xargs -n 1 -P $THREADS -I &#123;&#125; bash -c &#x27;update_host &quot;$@&quot;&#x27; _ &#123;&#125; &quot;$LOCAL_FILE&quot; &quot;$REMOTE_PATH&quot; &quot;$USER&quot; &quot;$PASSWORD&quot; &quot;$ROOT_PASSWORD&quot; &quot;$REMOTE_SCRIPT&quot; &quot;$PACKAGE_VERSION&quot;</span><br></pre></td></tr></table></figure><p>考虑到逐一对每台设备更新太耗时，这里加入了多线程。hosts.txt里存放的是需要更新的服务器IP地址，如下所示。</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">10.64.200.167</span><br><span class="line">10.64.200.170</span><br><span class="line">10.64.200.177</span><br><span class="line">10.64.200.175</span><br><span class="line">10.64.200.176</span><br><span class="line">10.64.200.172</span><br><span class="line">10.64.200.168</span><br><span class="line">10.64.200.166</span><br><span class="line">10.64.200.169</span><br><span class="line">10.64.200.174</span><br><span class="line">10.64.200.171</span><br><span class="line">10.64.200.152</span><br><span class="line">10.64.200.102</span><br><span class="line">10.64.200.173</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>最后是 install_back_end.sh 更新脚本：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">PACKAGE_VERSION=$1</span><br><span class="line"></span><br><span class="line">dpkg -i /home/a123/back_install_dir/box-station_$&#123;PACKAGE_VERSION&#125;.deb</span><br><span class="line">systemctl daemon-reload</span><br><span class="line">systemctl restart box-station.service</span><br><span class="line">systemctl enable box-station.service</span><br></pre></td></tr></table></figure><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      
      
      <categories>
          
          <category> 开发相关 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>软考备考计划</title>
      <link href="/%E8%BD%AF%E8%80%83-%E8%BD%AF%E8%80%83%E5%A4%87%E8%80%83%E8%AE%A1%E5%88%92/"/>
      <url>/%E8%BD%AF%E8%80%83-%E8%BD%AF%E8%80%83%E5%A4%87%E8%80%83%E8%AE%A1%E5%88%92/</url>
      
        <content type="html"><![CDATA[<h3 id="一、总计划"><a href="#一、总计划" class="headerlink" title="一、总计划"></a>一、总计划</h3><table><thead><tr><th align="center">阶段</th><th align="center">学习时间</th><th align="center">学习模块</th></tr></thead><tbody><tr><td align="center">第一阶段</td><td align="center">9月9日-9月29日</td><td align="center">综合知识</td></tr><tr><td align="center">第二阶段</td><td align="center">9月30日-10月20日</td><td align="center">案例分析</td></tr><tr><td align="center">第三阶段</td><td align="center">10月21日-11月10日</td><td align="center">论文</td></tr></tbody></table><h3 id="二、分计划"><a href="#二、分计划" class="headerlink" title="二、分计划"></a>二、分计划</h3><h4 id="2-1-第一阶段"><a href="#2-1-第一阶段" class="headerlink" title="2.1 第一阶段"></a>2.1 第一阶段</h4><p>状态标识： ✅</p><table><thead><tr><th>状态</th><th>专栏章节</th><th>章节名称</th><th>计划完成时间</th><th>实际完成时间</th></tr></thead><tbody><tr><td>✅</td><td>01</td><td>计算机硬件</td><td>9月9日</td><td>9月15日</td></tr><tr><td></td><td>02</td><td>操作系统知识</td><td>9月10日</td><td></td></tr><tr><td>✅</td><td>03</td><td>数据库系统</td><td>9月11日</td><td>9月下旬</td></tr><tr><td></td><td>04</td><td>嵌入式技术</td><td>9月12日</td><td></td></tr><tr><td>✅</td><td>05</td><td>计算机网络</td><td>9月13日</td><td>9月17日</td></tr><tr><td></td><td>06</td><td>其他计算机基础知识</td><td>9月14日</td><td></td></tr><tr><td></td><td>07</td><td>系统配置与性能评价</td><td>9月15日</td><td></td></tr><tr><td></td><td>08</td><td>信息系统基础</td><td>9月16日</td><td></td></tr><tr><td></td><td>09</td><td>系统安全</td><td>9月17日</td><td></td></tr><tr><td>✅</td><td>10</td><td>软件工程</td><td>9月18日</td><td>10月4日</td></tr><tr><td></td><td>11</td><td>面向对象技术</td><td>9月19日</td><td></td></tr><tr><td></td><td>12</td><td>项目管理</td><td>9月20日</td><td></td></tr><tr><td></td><td>13</td><td>系统架构设计</td><td>9月21日</td><td></td></tr><tr><td></td><td>14</td><td>软件可靠性基础</td><td>9月22日</td><td></td></tr><tr><td></td><td>15</td><td>软件架构的演化和维护</td><td>9月23日</td><td></td></tr><tr><td></td><td>16</td><td>未来信息综合技术</td><td>9月24日</td><td></td></tr><tr><td></td><td>17</td><td>论文写作专题</td><td>9月25日</td><td></td></tr><tr><td></td><td>18</td><td>数学与经济管理</td><td>9月26日</td><td></td></tr><tr><td></td><td>19</td><td>知识产权与标准化</td><td>9月27日</td><td></td></tr><tr><td></td><td>20</td><td>案例专题-1</td><td>9月28日</td><td></td></tr><tr><td></td><td>21</td><td>案例专题-2</td><td>9月29日</td><td></td></tr></tbody></table><h4 id="2-2-第二阶段"><a href="#2-2-第二阶段" class="headerlink" title="2.2 第二阶段"></a>2.2 第二阶段</h4><table><thead><tr><th>状态</th><th>专栏章节</th><th>章节名称</th><th>计划完成时间</th><th>实际完成时间</th></tr></thead><tbody><tr><td></td><td>01</td><td>案例分析概述</td><td>9月30日</td><td></td></tr><tr><td></td><td>02</td><td>软件架构设计</td><td>10月1日</td><td></td></tr><tr><td></td><td>03</td><td>系统开发基础</td><td>10月2日</td><td></td></tr><tr><td></td><td>04</td><td>数据库系统</td><td>10月3日</td><td></td></tr><tr><td></td><td>05</td><td>嵌入式系统</td><td>10月4日</td><td></td></tr><tr><td></td><td>06</td><td>Web 应用开发</td><td>10月5日</td><td></td></tr><tr><td></td><td>07</td><td>信息系统架构设计</td><td>10月6日</td><td></td></tr><tr><td></td><td>08</td><td>层次式架构设计</td><td>10月7日</td><td></td></tr><tr><td></td><td>09</td><td>云原生架构设计</td><td>10月8日</td><td></td></tr><tr><td></td><td>10</td><td>面向服务架构设计</td><td>10月9日</td><td></td></tr><tr><td></td><td>11</td><td>嵌入式系统架构设计</td><td>10月10日</td><td></td></tr><tr><td>✅</td><td>12</td><td>通信系统架构设计</td><td>10月11日</td><td>10月4日</td></tr><tr><td></td><td>13</td><td>安全架构设计</td><td>10月12日</td><td></td></tr><tr><td></td><td>14</td><td>大数据架构设计</td><td>10月13日</td><td></td></tr><tr><td></td><td>15</td><td>2024年5月真题</td><td>10月14日</td><td></td></tr><tr><td></td><td>16</td><td>2024年5月真题</td><td>10月15日</td><td></td></tr><tr><td></td><td>17</td><td>2023年11月真题</td><td>10月16日</td><td></td></tr><tr><td></td><td>18</td><td>2023年11月真题</td><td>10月17日</td><td></td></tr><tr><td></td><td>19</td><td>2023年11月真题</td><td>10月18日</td><td></td></tr><tr><td></td><td>20</td><td>2023年11月真题</td><td>10月19日</td><td></td></tr><tr><td></td><td>21</td><td>2022年11月真题</td><td>10月20日</td><td></td></tr></tbody></table><h4 id="2-3-第三阶段"><a href="#2-3-第三阶段" class="headerlink" title="2.3 第三阶段"></a>2.3 第三阶段</h4><table><thead><tr><th>状态</th><th>专栏章节</th><th>章节名称</th><th>计划完成时间</th><th>实际完成时间</th></tr></thead><tbody><tr><td></td><td>01</td><td>论文分析</td><td>10月21日</td><td></td></tr><tr><td></td><td>02</td><td>万能模板</td><td>10月22日</td><td></td></tr><tr><td></td><td>03</td><td>正文素材</td><td>10月23日</td><td></td></tr><tr><td></td><td>04</td><td>论软件设计方法</td><td>10月24日</td><td></td></tr><tr><td></td><td>05</td><td>论企业应用集成</td><td>10月25日</td><td></td></tr><tr><td></td><td>06</td><td>论软件系统架构风格</td><td>10月26日</td><td></td></tr><tr><td></td><td>07</td><td>论高可靠性系统中软件容错技术的应用</td><td>10月27日</td><td></td></tr><tr><td></td><td>08</td><td>论面向服务架构设计及其应用</td><td>10月28日</td><td></td></tr><tr><td></td><td>09</td><td>论软件架构评估</td><td>10月29日</td><td></td></tr><tr><td></td><td>10</td><td>论信息系统的安全架构设计</td><td>10月30日</td><td></td></tr><tr><td></td><td>11</td><td>基于构建的软件开发</td><td>10月31日</td><td></td></tr><tr><td></td><td>12</td><td>论企业集成平台的技术与应用</td><td>11月1日</td><td></td></tr><tr><td></td><td>13</td><td>2024年5月真题</td><td>11月2日</td><td></td></tr><tr><td></td><td>14</td><td>2024年5月真题</td><td>11月3日</td><td></td></tr><tr><td></td><td>15</td><td>2023年11月真题</td><td>11月4日</td><td></td></tr><tr><td></td><td>16</td><td>2023年11月真题</td><td>11月5日</td><td></td></tr><tr><td></td><td>17</td><td>2022年11月真题</td><td>11月6日</td><td></td></tr><tr><td></td><td>18</td><td>2022年11月真题</td><td>11月7日</td><td></td></tr><tr><td></td><td>19</td><td>查漏补缺</td><td>11月8日</td><td></td></tr><tr><td></td><td>20</td><td>查漏补缺</td><td>11月9日</td><td></td></tr><tr><td></td><td>21</td><td>查漏补缺</td><td>11月10日</td><td></td></tr></tbody></table><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      
      
      <categories>
          
          <category> 软考 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 软考 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring 中用到的设计模式</title>
      <link href="/spring-Spring-%E4%B8%AD%E7%94%A8%E5%88%B0%E7%9A%84%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
      <url>/spring-Spring-%E4%B8%AD%E7%94%A8%E5%88%B0%E7%9A%84%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<h3 id="一、工厂设计模式"><a href="#一、工厂设计模式" class="headerlink" title="一、工厂设计模式"></a>一、工厂设计模式</h3><p>Spring 使用工厂模式可以通过 <code>BeanFactory</code> 或 <code>ApplicationContext</code> 创建 bean 对象。</p><p><strong>两者对比：</strong></p><ul><li><code>BeanFactory</code>：延迟注入(使用到某个 bean 的时候才会注入),相比于<code>ApplicationContext</code> 来说会占用更少的内存，程序启动速度更快。</li><li><code>ApplicationContext</code>：容器启动的时候，不管你用没用到，一次性创建所有 bean 。<code>BeanFactory</code> 仅提供了最基本的依赖注入支持，<code>ApplicationContext</code> 扩展了 <code>BeanFactory</code> ,除了有<code>BeanFactory</code>的功能还有额外更多功能，所以一般开发人员使用<code>ApplicationContext</code>会更多。</li></ul><p><code>ApplicationContext</code> 的三个实现类：</p><ol><li><code>ClassPathXmlApplication</code>：把上下文文件当成类路径资源。</li><li><code>FileSystemXmlApplication</code>：从文件系统中的 XML 文件载入上下文定义信息。</li><li><code>XmlWebApplicationContext</code>：从 Web 系统中的 XML 文件载入上下文定义信息。</li></ol><p>Example：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.context.ApplicationContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.support.FileSystemXmlApplicationContext;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">App</span> &#123;</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="type">ApplicationContext</span> <span class="variable">context</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileSystemXmlApplicationContext</span>(</span><br><span class="line">        <span class="string">&quot;C:/work/IOC Containers/springframework.applicationcontext/src/main/resources/bean-factory-config.xml&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="type">HelloApplicationContext</span> <span class="variable">obj</span> <span class="operator">=</span> (HelloApplicationContext) context.getBean(<span class="string">&quot;helloApplicationContext&quot;</span>);</span><br><span class="line">    obj.getMsg();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="二、单例设计模式"><a href="#二、单例设计模式" class="headerlink" title="二、单例设计模式"></a>二、单例设计模式</h3><p>在我们的系统中，有一些对象其实我们只需要一个，比如说：线程池、缓存、对话框、注册表、日志对象、充当打印机、显卡等设备驱动程序的对象。事实上，这一类对象只能有一个实例，如果制造出多个实例就可能会导致一些问题的产生，比如：程序的行为异常、资源使用过量、或者不一致性的结果。</p><p><strong>使用单例模式的好处</strong> :</p><ul><li>对于频繁使用的对象，可以省略创建对象所花费的时间，这对于那些重量级对象而言，是非常可观的一笔系统开销；</li><li>由于 new 操作的次数减少，因而对系统内存的使用频率也会降低，这将减轻 GC 压力，缩短 GC 停顿时间。</li></ul><p><strong>Spring 中 bean 的默认作用域就是 singleton(单例)的。</strong> 除了 singleton 作用域，Spring 中 bean 还有下面几种作用域：</p><ul><li><strong>prototype</strong> : 每次获取都会创建一个新的 bean 实例。也就是说，连续 <code>getBean()</code> 两次，得到的是不同的 Bean 实例。</li><li><strong>request</strong> （仅 Web 应用可用）: 每一次 HTTP 请求都会产生一个新的 bean（请求 bean），该 bean 仅在当前 HTTP request 内有效。</li><li><strong>session</strong> （仅 Web 应用可用） : 每一次来自新 session 的 HTTP 请求都会产生一个新的 bean（会话 bean），该 bean 仅在当前 HTTP session 内有效。</li><li><strong>application&#x2F;global-session</strong> （仅 Web 应用可用）：每个 Web 应用在启动时创建一个 Bean（应用 Bean），，该 bean 仅在当前应用启动时间内有效。</li><li><strong>websocket</strong> （仅 Web 应用可用）：每一次 WebSocket 会话产生一个新的 bean。</li></ul><p>Spring 通过 <code>ConcurrentHashMap</code> 实现单例注册表的特殊方式实现单例模式。</p><p>Spring 实现单例的核心代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 通过 ConcurrentHashMap（线程安全） 实现单例注册表</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> Map&lt;String, Object&gt; singletonObjects = <span class="keyword">new</span> <span class="title class_">ConcurrentHashMap</span>&lt;String, Object&gt;(<span class="number">64</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> Object <span class="title function_">getSingleton</span><span class="params">(String beanName, ObjectFactory&lt;?&gt; singletonFactory)</span> &#123;</span><br><span class="line">        Assert.notNull(beanName, <span class="string">&quot;&#x27;beanName&#x27; must not be null&quot;</span>);</span><br><span class="line">        <span class="keyword">synchronized</span> (<span class="built_in">this</span>.singletonObjects) &#123;</span><br><span class="line">            <span class="comment">// 检查缓存中是否存在实例</span></span><br><span class="line">            <span class="type">Object</span> <span class="variable">singletonObject</span> <span class="operator">=</span> <span class="built_in">this</span>.singletonObjects.get(beanName);</span><br><span class="line">            <span class="keyword">if</span> (singletonObject == <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="comment">//...省略了很多代码</span></span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    singletonObject = singletonFactory.getObject();</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">//...省略了很多代码</span></span><br><span class="line">                <span class="comment">// 如果实例对象在不存在，我们注册到单例注册表中。</span></span><br><span class="line">                addSingleton(beanName, singletonObject);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> (singletonObject != NULL_OBJECT ? singletonObject : <span class="literal">null</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//将对象添加到单例注册表</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">addSingleton</span><span class="params">(String beanName, Object singletonObject)</span> &#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (<span class="built_in">this</span>.singletonObjects) &#123;</span><br><span class="line">                <span class="built_in">this</span>.singletonObjects.put(beanName, (singletonObject != <span class="literal">null</span> ? singletonObject : NULL_OBJECT));</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="三、代理设计模式"><a href="#三、代理设计模式" class="headerlink" title="三、代理设计模式"></a>三、代理设计模式</h3><h4 id="代理模式在-AOP-中的应用"><a href="#代理模式在-AOP-中的应用" class="headerlink" title="代理模式在 AOP 中的应用"></a>代理模式在 AOP 中的应用</h4><p><strong>AOP(Aspect-Oriented Programming，面向切面编程)</strong> 能够将那些与业务无关，却为业务模块所共同调用的逻辑或责任（例如事务处理、日志管理、权限控制等）封装起来，便于减少系统的重复代码，降低模块间的耦合度，并有利于未来的可拓展性和可维护性。</p><p><strong>Spring AOP 就是基于动态代理的</strong>，如果要代理的对象，实现了某个接口，那么 Spring AOP 会使用 <strong>JDK Proxy</strong> 去创建代理对象，而对于没有实现接口的对象，就无法使用 JDK Proxy 去进行代理了，这时候 Spring AOP 会使用 <strong>Cglib</strong> 生成一个被代理对象的子类来作为代理，如下图所示：<br><img src="https://minio.zhangyl.top/img/2024/20240906223944.png" alt="image.png"></p><p>当然，你也可以使用 AspectJ ,Spring AOP 已经集成了 AspectJ ，AspectJ 应该算的上是 Java 生态系统中最完整的 AOP 框架了。</p><p>使用 AOP 之后我们可以把一些通用功能抽象出来，在需要用到的地方直接使用即可，这样大大简化了代码量。我们需要增加新功能时也方便，这样也提高了系统扩展性。日志功能、事务管理等等场景都用到了 AOP 。</p><h3 id="四、模板方法"><a href="#四、模板方法" class="headerlink" title="四、模板方法"></a>四、模板方法</h3><p>模板方法模式是一种行为设计模式，它定义一个操作中的算法的骨架，而将一些步骤延迟到子类中。 模板方法使得子类可以不改变一个算法的结构即可重定义该算法的某些特定步骤的实现方式。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">Template</span> &#123;</span><br><span class="line">    <span class="comment">//这是我们的模板方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title function_">TemplateMethod</span><span class="params">()</span>&#123;</span><br><span class="line">        PrimitiveOperation1();</span><br><span class="line">        PrimitiveOperation2();</span><br><span class="line">        PrimitiveOperation3();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span>  <span class="title function_">PrimitiveOperation1</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="comment">//当前类实现</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//被子类实现的方法</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">PrimitiveOperation2</span><span class="params">()</span>;</span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">PrimitiveOperation3</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TemplateImpl</span> <span class="keyword">extends</span> <span class="title class_">Template</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">PrimitiveOperation2</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">//当前类实现</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">PrimitiveOperation3</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">//当前类实现</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Spring 中 <code>JdbcTemplate</code>、<code>HibernateTemplate</code> 等以 Template 结尾的对数据库操作的类，它们就使用到了模板模式。一般情况下，我们都是使用继承的方式来实现模板模式，但是 Spring 并没有使用这种方式，而是使用 Callback 模式与模板方法模式配合，既达到了代码复用的效果，同时增加了灵活性。</p><h3 id="五、观察者模式"><a href="#五、观察者模式" class="headerlink" title="五、观察者模式"></a>五、观察者模式</h3><p>观察者模式是一种对象行为型模式。它表示的是一种对象与对象之间具有依赖关系，当一个对象发生改变的时候，依赖这个对象的所有对象也会做出反应。Spring 事件驱动模型就是观察者模式很经典的一个应用。Spring 事件驱动模型非常有用，在很多场景都可以解耦我们的代码。比如我们每次添加商品的时候都需要重新更新商品索引，这个时候就可以利用观察者模式来解决这个问题。</p><h4 id="事件角色"><a href="#事件角色" class="headerlink" title="事件角色"></a><a href="#%E4%BA%8B%E4%BB%B6%E8%A7%92%E8%89%B2">事件角色</a></h4><p><code>ApplicationEvent</code> (<code>org.springframework.context</code>包下)充当事件的角色,这是一个抽象类，它继承了<code>java.util.EventObject</code>并实现了 <code>java.io.Serializable</code>接口。</p><p>Spring 中默认存在以下事件，他们都是对 <code>ApplicationContextEvent</code> 的实现(继承自<code>ApplicationContextEvent</code>)：</p><ul><li><code>ContextStartedEvent</code>：<code>ApplicationContext</code> 启动后触发的事件;</li><li><code>ContextStoppedEvent</code>：<code>ApplicationContext</code> 停止后触发的事件;</li><li><code>ContextRefreshedEvent</code>：<code>ApplicationContext</code> 初始化或刷新完成后触发的事件;</li><li><code>ContextClosedEvent</code>：<code>ApplicationContext</code> 关闭后触发的事件。<br><img src="https://minio.zhangyl.top/img/2024/20240906224146.png" alt="image.png"></li></ul><h3 id="六、适配器模式"><a href="#六、适配器模式" class="headerlink" title="六、适配器模式"></a>六、适配器模式</h3><p>我们知道 Spring AOP 的实现是基于代理模式，但是 Spring AOP 的增强或通知(Advice)使用到了适配器模式，与之相关的接口是<code>AdvisorAdapter</code> 。</p><p>Advice 常用的类型有：<code>BeforeAdvice</code>（目标方法调用前,前置通知）、<code>AfterAdvice</code>（目标方法调用后,后置通知）、<code>AfterReturningAdvice</code>(目标方法执行结束后，return 之前)等等。每个类型 Advice（通知）都有对应的拦截器:<code>MethodBeforeAdviceInterceptor</code>、<code>AfterReturningAdviceInterceptor</code>、<code>ThrowsAdviceInterceptor</code> 等等。</p><p>Spring 预定义的通知要通过对应的适配器，适配成 <code>MethodInterceptor</code> 接口(方法拦截器)类型的对象（如：<code>MethodBeforeAdviceAdapter</code> 通过调用 <code>getInterceptor</code> 方法，将 <code>MethodBeforeAdvice</code> 适配成 <code>MethodBeforeAdviceInterceptor</code> ）。</p><h3 id="七、装饰者模式"><a href="#七、装饰者模式" class="headerlink" title="七、装饰者模式"></a>七、装饰者模式</h3><p>装饰者模式可以动态地给对象添加一些额外的属性或行为。相比于使用继承，装饰者模式更加灵活。简单点儿说就是当我们需要修改原有的功能，但我们又不愿直接去修改原有的代码时，设计一个 Decorator 套在原有代码外面。其实在 JDK 中就有很多地方用到了装饰者模式，比如 <code>InputStream</code>家族，<code>InputStream</code> 类下有 <code>FileInputStream</code> (读取文件)、<code>BufferedInputStream</code> (增加缓存,使读取文件速度大大提升)等子类都在不修改<code>InputStream</code> 代码的情况下扩展了它的功能。</p><p><img src="https://minio.zhangyl.top/img/2024/20240906224317.png" alt="image.png"></p><p>Spring 中配置 DataSource 的时候，DataSource 可能是不同的数据库和数据源。我们能否根据客户的需求在少修改原有类的代码下动态切换不同的数据源？这个时候就要用到装饰者模式(这一点我自己还没太理解具体原理)。Spring 中用到的包装器模式在类名上含有 <code>Wrapper</code>或者 <code>Decorator</code>。这些类基本上都是动态地给一个对象添加一些额外的职责</p><h3 id="八、总结"><a href="#八、总结" class="headerlink" title="八、总结"></a>八、总结</h3><p>Spring 框架中用到了哪些设计模式？</p><ul><li><strong>工厂设计模式</strong> : Spring 使用工厂模式通过 <code>BeanFactory</code>、<code>ApplicationContext</code> 创建 bean 对象。</li><li><strong>代理设计模式</strong> : Spring AOP 功能的实现。</li><li><strong>单例设计模式</strong> : Spring 中的 Bean 默认都是单例的。</li><li><strong>模板方法模式</strong> : Spring 中 <code>jdbcTemplate</code>、<code>hibernateTemplate</code> 等以 Template 结尾的对数据库操作的类，它们就使用到了模板模式。</li><li><strong>包装器设计模式</strong> : 我们的项目需要连接多个数据库，而且不同的客户在每次访问中根据需要会去访问不同的数据库。这种模式让我们可以根据客户的需求能够动态切换不同的数据源。</li><li><strong>观察者模式:</strong> Spring 事件驱动模型就是观察者模式很经典的一个应用。</li><li><strong>适配器模式</strong> :Spring AOP 的增强或通知(Advice)使用到了适配器模式、spring MVC 中也是用到了适配器模式适配<code>Controller</code>。</li></ul><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      
      
      <categories>
          
          <category> spring </category>
          
      </categories>
      
      
        <tags>
            
            <tag> spring </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java 线程池笔记</title>
      <link href="/java-Java-%E7%BA%BF%E7%A8%8B%E6%B1%A0%E7%AC%94%E8%AE%B0/"/>
      <url>/java-Java-%E7%BA%BF%E7%A8%8B%E6%B1%A0%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h3 id="一、线程池介绍"><a href="#一、线程池介绍" class="headerlink" title="一、线程池介绍"></a>一、线程池介绍</h3><p>顾名思义，线程池就是管理一系列线程的资源池，其提供了一种限制和管理线程资源的方式。每个线程池还维护一些基本统计信息，例如已完成任务的数量。</p><p>使用线程池的好处：</p><ul><li><strong>降低资源消耗</strong>。通过重复利用已创建的线程降低线程创建和销毁造成的消耗。</li><li><strong>提高响应速度</strong>。当任务到达时，任务可以不需要等到线程创建就能立即执行。</li><li><strong>提高线程的可管理性</strong>。线程是稀缺资源，如果无限制的创建，不仅会消耗系统资源，还会降低系统的稳定性，使用线程池可以进行统一的分配，调优和监控。</li></ul><h3 id="二、ThreadPoolExecutor-类介绍"><a href="#二、ThreadPoolExecutor-类介绍" class="headerlink" title="二、ThreadPoolExecutor 类介绍"></a>二、ThreadPoolExecutor 类介绍</h3><p><code>ThreadPoolExecutor</code> 类中提供的四个构造方法。我们来看最长的那个，其余三个都是在这个构造方法的基础上产生。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 用给定的初始参数创建一个新的ThreadPoolExecutor。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">ThreadPoolExecutor</span><span class="params">(<span class="type">int</span> corePoolSize,//线程池的核心线程数量</span></span><br><span class="line"><span class="params">                          <span class="type">int</span> maximumPoolSize,//线程池的最大线程数</span></span><br><span class="line"><span class="params">                          <span class="type">long</span> keepAliveTime,//当线程数大于核心线程数时，多余的空闲线程存活的最长时间</span></span><br><span class="line"><span class="params">                          TimeUnit unit,//时间单位</span></span><br><span class="line"><span class="params">                          BlockingQueue&lt;Runnable&gt; workQueue,//任务队列，用来储存等待执行任务的队列</span></span><br><span class="line"><span class="params">                          ThreadFactory threadFactory,//线程工厂，用来创建线程，一般默认即可</span></span><br><span class="line"><span class="params">                          RejectedExecutionHandler handler//拒绝策略，当提交的任务过多而不能及时处理时，我们可以定制策略来处理任务</span></span><br><span class="line"><span class="params">                           )</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (corePoolSize &lt; <span class="number">0</span> ||</span><br><span class="line">        maximumPoolSize &lt;= <span class="number">0</span> ||</span><br><span class="line">        maximumPoolSize &lt; corePoolSize ||</span><br><span class="line">        keepAliveTime &lt; <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>();</span><br><span class="line">    <span class="keyword">if</span> (workQueue == <span class="literal">null</span> || threadFactory == <span class="literal">null</span> || handler == <span class="literal">null</span>)</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">NullPointerException</span>();</span><br><span class="line">    <span class="built_in">this</span>.corePoolSize = corePoolSize;</span><br><span class="line">    <span class="built_in">this</span>.maximumPoolSize = maximumPoolSize;</span><br><span class="line">    <span class="built_in">this</span>.workQueue = workQueue;</span><br><span class="line">    <span class="built_in">this</span>.keepAliveTime = unit.toNanos(keepAliveTime);</span><br><span class="line">    <span class="built_in">this</span>.threadFactory = threadFactory;</span><br><span class="line">    <span class="built_in">this</span>.handler = handler;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>ThreadPoolExecutor</code> 3 个最重要的参数：</p><ul><li><p><code>corePoolSize</code> : 任务队列未达到队列容量时，最大可以同时运行的线程数量。</p></li><li><p><code>maximumPoolSize</code> : 任务队列中存放的任务达到队列容量的时候，当前可以同时运行的线程数量变为最大线程数。</p></li><li><p><code>workQueue</code>: 新任务来的时候会先判断当前运行的线程数量是否达到核心线程数，如果达到的话，新任务就会被存放在队列中。<br><code>ThreadPoolExecutor</code>其他常见参数 :</p></li><li><p><code>keepAliveTime</code>:线程池中的线程数量大于 <code>corePoolSize</code> 的时候，如果这时没有新的任务提交，核心线程外的线程不会立即销毁，而是会等待，直到等待的时间超过了 <code>keepAliveTime</code>才会被回收销毁。</p></li><li><p><code>unit</code> : <code>keepAliveTime</code> 参数的时间单位。</p></li><li><p><code>threadFactory</code> :executor 创建新线程的时候会用到。</p></li><li><p><code>handler</code> :拒绝策略。<br>下面这张图可以加深你对线程池中各个参数的相互关系的理解（图片来源：《Java 性能调优实战》）：<br><img src="https://minio.zhangyl.top/img/2024/20240903232753.png" alt="image.png"></p></li></ul><h3 id="三、线程池创建的两种方式"><a href="#三、线程池创建的两种方式" class="headerlink" title="三、线程池创建的两种方式"></a>三、线程池创建的两种方式</h3><p><strong>方式一：通过<code>ThreadPoolExecutor</code>构造函数来创建（推荐）。</strong><br><img src="https://minio.zhangyl.top/img/2024/20240903232844.png" alt="image.png"><br>通过构造方法实现</p><p><strong>方式二：通过 <code>Executor</code> 框架的工具类 <code>Executors</code> 来创建。</strong><br><code>Executors</code>工具类提供的创建线程池的方法如下图所示：<br><img src="https://minio.zhangyl.top/img/2024/20240903232916.png" alt="image.png"></p><p>阿里巴巴 Java 开发手册》强制线程池不允许使用 <code>Executors</code> 去创建，而是通过 <code>ThreadPoolExecutor</code> 构造函数的方式，这样的处理方式让写的同学更加明确线程池的运行规则，规避资源耗尽的风险。</p><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot 自动装配原理详解</title>
      <link href="/spring-SpringBoot-%E8%87%AA%E5%8A%A8%E8%A3%85%E9%85%8D%E5%8E%9F%E7%90%86%E8%AF%A6%E8%A7%A3/"/>
      <url>/spring-SpringBoot-%E8%87%AA%E5%8A%A8%E8%A3%85%E9%85%8D%E5%8E%9F%E7%90%86%E8%AF%A6%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<p>每次问到 Spring Boot， 面试官非常喜欢问这个问题：“讲述一下 SpringBoot 自动装配原理？”。</p><p>我觉得我们可以从以下几个方面回答：</p><ol><li>什么是 SpringBoot 自动装配？</li><li>SpringBoot 是如何实现自动装配的？如何实现按需加载？</li><li>如何实现一个 Starter？</li></ol><h3 id="一、什么是-SpringBoot-自动装配？"><a href="#一、什么是-SpringBoot-自动装配？" class="headerlink" title="一、什么是 SpringBoot 自动装配？"></a>一、什么是 SpringBoot 自动装配？</h3><p>我们现在提到自动装配的时候，一般会和 Spring Boot 联系在一起。但是，实际上 Spring Framework 早就实现了这个功能。Spring Boot 只是在其基础上，通过 SPI 的方式，做了进一步优化。</p><blockquote><p>SpringBoot 定义了一套接口规范，这套规范规定：SpringBoot 在启动时会扫描外部引用 jar 包中的<code>META-INF/spring.factories</code>文件，将文件中配置的类型信息加载到 Spring 容器（此处涉及到 JVM 类加载机制与 Spring 的容器知识），并执行类中定义的各种操作。对于外部 jar 来说，只需要按照 SpringBoot 定义的标准，就能将自己的功能装置进 SpringBoot。<br>自 Spring Boot 3.0 开始，自动配置包的路径从<code>META-INF/spring.factories</code> 修改为 <code>META-INF/spring/org.springframework.boot.autoconfigure.AutoConfiguration.imports</code>。</p></blockquote><p>没有 Spring Boot 的情况下，如果我们需要引入第三方依赖，需要手动配置，非常麻烦。但是，Spring Boot 中，我们直接引入一个 starter 即可。比如你想要在项目中使用 redis 的话，直接在项目中引入对应的 starter 即可。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-redis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>引入 starter 之后，我们通过少量注解和一些简单的配置就能使用第三方组件提供的功能了。</p><p>在我看来，自动装配可以简单理解为：<strong>通过注解或者一些简单的配置就能在 Spring Boot 的帮助下实现某块功能。</strong></p><h3 id="二、SpringBoot-是如何实现自动装配的？"><a href="#二、SpringBoot-是如何实现自动装配的？" class="headerlink" title="二、SpringBoot 是如何实现自动装配的？"></a>二、SpringBoot 是如何实现自动装配的？</h3><p>我们先看一下 SpringBoot 的核心注解 <code>SpringBootApplication</code> 。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Target(&#123;ElementType.TYPE&#125;)</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="meta">@Inherited</span></span><br><span class="line">&lt;<span class="number">1.</span>&gt;<span class="meta">@SpringBootConfiguration</span></span><br><span class="line">&lt;<span class="number">2.</span>&gt;<span class="meta">@ComponentScan</span></span><br><span class="line">&lt;<span class="number">3.</span>&gt;<span class="meta">@EnableAutoConfiguration</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> SpringBootApplication &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Target(&#123;ElementType.TYPE&#125;)</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="meta">@Configuration</span> <span class="comment">//实际上它也是一个配置类</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> SpringBootConfiguration &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>大概可以把 <code>@SpringBootApplication</code>看作是 <code>@Configuration</code>、<code>@EnableAutoConfiguration</code>、<code>@ComponentScan</code> 注解的集合。根据 SpringBoot 官网，这三个注解的作用分别是：</p><ul><li><code>@EnableAutoConfiguration</code>：启用 SpringBoot 的自动配置机制</li><li><code>@Configuration</code>：允许在上下文中注册额外的 bean 或导入其他配置类</li><li><code>@ComponentScan</code>：扫描被<code>@Component</code> (<code>@Service</code>,<code>@Controller</code>)注解的 bean，注解默认会扫描启动类所在的包下所有的类 ，可以自定义不扫描某些 bean。如下图所示，容器中将排除<code>TypeExcludeFilter</code>和<code>AutoConfigurationExcludeFilter</code>。<br><img src="https://minio.zhangyl.top/img/2024/20240902230034.png" alt="image.png"><br><code>@EnableAutoConfiguration</code> 是实现自动装配的重要注解，我们以这个注解入手。</li></ul><h4 id="EnableAutoConfiguration-实现自动装配的核心注解"><a href="#EnableAutoConfiguration-实现自动装配的核心注解" class="headerlink" title="@EnableAutoConfiguration:实现自动装配的核心注解"></a>@EnableAutoConfiguration:实现自动装配的核心注解</h4><p><code>EnableAutoConfiguration</code> 只是一个简单地注解，自动装配核心功能的实现实际是通过 <code>AutoConfigurationImportSelector</code>类。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Target(&#123;ElementType.TYPE&#125;)</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="meta">@Inherited</span></span><br><span class="line"><span class="meta">@AutoConfigurationPackage</span> <span class="comment">//作用：将main包下的所有组件注册到容器中</span></span><br><span class="line"><span class="meta">@Import(&#123;AutoConfigurationImportSelector.class&#125;)</span> <span class="comment">//加载自动装配类 xxxAutoconfiguration</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> EnableAutoConfiguration &#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">ENABLED_OVERRIDE_PROPERTY</span> <span class="operator">=</span> <span class="string">&quot;spring.boot.enableautoconfiguration&quot;</span>;</span><br><span class="line"></span><br><span class="line">    Class&lt;?&gt;[] exclude() <span class="keyword">default</span> &#123;&#125;;</span><br><span class="line"></span><br><span class="line">    String[] excludeName() <span class="keyword">default</span> &#123;&#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们现在重点分析下<code>AutoConfigurationImportSelector</code> 类到底做了什么？</p><h4 id="AutoConfigurationImportSelector-加载自动装配类"><a href="#AutoConfigurationImportSelector-加载自动装配类" class="headerlink" title="AutoConfigurationImportSelector:加载自动装配类"></a>AutoConfigurationImportSelector:加载自动装配类</h4><p><code>AutoConfigurationImportSelector</code>类的继承体系如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AutoConfigurationImportSelector</span> <span class="keyword">implements</span> <span class="title class_">DeferredImportSelector</span>, BeanClassLoaderAware, ResourceLoaderAware, BeanFactoryAware, EnvironmentAware, Ordered &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">DeferredImportSelector</span> <span class="keyword">extends</span> <span class="title class_">ImportSelector</span> &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">ImportSelector</span> &#123;</span><br><span class="line">    String[] selectImports(AnnotationMetadata var1);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看出，<code>AutoConfigurationImportSelector</code> 类实现了 <code>ImportSelector</code>接口，也就实现了这个接口中的 <code>selectImports</code>方法，该方法主要用于<strong>获取所有符合条件的类的全限定类名，这些类需要被加载到 IoC 容器中</strong>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String[] NO_IMPORTS = <span class="keyword">new</span> <span class="title class_">String</span>[<span class="number">0</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> String[] selectImports(AnnotationMetadata annotationMetadata) &#123;</span><br><span class="line">        <span class="comment">// &lt;1&gt;.判断自动装配开关是否打开</span></span><br><span class="line">        <span class="keyword">if</span> (!<span class="built_in">this</span>.isEnabled(annotationMetadata)) &#123;</span><br><span class="line">            <span class="keyword">return</span> NO_IMPORTS;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          <span class="comment">//&lt;2&gt;.获取所有需要装配的bean</span></span><br><span class="line">            <span class="type">AutoConfigurationMetadata</span> <span class="variable">autoConfigurationMetadata</span> <span class="operator">=</span> AutoConfigurationMetadataLoader.loadMetadata(<span class="built_in">this</span>.beanClassLoader);</span><br><span class="line">            AutoConfigurationImportSelector.<span class="type">AutoConfigurationEntry</span> <span class="variable">autoConfigurationEntry</span> <span class="operator">=</span> <span class="built_in">this</span>.getAutoConfigurationEntry(autoConfigurationMetadata, annotationMetadata);</span><br><span class="line">            <span class="keyword">return</span> StringUtils.toStringArray(autoConfigurationEntry.getConfigurations());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>这里我们需要重点关注一下<code>getAutoConfigurationEntry()</code>方法，这个方法主要负责加载自动配置类的。</p><p>该方法调用链如下：<br><img src="https://minio.zhangyl.top/img/2024/20240902230413.png" alt="image.png"><br>现在我们结合<code>getAutoConfigurationEntry()</code>的源码来详细分析一下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">AutoConfigurationEntry</span> <span class="variable">EMPTY_ENTRY</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AutoConfigurationEntry</span>();</span><br><span class="line"></span><br><span class="line">AutoConfigurationEntry <span class="title function_">getAutoConfigurationEntry</span><span class="params">(AutoConfigurationMetadata autoConfigurationMetadata, AnnotationMetadata annotationMetadata)</span> &#123;</span><br><span class="line">        <span class="comment">//&lt;1&gt;.</span></span><br><span class="line">        <span class="keyword">if</span> (!<span class="built_in">this</span>.isEnabled(annotationMetadata)) &#123;</span><br><span class="line">            <span class="keyword">return</span> EMPTY_ENTRY;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">//&lt;2&gt;.</span></span><br><span class="line">            <span class="type">AnnotationAttributes</span> <span class="variable">attributes</span> <span class="operator">=</span> <span class="built_in">this</span>.getAttributes(annotationMetadata);</span><br><span class="line">            <span class="comment">//&lt;3&gt;.</span></span><br><span class="line">            List&lt;String&gt; configurations = <span class="built_in">this</span>.getCandidateConfigurations(annotationMetadata, attributes);</span><br><span class="line">            <span class="comment">//&lt;4&gt;.</span></span><br><span class="line">            configurations = <span class="built_in">this</span>.removeDuplicates(configurations);</span><br><span class="line">            Set&lt;String&gt; exclusions = <span class="built_in">this</span>.getExclusions(annotationMetadata, attributes);</span><br><span class="line">            <span class="built_in">this</span>.checkExcludedClasses(configurations, exclusions);</span><br><span class="line">            configurations.removeAll(exclusions);</span><br><span class="line">            configurations = <span class="built_in">this</span>.filter(configurations, autoConfigurationMetadata);</span><br><span class="line">            <span class="built_in">this</span>.fireAutoConfigurationImportEvents(configurations, exclusions);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">AutoConfigurationImportSelector</span>.AutoConfigurationEntry(configurations, exclusions);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p><strong>第 1 步</strong>:</p><p>判断自动装配开关是否打开。默认<code>spring.boot.enableautoconfiguration=true</code>，可在 <code>application.properties</code> 或 <code>application.yml</code> 中设置<br><img src="https://minio.zhangyl.top/img/2024/20240902230501.png" alt="image.png"></p><p><strong>第 2 步</strong>：</p><p>用于获取<code>EnableAutoConfiguration</code>注解中的 <code>exclude</code> 和 <code>excludeName</code>。<br><img src="https://minio.zhangyl.top/img/2024/20240902230515.png" alt="image.png"><br><strong>第 3 步</strong></p><p>获取需要自动装配的所有配置类，读取<code>META-INF/spring.factories</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">spring-boot/spring-boot-project/spring-boot-autoconfigure/src/main/resources/META-INF/spring.factories</span><br></pre></td></tr></table></figure><p><img src="https://minio.zhangyl.top/img/2024/20240902230618.png" alt="image.png"><br>从下图可以看到这个文件的配置内容都被我们读取到了。<code>XXXAutoConfiguration</code>的作用就是按需加载组件。<br><img src="https://minio.zhangyl.top/img/2024/20240902230635.png" alt="image.png"><br>不光是这个依赖下的<code>META-INF/spring.factories</code>被读取到，所有 Spring Boot Starter 下的<code>META-INF/spring.factories</code>都会被读取到。</p><p>所以，你可以清楚滴看到， druid 数据库连接池的 Spring Boot Starter 就创建了<code>META-INF/spring.factories</code>文件。</p><p>如果，我们自己要创建一个 Spring Boot Starter，这一步是必不可少的。<br><img src="https://minio.zhangyl.top/img/2024/20240902230655.png" alt="image.png"><br><strong>第 4 步</strong>：</p><p>到这里可能面试官会问你:“<code>spring.factories</code>中这么多配置，每次启动都要全部加载么？”。</p><p>很明显，这是不现实的。我们 debug 到后面你会发现，<code>configurations</code> 的值变小了。</p><p><img src="https://minio.zhangyl.top/img/2024/20240902230724.png" alt="image.png"><br>因为，这一步有经历了一遍筛选，<code>@ConditionalOnXXX</code> 中的所有条件都满足，该类才会生效。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="comment">// 检查相关的类：RabbitTemplate 和 Channel是否存在</span></span><br><span class="line"><span class="comment">// 存在才会加载</span></span><br><span class="line"><span class="meta">@ConditionalOnClass(&#123; RabbitTemplate.class, Channel.class &#125;)</span></span><br><span class="line"><span class="meta">@EnableConfigurationProperties(RabbitProperties.class)</span></span><br><span class="line"><span class="meta">@Import(RabbitAnnotationDrivenConfiguration.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RabbitAutoConfiguration</span> &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="三、如何实现一个-Starter？"><a href="#三、如何实现一个-Starter？" class="headerlink" title="三、如何实现一个 Starter？"></a>三、如何实现一个 Starter？</h3><p>光说不练假把式，现在就来撸一个 starter，实现自定义线程池</p><p>第一步，创建<code>threadpool-spring-boot-starter</code>工程<br><img src="https://minio.zhangyl.top/img/2024/20240902230840.png" alt="image.png"><br>第二步，引入 Spring Boot 相关依赖<br><img src="https://minio.zhangyl.top/img/2024/20240902230850.png" alt="image.png"><br>第三步，创建<code>ThreadPoolAutoConfiguration</code><br><img src="https://minio.zhangyl.top/img/2024/20240902230901.png" alt="image.png"><br>第三步，创建<code>ThreadPoolAutoConfiguration</code><br><img src="https://minio.zhangyl.top/img/2024/20240902230925.png" alt="image.png"><br>第四步，在<code>threadpool-spring-boot-starter</code>工程的 resources 包下创建<code>META-INF/spring.factories</code>文件<br><img src="https://minio.zhangyl.top/img/2024/20240902230934.png" alt="image.png"><br>最后新建工程引入<code>threadpool-spring-boot-starter</code><br><img src="https://minio.zhangyl.top/img/2024/20240902230948.png" alt="image.png"><br>测试通过！！！<br><img src="https://minio.zhangyl.top/img/2024/20240902230959.png" alt="image.png"></p><h3 id="四、总结"><a href="#四、总结" class="headerlink" title="四、总结"></a>四、总结</h3><p>Spring Boot 通过<code>@EnableAutoConfiguration</code>开启自动装配，通过 SpringFactoriesLoader 最终加载<code>META-INF/spring.factories</code>中的自动配置类实现自动装配，自动配置类其实就是通过<code>@Conditional</code>按需加载的配置类，想要其生效必须引入<code>spring-boot-starter-xxx</code>包实现起步依赖。</p><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      
      
      <categories>
          
          <category> spring </category>
          
      </categories>
      
      
        <tags>
            
            <tag> springboot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring 事务详解</title>
      <link href="/spring-Spring-%E4%BA%8B%E5%8A%A1%E8%AF%A6%E8%A7%A3/"/>
      <url>/spring-Spring-%E4%BA%8B%E5%8A%A1%E8%AF%A6%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<h3 id="一、什么是事务？"><a href="#一、什么是事务？" class="headerlink" title="一、什么是事务？"></a>一、什么是事务？</h3><p><strong>事务是逻辑上的一组操作，要么都执行，要么都不执行。</strong></p><p>事务能否生效，数据库引擎是否支持事务是关键。比如常用的 MySQL 数据库默认使用支持事务的 innodb 引擎。但是，如果把数据库引擎变为 myIsam，那么程序也就不再支持事务了。</p><hr><h4 id="事务的特性（ACID）"><a href="#事务的特性（ACID）" class="headerlink" title="事务的特性（ACID）"></a>事务的特性（ACID）</h4><p>1.<strong>原子性</strong>（Atomicity）：事务是最小的执行单位，不允许分割。事务的原子性确保动作要么全部完成，要么完全不起作用。<br>2.<strong>一致性</strong>（Consistency）：执行事务前后，数据保持一致。例如转账业务中，无论事务是否成功，转账者和收款人的总额应该是不变的。<br>3.<strong>隔离性</strong>（Isolation）：并发访问数据库时，一个用户的事务不被其他事务所打扰，各并发事务之间数据库是独立的。<br>4.<strong>持久性</strong>（Durability）：一个事务被提交之后，它对数据库中数据的改变是持久的，即使数据库发生故障也不应该对其有任何影响。</p><p>只有保证了事务的持久性、原子性、隔离性之后，一致性才能得到保障。也就是说A、I、D是手段，C是目的！<br><img src="https://minio.zhangyl.top/img/2024/20240901154119.png" alt="image.png"></p><h4 id="MySQL-是怎么保证原子性的？"><a href="#MySQL-是怎么保证原子性的？" class="headerlink" title="MySQL 是怎么保证原子性的？"></a>MySQL 是怎么保证原子性的？</h4><p>我们知道如果想要保证事务的原子性，就需要在异常发生时，对已经执行的操作进行回滚。在 MySQL 中，恢复机制是通过回滚日志（undo log）实现的，所有事务进行的修改都会先记录到这个回滚日志中，然后再执行相关的操作。如果执行过程中遇到异常的话，我们直接利用回滚日志中的信息就数据回滚到修改之前的样子即可！并且，回滚日志会先于数据库持久化道磁盘上。这样就保证了即使遇到数据库突然宕机等情况，当用户再次启动数据库的时候，数据库还能够通过查询回滚日志来回滚之前未完成的事务。</p><h3 id="二、详谈-Spring-对事务的支持"><a href="#二、详谈-Spring-对事务的支持" class="headerlink" title="二、详谈 Spring 对事务的支持"></a>二、详谈 Spring 对事务的支持</h3><h4 id="2-1-Spring-支持两种方式的事务管理"><a href="#2-1-Spring-支持两种方式的事务管理" class="headerlink" title="2.1 Spring 支持两种方式的事务管理"></a>2.1 Spring 支持两种方式的事务管理</h4><h5 id="编程式事务管理"><a href="#编程式事务管理" class="headerlink" title="编程式事务管理"></a>编程式事务管理</h5><p>通过 TransactionTemplate 或者 TransactionManager 手动管理事务，实际应用中很少使用，但是对于你理解 Spring 事务管理原理有帮助。</p><p>使用TransactionTemplate 进行编程式事务管理的示例代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> TransactionTemplate transactionTemplate;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testTransaction</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">        transactionTemplate.execute(<span class="keyword">new</span> <span class="title class_">TransactionCallbackWithoutResult</span>() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doInTransactionWithoutResult</span><span class="params">(TransactionStatus transactionStatus)</span> &#123;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line"></span><br><span class="line">                    <span class="comment">// ....  业务代码</span></span><br><span class="line">                &#125; <span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">                    <span class="comment">//回滚</span></span><br><span class="line">                    transactionStatus.setRollbackOnly();</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用 TransactionManager 进行编程式事务管理的示例代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> PlatformTransactionManager transactionManager;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testTransaction</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">  <span class="type">TransactionStatus</span> <span class="variable">status</span> <span class="operator">=</span> transactionManager.getTransaction(<span class="keyword">new</span> <span class="title class_">DefaultTransactionDefinition</span>());</span><br><span class="line">          <span class="keyword">try</span> &#123;</span><br><span class="line">               <span class="comment">// ....  业务代码</span></span><br><span class="line">              transactionManager.commit(status);</span><br><span class="line">          &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">              transactionManager.rollback(status);</span><br><span class="line">          &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="声明式事务管理"><a href="#声明式事务管理" class="headerlink" title="声明式事务管理"></a>声明式事务管理</h5><p>推荐使用（代码侵入性最小），实际是通过 AOP 实现（基于 @Transactional 的全注解方式使用最多）。<br>使用 @Transactional 注解进行事务管理的示例代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Transactional(propagation = Propagation.REQUIRED)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> aMethod &#123;</span><br><span class="line">  <span class="comment">//do something</span></span><br><span class="line">  <span class="type">B</span> <span class="variable">b</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">B</span>();</span><br><span class="line">  <span class="type">C</span> <span class="variable">c</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">C</span>();</span><br><span class="line">  b.bMethod();</span><br><span class="line">  c.cMethod();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-2-Spring-事务管理接口介绍"><a href="#2-2-Spring-事务管理接口介绍" class="headerlink" title="2.2 Spring 事务管理接口介绍"></a>2.2 Spring 事务管理接口介绍</h4><p>Spring 框架中，事务管理相关最重要的3个接口如下：</p><ul><li>PlatformTransactionManager：（平台）事务管理器， Spring 事务策略的核心。</li><li>TransactionDefinition：事务定义信息（事务隔离级别、传播行为、超时、只读、回滚原则）。</li><li>TransactionStatus：事务运行状态。</li></ul><p>我们可以把 PlatformTransactionManager 接口看作是事务上层的管理者，而 TransactionDefinition 和 TransactionStatus 这两个接口可以看作是事务的描述。</p><p>PlatformTransactionManager 会根据 TransactionDefinition 的定义（比如事务超时时间、隔离级别、传播行为等）来进行事务管理，而 TransactionStatus 接口则提供了一些方法来获取事务相应的状态（比如是否新事务、是否可以回滚等等）。</p><h5 id="PlatformTransactionManager：事务管理接口"><a href="#PlatformTransactionManager：事务管理接口" class="headerlink" title="PlatformTransactionManager：事务管理接口"></a>PlatformTransactionManager：事务管理接口</h5><p>Spring 并不直接管理事务，而是提供了多种事务管理器。Spring 事务管理器的接口是：PlatformTransactionManager。</p><p>通过这个接口，Spring 为各个平台如：JDBC（DataSourceTransactionManager）、Hibernate（HibernateTransactionManager）、JPA（JpaTransactionManager）等都提供了对应的事务管理器，但是具体的实现就是各个平台自己的事情了。</p><p>PlatformTransactionManager 接口的具体实现如下：<br><img src="https://minio.zhangyl.top/img/2024/20240901161716.png" alt="image.png"></p><p>PlatformTransactionManager 接口中定义了三个方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.springframework.transaction;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.lang.Nullable;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">PlatformTransactionManager</span> &#123;</span><br><span class="line">    <span class="comment">//获得事务</span></span><br><span class="line">    TransactionStatus <span class="title function_">getTransaction</span><span class="params">(<span class="meta">@Nullable</span> TransactionDefinition var1)</span> <span class="keyword">throws</span> TransactionException;</span><br><span class="line">    <span class="comment">//提交事务</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">commit</span><span class="params">(TransactionStatus var1)</span> <span class="keyword">throws</span> TransactionException;</span><br><span class="line">    <span class="comment">//回滚事务</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">rollback</span><span class="params">(TransactionStatus var1)</span> <span class="keyword">throws</span> TransactionException;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="TransactionDefinition：事务属性"><a href="#TransactionDefinition：事务属性" class="headerlink" title="TransactionDefinition：事务属性"></a>TransactionDefinition：事务属性</h5><p>事务管理器接口 PlatformTransactionManager 通过 getTransaction(TransactionDefinition definition) 方法来得到一个事务，这个方法里面的参数是 TransactionDefinition 类，这个类就定义了一些基本的事务属性。</p><p>什么是事务属性呢？事务属性可以理解成事务的一些基本配置，描述了事务策略如何应用到方法上。<br>事务属性包含了5个方面：</p><ul><li>隔离级别</li><li>传播行为</li><li>回滚规则</li><li>是否只读</li><li>事务超时</li></ul><p>TransactionDefinition 接口定义了5个方法以及一些表示事务属性的常量（比如隔离级别、传播行为等）。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.springframework.transaction;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.lang.Nullable;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">TransactionDefinition</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">PROPAGATION_REQUIRED</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> <span class="variable">PROPAGATION_SUPPORTS</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">    <span class="type">int</span> <span class="variable">PROPAGATION_MANDATORY</span> <span class="operator">=</span> <span class="number">2</span>;</span><br><span class="line">    <span class="type">int</span> <span class="variable">PROPAGATION_REQUIRES_NEW</span> <span class="operator">=</span> <span class="number">3</span>;</span><br><span class="line">    <span class="type">int</span> <span class="variable">PROPAGATION_NOT_SUPPORTED</span> <span class="operator">=</span> <span class="number">4</span>;</span><br><span class="line">    <span class="type">int</span> <span class="variable">PROPAGATION_NEVER</span> <span class="operator">=</span> <span class="number">5</span>;</span><br><span class="line">    <span class="type">int</span> <span class="variable">PROPAGATION_NESTED</span> <span class="operator">=</span> <span class="number">6</span>;</span><br><span class="line">    <span class="type">int</span> <span class="variable">ISOLATION_DEFAULT</span> <span class="operator">=</span> -<span class="number">1</span>;</span><br><span class="line">    <span class="type">int</span> <span class="variable">ISOLATION_READ_UNCOMMITTED</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">    <span class="type">int</span> <span class="variable">ISOLATION_READ_COMMITTED</span> <span class="operator">=</span> <span class="number">2</span>;</span><br><span class="line">    <span class="type">int</span> <span class="variable">ISOLATION_REPEATABLE_READ</span> <span class="operator">=</span> <span class="number">4</span>;</span><br><span class="line">    <span class="type">int</span> <span class="variable">ISOLATION_SERIALIZABLE</span> <span class="operator">=</span> <span class="number">8</span>;</span><br><span class="line">    <span class="type">int</span> <span class="variable">TIMEOUT_DEFAULT</span> <span class="operator">=</span> -<span class="number">1</span>;</span><br><span class="line">    <span class="comment">// 返回事务的传播行为，默认值为 REQUIRED。</span></span><br><span class="line">    <span class="type">int</span> <span class="title function_">getPropagationBehavior</span><span class="params">()</span>;</span><br><span class="line">    <span class="comment">//返回事务的隔离级别，默认值是 DEFAULT</span></span><br><span class="line">    <span class="type">int</span> <span class="title function_">getIsolationLevel</span><span class="params">()</span>;</span><br><span class="line">    <span class="comment">// 返回事务的超时时间，默认值为-1。如果超过该时间限制但事务还没有完成，则自动回滚事务。</span></span><br><span class="line">    <span class="type">int</span> <span class="title function_">getTimeout</span><span class="params">()</span>;</span><br><span class="line">    <span class="comment">// 返回是否为只读事务，默认值为 false</span></span><br><span class="line">    <span class="type">boolean</span> <span class="title function_">isReadOnly</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Nullable</span></span><br><span class="line">    String <span class="title function_">getName</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="TransactionStatus：事务状态"><a href="#TransactionStatus：事务状态" class="headerlink" title="TransactionStatus：事务状态"></a>TransactionStatus：事务状态</h5><p>TransactionStatus 接口用来记录事务的状态，该接口定义了一组方法，用来获取或判断事务的相应状态信息。<br>PlatformTransactionManager.getTransaction(…) 方法返回一个 TransactionStatus 对象。<br>TransactionStatus 接口内容如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">TransactionStatus</span>&#123;</span><br><span class="line">    <span class="type">boolean</span> <span class="title function_">isNewTransaction</span><span class="params">()</span>; <span class="comment">// 是否是新的事务</span></span><br><span class="line">    <span class="type">boolean</span> <span class="title function_">hasSavepoint</span><span class="params">()</span>; <span class="comment">// 是否有恢复点</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">setRollbackOnly</span><span class="params">()</span>;  <span class="comment">// 设置为只回滚</span></span><br><span class="line">    <span class="type">boolean</span> <span class="title function_">isRollbackOnly</span><span class="params">()</span>; <span class="comment">// 是否为只回滚</span></span><br><span class="line">    <span class="type">boolean</span> isCompleted; <span class="comment">// 是否已完成</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-3-事务属性详解"><a href="#2-3-事务属性详解" class="headerlink" title="2.3 事务属性详解"></a>2.3 事务属性详解</h4><h5 id="事务传播行为"><a href="#事务传播行为" class="headerlink" title="事务传播行为"></a>事务传播行为</h5><p>事务传播行为是为了解决业务层方法之间相互调用的事务问题。</p><p>当事务方法被另一个事务方法调用时，必须指定事务应该如何传播。例如：方法可能继续在现有事务中运行，也可能开启一个新事务，并在自己的事务中运行。</p><p>举个例子：我们在 A 类的 aMethod() 方法中调用了 B 类的 bMethod() 方法。这个时候就涉及到业务层方法之间互相调用的事务问题。如果我们的 bMethod() 方法发生异常需要回滚，如何配置事务传播行为才能让 aMethod() 方法也跟着回滚呢？</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line">Class A &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    B b;</span><br><span class="line">    <span class="meta">@Transactional(propagation = Propagation.xxx)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> aMethod &#123;</span><br><span class="line">        <span class="comment">//do something</span></span><br><span class="line">        b.bMethod();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line">Class B &#123;</span><br><span class="line">    <span class="meta">@Transactional(propagation = Propagation.xxx)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> bMethod &#123;</span><br><span class="line">       <span class="comment">//do something</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>TransactionDefinition 定义了如下几个表示传播行为的常量：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">TransactionDefinition</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">PROPAGATION_REQUIRED</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> <span class="variable">PROPAGATION_SUPPORTS</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">    <span class="type">int</span> <span class="variable">PROPAGATION_MANDATORY</span> <span class="operator">=</span> <span class="number">2</span>;</span><br><span class="line">    <span class="type">int</span> <span class="variable">PROPAGATION_REQUIRES_NEW</span> <span class="operator">=</span> <span class="number">3</span>;</span><br><span class="line">    <span class="type">int</span> <span class="variable">PROPAGATION_NOT_SUPPORTED</span> <span class="operator">=</span> <span class="number">4</span>;</span><br><span class="line">    <span class="type">int</span> <span class="variable">PROPAGATION_NEVER</span> <span class="operator">=</span> <span class="number">5</span>;</span><br><span class="line">    <span class="type">int</span> <span class="variable">PROPAGATION_NESTED</span> <span class="operator">=</span> <span class="number">6</span>;</span><br><span class="line">    ......</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>不过，为了方便使用，Spring 相应地定义了一个枚举类：Propagation</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.springframework.transaction.annotation;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.transaction.TransactionDefinition;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> <span class="title class_">Propagation</span> &#123;</span><br><span class="line"></span><br><span class="line">    REQUIRED(TransactionDefinition.PROPAGATION_REQUIRED),</span><br><span class="line"></span><br><span class="line">    SUPPORTS(TransactionDefinition.PROPAGATION_SUPPORTS),</span><br><span class="line"></span><br><span class="line">    MANDATORY(TransactionDefinition.PROPAGATION_MANDATORY),</span><br><span class="line"></span><br><span class="line">    REQUIRES_NEW(TransactionDefinition.PROPAGATION_REQUIRES_NEW),</span><br><span class="line"></span><br><span class="line">    NOT_SUPPORTED(TransactionDefinition.PROPAGATION_NOT_SUPPORTED),</span><br><span class="line"></span><br><span class="line">    NEVER(TransactionDefinition.PROPAGATION_NEVER),</span><br><span class="line"></span><br><span class="line">    NESTED(TransactionDefinition.PROPAGATION_NESTED);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">int</span> value;</span><br><span class="line"></span><br><span class="line">    Propagation(<span class="type">int</span> value) &#123;</span><br><span class="line">        <span class="built_in">this</span>.value = value;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">value</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.value;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>正确的事务传播行为可能的值如下：</p><ol><li><strong>TransactionDefinition.PROPAGATION_REQUIRED</strong><br>使用的最多的一个事务传播行为，我们平时经常使用的 @Transactional 注解默认使用就是这个事务传播行为。如果当前存在事务，则加入该事务；如果当前没有事务，则创建一个事务。也就是说：</li></ol><ul><li>如果外部方法没有开启事务的话， Propagation.REQUIRED 修饰的内部方法会新开启自己的事务，且开启的事务相互独立，互不打扰。</li><li>如果外部方法开启事务并且被 Propagation.REQUIRED 的话，所有 Propagation.REQUIRED 修饰的内部方法和外部方法均属于同一事务，只要有一个方法回滚，整个事务均回滚。</li></ul><p>举个例子：如果我们上面的 aMethod() 和bMethod() 使用的都是 PROPAGATION_REQUIRED 传播行为的话，两者使用的就是同一个事务，只要有一个方法回滚，整个事务均回滚。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line">Class A &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    B b;</span><br><span class="line">    <span class="meta">@Transactional(propagation = Propagation.REQUIRED)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> aMethod &#123;</span><br><span class="line">        <span class="comment">//do something</span></span><br><span class="line">        b.bMethod();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line">Class B &#123;</span><br><span class="line">    <span class="meta">@Transactional(propagation = Propagation.REQUIRED)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> bMethod &#123;</span><br><span class="line">       <span class="comment">//do something</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li><strong>TransactionDefinition.PROPAGATION_REQUIRES_NEW</strong><br>创建一个新的事务，如果当前存在事务，则把当前事务挂起。也就是说不管外部方法是否开启事务，Propagation.REQUIRES_NEW 修饰的内部方法会新开启自己的事务，且开启的事务相互独立，互不打扰。</li></ol><p>举个例子：如果我们上面的 bMethod() 使用 PROPAGATION_REQUIRES_NEW 事务传播行为修饰，aMethod() 还是用 PROPAGATION_REQUIRED 修饰的话。如果 aMethod() 发生异常回滚，bMethod()不会跟着回滚，因为 bMethod() 开启了独立的事务。但是，如果 bMethod() 抛出了未被捕获的异常并且这个异常满足事务回滚规则的话，aMethod() 同样也会回滚，因为这个异常被 aMethod() 的事务管理机制检测到了。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line">Class A &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    B b;</span><br><span class="line">    <span class="meta">@Transactional(propagation = Propagation.REQUIRED)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> aMethod &#123;</span><br><span class="line">        <span class="comment">//do something</span></span><br><span class="line">        b.bMethod();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line">Class B &#123;</span><br><span class="line">    <span class="meta">@Transactional(propagation = Propagation.REQUIRES_NEW)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> bMethod &#123;</span><br><span class="line">       <span class="comment">//do something</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ol start="3"><li><strong>TransactionDefinition.PROPAGATION_NESTED</strong><br>如果当前存在事务，就在嵌套事务内执行；如果当前没有事务，就执行与 TransactionDefinition.PROPAGATION_REQUIRED 类似的操作。也就是说：</li></ol><ul><li>在外部方法开启事务的情况下，在内部开启一个新的事务，作为嵌套事务存在。</li><li>如果外部方法无事务，则单独开启一个事务，与 TransactionDefinition.PROPAGATION_REQUIRED类似。<br>这里还是举个简单例子：如果 bMethod() 回滚的话，aMethod() 不会回滚。如果 aMethod() 回滚的话，bMethod() 会回滚。<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line">Class A &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    B b;</span><br><span class="line">    <span class="meta">@Transactional(propagation = Propagation.REQUIRED)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> aMethod &#123;</span><br><span class="line">        <span class="comment">//do something</span></span><br><span class="line">        b.bMethod();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line">Class B &#123;</span><br><span class="line">    <span class="meta">@Transactional(propagation = Propagation.NESTED)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> bMethod &#123;</span><br><span class="line">       <span class="comment">//do something</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><ol start="4"><li><strong>TransactionDefinition.PROPAGATION_MANDATORY</strong><br>如果当前存在事务，则加入该事务；如果当前没有事务，则抛出异常。（mandatory：强制性）<br>这个使用的很少，就不举例子来说了。</li></ol><p>若是错误的配置以下3种事务传播行为，事务将不会发生回滚，这里就不对照案例讲解了，使用的很少。</p><ul><li><strong>TransactionDefinition.PROPAGATION_SUPPORTS</strong> ：如果当前存在事务，则加入该事务；如果当前没有事务，则以非事务的方式继续运行。</li><li><strong>TransactionDefinition.PROPAGATION_NOT_SUPPORTED</strong> ：以非事务方式运行，如果当前存在事务，则把当前事务挂起。</li><li><strong>TransactionDefinition.PROPAGATION_NEVER</strong> ：以非事务方式运行，如果当前存在事务，则抛出异常。</li></ul><h5 id="事务隔离级别"><a href="#事务隔离级别" class="headerlink" title="事务隔离级别"></a>事务隔离级别</h5><p>TransactionDefinition 接口中定义了五个表示隔离级别的常量：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">TransactionDefinition</span> &#123;</span><br><span class="line">    ......</span><br><span class="line">    <span class="type">int</span> <span class="variable">ISOLATION_DEFAULT</span> <span class="operator">=</span> -<span class="number">1</span>;</span><br><span class="line">    <span class="type">int</span> <span class="variable">ISOLATION_READ_UNCOMMITTED</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">    <span class="type">int</span> <span class="variable">ISOLATION_READ_COMMITTED</span> <span class="operator">=</span> <span class="number">2</span>;</span><br><span class="line">    <span class="type">int</span> <span class="variable">ISOLATION_REPEATABLE_READ</span> <span class="operator">=</span> <span class="number">4</span>;</span><br><span class="line">    <span class="type">int</span> <span class="variable">ISOLATION_SERIALIZABLE</span> <span class="operator">=</span> <span class="number">8</span>;</span><br><span class="line">    ......</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>和事务传播行为一样，为了方便使用，Spring 也相应地定义了一个枚举类：Isolation</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> <span class="title class_">Isolation</span> &#123;</span><br><span class="line"></span><br><span class="line">  DEFAULT(TransactionDefinition.ISOLATION_DEFAULT),</span><br><span class="line"></span><br><span class="line">  READ_UNCOMMITTED(TransactionDefinition.ISOLATION_READ_UNCOMMITTED),</span><br><span class="line"></span><br><span class="line">  READ_COMMITTED(TransactionDefinition.ISOLATION_READ_COMMITTED),</span><br><span class="line"></span><br><span class="line">  REPEATABLE_READ(TransactionDefinition.ISOLATION_REPEATABLE_READ),</span><br><span class="line"></span><br><span class="line">  SERIALIZABLE(TransactionDefinition.ISOLATION_SERIALIZABLE);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">int</span> value;</span><br><span class="line"></span><br><span class="line">  Isolation(<span class="type">int</span> value) &#123;</span><br><span class="line">    <span class="built_in">this</span>.value = value;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">value</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.value;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>下面我依次对每一种事务隔离级别进行介绍：</p><ul><li><strong>TransactionDefinition.ISOLATION_DEFAULT</strong>：使用后段数据库默认的隔离级别，MySQL 默认采用 REPEATABLE_READ 隔离级别，Oracle 默认采用的是 READ_COMMITTED 隔离级别。</li><li><strong>TransactionDefinition.ISOLATION_READ_UNCOMMITTED</strong>：最低的隔离级别，使用这个隔离级别的很少，因为它允许读取尚未提交的数据变更，可能会导致脏读、幻读或不可重复度。</li><li><strong>TransactionDefinition.ISOLATION_READ_COMMITTED</strong>：允许读取并发事务已经提交的数据，可以阻止脏读，但是幻读或不可重复读仍有可能发生。</li><li><strong>TransactionDefinition.ISOLATION_REPEATABLE_READ</strong>：对同一字段的多次读取结果都是一致的，除非数据是被本身事务自己所修改，可以阻止脏读和不可重复读，但幻读仍有可能发生。</li><li><strong>TransactionDefinition.ISOLATION_SERIALIZABLE</strong>：最高的隔离级别，完全服从 ACID 的隔离级别。所有的事务依次逐个执行，这样事务之间就完全不可能产生干扰。也就是说，该级别可以防止脏读、不可重复读以及幻读。但是这将严重影响程序的性能，通常情况下也不会用到该级别。</li></ul><h5 id="事务超时属性"><a href="#事务超时属性" class="headerlink" title="事务超时属性"></a>事务超时属性</h5><p>所谓事务超时，就是指一个事务所允许执行的最长时间，如果超过该时间限制但事务还没有完成，则自动回滚事务。在 TransactionDefinition 中以 int 的值来表示超时时间，其单位是秒，默认值为 -1，这表示事务的超时时间取决于底层事务系统或者没有超时时间。</p><h5 id="事务只读属性"><a href="#事务只读属性" class="headerlink" title="事务只读属性"></a>事务只读属性</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.springframework.transaction;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.lang.Nullable;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">TransactionDefinition</span> &#123;</span><br><span class="line">    ......</span><br><span class="line">    <span class="comment">// 返回是否为只读事务，默认值为 false</span></span><br><span class="line">    <span class="type">boolean</span> <span class="title function_">isReadOnly</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>对于只有读取数据查询的事务，可以指定事务类型为 readonly，即只读事务。只读事务不涉及数据的修改，数据库会提供一些优化手段，适合用在有多条数据库查询操作的方法中。</p><h5 id="事务回滚规则"><a href="#事务回滚规则" class="headerlink" title="事务回滚规则"></a>事务回滚规则</h5><p>这些规则定义了哪些异常会导致事务回滚而哪些不会。默认情况下，事务只有遇到运行期异常（RuntimeException 的子类）时才会回滚，Error 也会导致事务回滚，但是，在遇到检查型（Checked）异常时不会回滚。<br><img src="https://minio.zhangyl.top/img/2024/20240901173245.png" alt="image.png"></p><p>如果你想要回滚你定义的特定的异常类型的话，可以这样：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Transactional(rollbackFor= MyException.class)</span></span><br></pre></td></tr></table></figure><h5 id="Transactional-事务注解原理"><a href="#Transactional-事务注解原理" class="headerlink" title="@Transactional 事务注解原理"></a>@Transactional 事务注解原理</h5><p>我们知道，@Transactional 的工作机制是基于 AOP 实现的，AOP 又是使用动态代理实现的。如果目标对象实现了接口，默认情况下会采用 JDK 的动态代理，如果目标对象没有实现接口，会使用 Cglib 动态代理。</p><p>createAopProxy() 方法决定了是使用 JDK 还是 Cglib 来做动态代理，源码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DefaultAopProxyFactory</span> <span class="keyword">implements</span> <span class="title class_">AopProxyFactory</span>, Serializable &#123;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="keyword">public</span> AopProxy <span class="title function_">createAopProxy</span><span class="params">(AdvisedSupport config)</span> <span class="keyword">throws</span> AopConfigException </span><br><span class="line">    <span class="title function_">if</span> <span class="params">(config.isOptimize()</span> || config.isProxyTargetClass() || hasNoUserSuppliedProxyInterfaces(config)) &#123;</span><br><span class="line">      Class&lt;?&gt; targetClass = config.getTargetClass();</span><br><span class="line">      <span class="keyword">if</span> (targetClass == <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">AopConfigException</span>(<span class="string">&quot;TargetSource cannot determine target class: &quot;</span> +</span><br><span class="line">            <span class="string">&quot;Either an interface or a target is required for proxy creation.&quot;</span>);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span> (targetClass.isInterface() || Proxy.isProxyClass(targetClass)) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">JdkDynamicAopProxy</span>(config);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ObjenesisCglibAopProxy</span>(config);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">JdkDynamicAopProxy</span>(config);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  .......</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果一个类或者一个类中的 public 方法上被标注 @Transactional 注解的话，Spring 容器就会在启动的时候为其创建一个代理类，在调用被 @Transactional 注解的 public 方法的时候，实际调用的是，TransactionInterceptor 类中的 invoke() 方法，这个方法的作用就是在目标方法之前开启事务，方法执行过程中如果遇到异常的时候回滚事务，方法调用完成之后提交事务。</p><h5 id="Spring-AOP-自调用问题"><a href="#Spring-AOP-自调用问题" class="headerlink" title="Spring AOP 自调用问题"></a>Spring AOP 自调用问题</h5><p>当一个方法被标记了 @Transactional 注解的时候，Spring 事务管理器只会在被其他类方法调用的时候生效，而不会在一个类中方法调用生效。</p><p>这是因为 Spring AOP 工作原理决定的。因为 Spring AOP 使用动态代理来实现事务的管理，它会在运行的时候为带有 @Transactional 注解的方法生成代理对象，并在方法调用的前后应用事务逻辑。如果该方法被其他类调用，我们的代理对象就会拦截方法调用并处理事务。但是在一个类中的其他方法内部调用的时候，我们的代理对象就无法拦截到这个内部调用，因此事务也就失效了。</p><p><code>MyService</code> 类中的<code>method1()</code>调用<code>method2()</code>就会导致<code>method2()</code>的事务失效。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyService</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">method1</span><span class="params">()</span> &#123;</span><br><span class="line">     method2();</span><br><span class="line">     <span class="comment">//......</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Transactional</span></span><br><span class="line"> <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">method2</span><span class="params">()</span> &#123;</span><br><span class="line">     <span class="comment">//......</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>解决办法就是避免同一类中自调用或者使用 AspectJ 取代 Spring AOP 代理。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyService</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">method1</span><span class="params">()</span> &#123;</span><br><span class="line">     ((MyService)AopContext.currentProxy()).method2(); <span class="comment">// 先获取该类的代理对象，然后通过代理对象调用method2。</span></span><br><span class="line">     <span class="comment">//......</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Transactional</span></span><br><span class="line"> <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">method2</span><span class="params">()</span> &#123;</span><br><span class="line">     <span class="comment">//......</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面的代码确实可以在自调用的时候开启事务，但是这是因为使用了 AopContext.currentProxy() 方法来获取当前类的代理对象，然后通过代理对象调用 method2()。这样就相当于从外部调用了 method2()，所以事务注解才会生效。</p><h5 id="Transactional-的使用注意事项总结"><a href="#Transactional-的使用注意事项总结" class="headerlink" title="@Transactional 的使用注意事项总结"></a>@Transactional 的使用注意事项总结</h5><ul><li>@Transactional 注解只有作用到 public 方法上事务才生效，不推荐在接口上使用；</li><li>避免同一个类中调用 @Transactional 注解的方法，这样会导致事务失效；</li><li>正确的设置 @Transactional 的 rollbackFor 和 propagation 属性，否则事务可能会回滚失败;</li><li>被 @Transactional 注解的方法所在的类必须被 Spring 管理，否则不生效；</li><li>底层使用的数据库必须支持事务机制，否则不生效。</li></ul><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><ul><li>Spring 事务详解：<a href="https://javaguide.cn/system-design/framework/spring/spring-transaction.html#transactional-%E6%B3%A8%E8%A7%A3%E4%BD%BF%E7%94%A8%E8%AF%A6%E8%A7%A3">https://javaguide.cn/system-design/framework/spring/spring-transaction.html#transactional-%E6%B3%A8%E8%A7%A3%E4%BD%BF%E7%94%A8%E8%AF%A6%E8%A7%A3</a></li></ul><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      
      
      <categories>
          
          <category> spring </category>
          
      </categories>
      
      
        <tags>
            
            <tag> spring </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java基础面试题</title>
      <link href="/%E9%9D%A2%E8%AF%95-Java%E5%9F%BA%E7%A1%80%E9%9D%A2%E8%AF%95%E9%A2%98/"/>
      <url>/%E9%9D%A2%E8%AF%95-Java%E5%9F%BA%E7%A1%80%E9%9D%A2%E8%AF%95%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<h3 id="一、数据类型"><a href="#一、数据类型" class="headerlink" title="一、数据类型"></a>一、数据类型</h3><h4 id="Java-中有哪8种基本数据类型？它们的默认值和占用的空间大小是多少？说说这8种基本数据类型对应的包装类型。"><a href="#Java-中有哪8种基本数据类型？它们的默认值和占用的空间大小是多少？说说这8种基本数据类型对应的包装类型。" class="headerlink" title="Java 中有哪8种基本数据类型？它们的默认值和占用的空间大小是多少？说说这8种基本数据类型对应的包装类型。"></a>Java 中有哪8种基本数据类型？它们的默认值和占用的空间大小是多少？说说这8种基本数据类型对应的包装类型。</h4><div class="spoiler collapsed">    <div class="spoiler-title">        Answer    </div>    <div class="spoiler-content">        <p>1️⃣ Java 中有8种基本数据类型，分别为：</p><ul><li>6种数字类型：byte、short、int、long、float、double</li><li>1种字符类型：char</li><li>1种布尔型：boolean</li></ul>    </div></div><h4 id="包装类型的常量池技术是什么？"><a href="#包装类型的常量池技术是什么？" class="headerlink" title="包装类型的常量池技术是什么？"></a>包装类型的常量池技术是什么？</h4><div class="spoiler collapsed">    <div class="spoiler-title">        Answer    </div>    <div class="spoiler-content">        <p>Java 基本类型的包装类型的大部分（Byte，Short，Integer，Long，Character，Boolean）都实现了常量池技术。</p>    </div></div><h4 id="为什么要有包装类型？"><a href="#为什么要有包装类型？" class="headerlink" title="为什么要有包装类型？"></a>为什么要有包装类型？</h4><div class="spoiler collapsed">    <div class="spoiler-title">        Answer    </div>    <div class="spoiler-content">        <p>基本类型有默认值、范型参数不能是基本类型</p>    </div></div><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      
      
      <categories>
          
          <category> 面试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 面试 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring相关面试题</title>
      <link href="/%E9%9D%A2%E8%AF%95-Spring%E7%9B%B8%E5%85%B3%E9%9D%A2%E8%AF%95%E9%A2%98/"/>
      <url>/%E9%9D%A2%E8%AF%95-Spring%E7%9B%B8%E5%85%B3%E9%9D%A2%E8%AF%95%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<h4 id="1-什么是-Spring-Bean？作用域有哪些？"><a href="#1-什么是-Spring-Bean？作用域有哪些？" class="headerlink" title="1.什么是 Spring Bean？作用域有哪些？"></a>1.什么是 Spring Bean？作用域有哪些？</h4><div class="spoiler collapsed">    <div class="spoiler-title">        Answer    </div>    <div class="spoiler-content">        <p>Bean 代指的就是那些被 IoC 容器所管理的对象。<br>Bean 的作用域通常有下面几种：</p><table><thead><tr><th>作用域</th><th>描述</th></tr></thead><tbody><tr><td><code>singleton</code></td><td>容器中唯一的 Bean 实例（默认）。</td></tr><tr><td><code>prototype</code></td><td>每次获取都会创建新实例。</td></tr><tr><td><code>request</code></td><td>每次 HTTP 请求创建新实例（仅 Web 应用）。</td></tr><tr><td><code>session</code></td><td>每次 HTTP Session 创建新实例（仅 Web 应用）。</td></tr><tr><td><code>application/global-session</code></td><td>每个 Web 应用启动时创建一个实例（仅 Web 应用）。</td></tr><tr><td><code>websocket</code></td><td>每次 WebSocket 会话创建新实例（仅 Web 应用）。</td></tr></tbody></table><p><code>singleton</code>（最常用，默认的作用域）和<code>prototype</code>这两个作用域是相对用的多点的，其他的基本不会用到。</p>    </div></div><h4 id="2-谈谈你对-Spring-IoC-的理解"><a href="#2-谈谈你对-Spring-IoC-的理解" class="headerlink" title="2.谈谈你对 Spring IoC 的理解"></a>2.谈谈你对 Spring IoC 的理解</h4><div class="spoiler collapsed">    <div class="spoiler-title">        Answer    </div>    <div class="spoiler-content">        <p>① IoC(Inversion of Control，控制反转)是一种设计思想，而非具体的技术实现。<br>② IoC的核心在于“控制反转”，即将对象的创建和管理权从应用程序代码中转移到外部容器(如 Spring IoC 容器)中，这样应用程序只需关注业务逻辑，而无需关心对象的创建和管理。<br>③ IoC 使得对象之间的耦合度降低。</p>    </div></div><h4 id="3-IoC-和-DI-有区别吗？"><a href="#3-IoC-和-DI-有区别吗？" class="headerlink" title="3.IoC 和 DI 有区别吗？"></a>3.IoC 和 DI 有区别吗？</h4><div class="spoiler collapsed">    <div class="spoiler-title">        Answer    </div>    <div class="spoiler-content">        <p>IoC最常见以及最合理的实现方式叫做依赖注入(Dependency Injection，简称 DI)。DI 通过将对象的依赖关系注入到对象内部来实现控制反转。<br>换句话说，DI 是一种实现 IoC 的技术，它通过构造函数注入、setter方法注入或字段注入等方式，将所需的依赖对象传递给需要它们的组件。</p>    </div></div><h4 id="4-Bean-是线程安全的吗？"><a href="#4-Bean-是线程安全的吗？" class="headerlink" title="4.Bean 是线程安全的吗？"></a>4.Bean 是线程安全的吗？</h4><div class="spoiler collapsed">    <div class="spoiler-title">        Answer    </div>    <div class="spoiler-content">        <p>在 Spring 中，默认的 Singleton Bean 不是线程安全的。这是因为单例模式下，所有线程共享同一个 Bean 实例。如果 Bean 有可变状态，就需要自行管理线程安全。</p><ul><li>无状态 Bean（如大部分 Service、Dao）通常是线程安全的。</li><li>有状态 Bean 需要通过同步机制、ThreadLocal 等方式来确保线程安全。</li></ul>    </div></div><h4 id="5-Spring-Bean-的生命周期说一下"><a href="#5-Spring-Bean-的生命周期说一下" class="headerlink" title="5.Spring Bean 的生命周期说一下"></a>5.Spring Bean 的生命周期说一下</h4><div class="spoiler collapsed">    <div class="spoiler-title">        Answer    </div>    <div class="spoiler-content">        <p>① 整体上可以简单分为四步：实例化 –&gt; 属性赋值 –&gt;  初始化 –&gt; 销毁。<br>② 初始化这一步涉及到的步骤比较多，包含 Aware 接口的依赖注入、BeanPostProcessor 在初始化前后的处理以及 InitializingBean 和 init-method 的初始化步骤。<br>③ 销毁这一步会注册相关销毁回调接口，最后通过 DisposableBean 和 destroy-method 进行销毁。<br><img src="https://minio.zhangyl.top/img/2024/202408221945494.png" alt="image.png"></p>    </div></div><h4 id="6-BeanDefinition-的作用？其中的懒加载是什么？"><a href="#6-BeanDefinition-的作用？其中的懒加载是什么？" class="headerlink" title="6. BeanDefinition 的作用？其中的懒加载是什么？"></a>6. BeanDefinition 的作用？其中的懒加载是什么？</h4><div class="spoiler collapsed">    <div class="spoiler-title">        Answer    </div>    <div class="spoiler-content">        <ul><li>BeanDefinition 是 Spring 框架中用于描述和封装一个 Bean 的元信息的重要概念。它包含了 Spring 容器在创建 Bean 实例时所需要的全部信息。</li><li>一个 Bean 所创建过程中所需要的一些信息都可以从 BeanDefinition 中获取，比如这个 Bean 的 Class 类型、作用域、懒加载（Lazy Initialization）等等。其中，懒加载决定该 Bean 是否应当延迟加载。如果设置为懒加载，则该Bean 只有在第一次被请求时才会实例化，而不是在容器启动时立即创建。</li></ul>    </div></div><h4 id="7-注入-Bean-的方式有哪些？你的项目是构造函数注入还是-Setter-注入？"><a href="#7-注入-Bean-的方式有哪些？你的项目是构造函数注入还是-Setter-注入？" class="headerlink" title="7.注入 Bean 的方式有哪些？你的项目是构造函数注入还是 Setter 注入？"></a>7.注入 Bean 的方式有哪些？你的项目是构造函数注入还是 Setter 注入？</h4><div class="spoiler collapsed">    <div class="spoiler-title">        Answer    </div>    <div class="spoiler-content">        <p>1️⃣ 依赖注入（Dependency Injection，DI）的常见方式：</p><ul><li>构造函数注入：通过类的构造函数来注入依赖项。</li><li>Setter 注入：通过类的 Setter 方法来注入依赖项。</li><li>Field（字段）注入：直接在类的字段上使用注解（如 @Autowired 或 @Resource）来注入依赖项。</li></ul><p>2️⃣ Spring 官方推荐构造函数注入，这种注入方式的优势如下：</p><ul><li>依赖完整性：确保所有必需依赖在对象创建时就注入，避免了空指针异常的风险。</li><li>不可变性：有助于创建不可变对象，提高了线程安全性。</li><li>初始化保证：组件在使用前已完全初始化，减少了潜在的错误。</li><li>测试便利性：在单元测试中，可以直接通过构造函数传入模拟的依赖项，而不必依赖 Spring 容器进行注入。</li></ul>    </div></div><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      
      
      <categories>
          
          <category> 面试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 面试 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vmware下虚拟机linux，用户登录时候提示鉴定故障解决方法</title>
      <link href="/%E5%B7%A5%E5%85%B7-vmware%E4%B8%8B%E8%99%9A%E6%8B%9F%E6%9C%BAlinux%EF%BC%8C%E7%94%A8%E6%88%B7%E7%99%BB%E5%BD%95%E6%97%B6%E5%80%99%E6%8F%90%E7%A4%BA%E9%89%B4%E5%AE%9A%E6%95%85%E9%9A%9C%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95/"/>
      <url>/%E5%B7%A5%E5%85%B7-vmware%E4%B8%8B%E8%99%9A%E6%8B%9F%E6%9C%BAlinux%EF%BC%8C%E7%94%A8%E6%88%B7%E7%99%BB%E5%BD%95%E6%97%B6%E5%80%99%E6%8F%90%E7%A4%BA%E9%89%B4%E5%AE%9A%E6%95%85%E9%9A%9C%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h3 id="一、参考文章"><a href="#一、参考文章" class="headerlink" title="一、参考文章"></a>一、参考文章</h3><p>我参考的是这篇文章：<a href="https://blog.csdn.net/only_a_Heroic_car/article/details/119113789">https://blog.csdn.net/only_a_Heroic_car/article/details/119113789</a><br>不过我跟他不同的是，我用的VMware ESXI，而且我的操作系统是Oracle Linux。不过操作步骤大同小异，我用他的方法确实解决了问题。</p><h3 id="二、具体步骤"><a href="#二、具体步骤" class="headerlink" title="二、具体步骤"></a>二、具体步骤</h3><h4 id="2-1-重启系统，在开机界面提示三秒内输入时候，按-“e”，进入如下界面："><a href="#2-1-重启系统，在开机界面提示三秒内输入时候，按-“e”，进入如下界面：" class="headerlink" title="2.1 重启系统，在开机界面提示三秒内输入时候，按 “e”，进入如下界面："></a>2.1 重启系统，在开机界面提示三秒内输入时候，按 “e”，进入如下界面：</h4><p><img src="https://minio.zhangyl.top/img/2024/202408131624686.png" alt="image.png"></p><h4 id="2-2-继续按“e”-进入如下界面：并选择第二项："><a href="#2-2-继续按“e”-进入如下界面：并选择第二项：" class="headerlink" title="2.2 继续按“e”,进入如下界面：并选择第二项："></a>2.2 继续按“e”,进入如下界面：并选择第二项：</h4><p><img src="https://minio.zhangyl.top/img/2024/202408131625671.png" alt="image.png"></p><h4 id="2-3-接着按“e”到下面界面："><a href="#2-3-接着按“e”到下面界面：" class="headerlink" title="2.3 接着按“e”到下面界面："></a>2.3 接着按“e”到下面界面：</h4><p><img src="https://minio.zhangyl.top/img/2024/202408131625437.png" alt="image.png"></p><h4 id="2-4-在-rhgb-quiet-后-空格-然后输入-1-如图"><a href="#2-4-在-rhgb-quiet-后-空格-然后输入-1-如图" class="headerlink" title="2.4 在 rhgb quiet 后 空格 然后输入 1 如图"></a>2.4 在 rhgb quiet 后 空格 然后输入 1 如图</h4><p><img src="https://minio.zhangyl.top/img/2024/202408131625598.png" alt="image.png"></p><h4 id="2-5-按回车键，回到这个界面："><a href="#2-5-按回车键，回到这个界面：" class="headerlink" title="2.5 按回车键，回到这个界面："></a>2.5 按回车键，回到这个界面：</h4><p><img src="https://minio.zhangyl.top/img/2024/202408131626609.png" alt="image.png"></p><h4 id="2-6-然后按”b“启动，会出现下面的界面，输入命令重置登录账户的密码，并重启系统。"><a href="#2-6-然后按”b“启动，会出现下面的界面，输入命令重置登录账户的密码，并重启系统。" class="headerlink" title="2.6 然后按”b“启动，会出现下面的界面，输入命令重置登录账户的密码，并重启系统。"></a>2.6 然后按”b“启动，会出现下面的界面，输入命令重置登录账户的密码，并重启系统。</h4><p><strong>passwd root&#x2F;other—登录账户</strong><br>注意：init 6<br><img src="https://minio.zhangyl.top/img/2024/202408131626153.png" alt="image.png"></p><h4 id="2-7-完成！"><a href="#2-7-完成！" class="headerlink" title="2.7 完成！"></a>2.7 完成！</h4><p>这个方法真的很好的解决了我的问题，让我的虚拟机能够恢复正常。</p><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      
      
      <categories>
          
          <category> 工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>day-14-count(*)这么慢，我该怎么办</title>
      <link href="/MySQL%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-day-14-count%E8%BF%99%E4%B9%88%E6%85%A2%EF%BC%8C%E6%88%91%E8%AF%A5%E6%80%8E%E4%B9%88%E5%8A%9E/"/>
      <url>/MySQL%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-day-14-count%E8%BF%99%E4%B9%88%E6%85%A2%EF%BC%8C%E6%88%91%E8%AF%A5%E6%80%8E%E4%B9%88%E5%8A%9E/</url>
      
        <content type="html"><![CDATA[<h3 id="一、count-的实现方式"><a href="#一、count-的实现方式" class="headerlink" title="一、count( * ) 的实现方式"></a>一、count( * ) 的实现方式</h3><ul><li>MyISAM 引擎把一个表的总行数存在了磁盘上，因此执行 count( * ) 的时候会直接返回这个数，效率很高；</li><li>而 InnoDB 引擎就麻烦了，它执行 count( * ) 的时候，需要把数据一行一行地从引擎里面读出来，然后累积计数。<br> InnoDB 的默认隔离级别是可重复度。<br>InnoDB 是索引组织表，主键索引树的叶子节点是数据，而普通索引树的叶子节点是主键值。</li></ul><p>在保证逻辑正确的前提下，尽量减少扫描的数据量，是数据库系统设计的通用法则之一。</p><ul><li>MyISAM 表虽然 count( * ) 很快，但是不支持事务；</li><li>show table status 命令虽然返回很快，但是不准确；</li><li>InnoDB 表直接 count( * ) 会遍历全表，虽然结果准确，但会导致性能问题。</li></ul><h3 id="二、不同的-count-用法"><a href="#二、不同的-count-用法" class="headerlink" title="二、不同的 count 用法"></a>二、不同的 count 用法</h3><p> count() 的语义：count() 是一个聚合函数，对于返回的结果集，一行行地判断，如果 count 函数的参数不是 NULL，累计值就加 1，否则不加。最后返回累计值。</p><p>分析性能差别的时候要注意的几个原则：<br>1.server 层要什么就给什么；<br>2.InnoDB 只给必要的值；<br>3.现在的优化器只优化了 count( * ) 的语义为“取行数”，其他“显而易见”的优化并没有做。</p><p>对于 count(主键 id) 来说，InnoDB 引擎会遍历整张表，把每一行的 id 值都取出来，返回给 server 层。server 层拿到 id 后，判断是不可能为空的，就按行累加。</p><p>对于 count(1) 来说，InnoDB 引擎遍历整张表，但不取值。server 层对于返回的每一行，放一个数字“1”进去，判断是不可能为空的，按行累加。</p><p>count(1) 执行得要比 count(主键 id) 快。因为从引擎返回 id 会涉及到解析数据行，以及拷贝字段值的操作。</p><p>对于 count(字段) 来说：<br>1.如果这个“字段”是定义为 not null 的话，一行行地从记录里面读出这个字段，判断不能为 null，按行累加；<br>2.如果这个“字段”定义允许为 null，那么执行的时候，判断到有可能是 null，还要把值取出来再判断一下，不是 null 才累加。</p><p>结论是：按照效率排序的话，count(字段)&lt;count(主键 id)&lt;count(1)≈count( * )，所以建议尽量使用 count( * )。</p><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      
      
      <categories>
          
          <category> MySQL学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>day-13-为什么表数据删掉一半，表文件大小不变</title>
      <link href="/MySQL%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-day-13-%E4%B8%BA%E4%BB%80%E4%B9%88%E8%A1%A8%E6%95%B0%E6%8D%AE%E5%88%A0%E6%8E%89%E4%B8%80%E5%8D%8A%EF%BC%8C%E8%A1%A8%E6%96%87%E4%BB%B6%E5%A4%A7%E5%B0%8F%E4%B8%8D%E5%8F%98/"/>
      <url>/MySQL%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-day-13-%E4%B8%BA%E4%BB%80%E4%B9%88%E8%A1%A8%E6%95%B0%E6%8D%AE%E5%88%A0%E6%8E%89%E4%B8%80%E5%8D%8A%EF%BC%8C%E8%A1%A8%E6%96%87%E4%BB%B6%E5%A4%A7%E5%B0%8F%E4%B8%8D%E5%8F%98/</url>
      
        <content type="html"><![CDATA[<h3 id="一、数据删除流程"><a href="#一、数据删除流程" class="headerlink" title="一、数据删除流程"></a>一、数据删除流程</h3><p>数据页的复用跟记录的复用是不同的。<br>记录的复用，只限于符合范围条件的数据。<br>而当整个页从 B+ 树里面摘掉以后，可以复用到任何位置。</p><p>如果相邻的两个数据页利用率都很小，系统就会把这两个页上的数据合到其中一个页上，另外一个数据页就被标记为可复用。</p><p>delete 命令其实只是把记录的位置，或者数据页标记为了“可复用”，但磁盘文件的大小是不会变的。</p><p>不止是删除数据会造成空洞，插入数据也会。</p><h3 id="二、重建表"><a href="#二、重建表" class="headerlink" title="二、重建表"></a>二、重建表</h3><p>MySQL 5.6 版本开始引入的 Online DDL</p><h4 id="Online-和-inplace"><a href="#Online-和-inplace" class="headerlink" title="Online 和 inplace"></a>Online 和 inplace</h4><p>DDL 过程如果是 Online 的，就一定是 inplace 的；<br>反过来未必，也就是说 inplace 的 DDL，有可能不是 Online 的。</p><h3 id="三、小结"><a href="#三、小结" class="headerlink" title="三、小结"></a>三、小结</h3><p>如果要收缩一个表，只是 delete 掉表里面不用的数据的话，表文件的大小是不会变的，还要通过 alter table 命令重建表，才能达到表文件变小的目的。重建表有两种实现方式，Online DDL 的方式是可以考虑在业务低峰期使用的，而 MySQL 5.5 及之前的版本，这个命令是会阻塞 DML 的，这个需要特别小心。</p><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      
      
      <categories>
          
          <category> MySQL学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>day-12-为什么我的MySQL会“抖”一下？</title>
      <link href="/MySQL%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-day-12-%E4%B8%BA%E4%BB%80%E4%B9%88%E6%88%91%E7%9A%84MySQL%E4%BC%9A%E2%80%9C%E6%8A%96%E2%80%9D%E4%B8%80%E4%B8%8B%EF%BC%9F/"/>
      <url>/MySQL%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-day-12-%E4%B8%BA%E4%BB%80%E4%B9%88%E6%88%91%E7%9A%84MySQL%E4%BC%9A%E2%80%9C%E6%8A%96%E2%80%9D%E4%B8%80%E4%B8%8B%EF%BC%9F/</url>
      
        <content type="html"><![CDATA[<ul><li>脏页：内存数据页跟磁盘数据页内容不一致。</li><li>干净页：内存数据写入到磁盘后，内存和磁盘上的数据页的内容一致。</li></ul><h3 id="一、什么情况会引发数据库的-flush-过程"><a href="#一、什么情况会引发数据库的-flush-过程" class="headerlink" title="一、什么情况会引发数据库的 flush 过程"></a>一、什么情况会引发数据库的 flush 过程</h3><ul><li>InnoDB 的 redo log 写满了。</li><li>系统内存不足。</li><li>MySQL 认为系统“空闲”的时候。</li><li>MySQL 正常关闭的情况。</li></ul><p>InnoDB 的策略是尽量使用内存，因此对于一个长时间运行的库来说，未被使用的页面很少。</p><p>影响性能的两种情况：</p><ul><li>一个查询要淘汰的脏页个数太多，会导致查询的响应时间明显变长；</li><li>日志写满，更新全部堵住，写性能跌为 0，这种情况对敏感业务来说，是不能接受的。</li></ul><h3 id="二、InnoDB-刷脏页的控制策略"><a href="#二、InnoDB-刷脏页的控制策略" class="headerlink" title="二、InnoDB 刷脏页的控制策略"></a>二、InnoDB 刷脏页的控制策略</h3><p>合理地设置 innodb_io_capacity 的值，并且平时要多关注脏页比例，不要让它经常接近 75%。</p><h3 id="三、小结"><a href="#三、小结" class="headerlink" title="三、小结"></a>三、小结</h3><p>利用 WAL 技术，数据库将随机写转换成了顺序写，大大提升了数据库的性能。</p><p>脏页会被后台线程自动 flush，也会由于数据页淘汰而触发 flush，而刷脏页的过程由于会占用资源，可能会让你的更新和查询语句的响应时间长一些。</p><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      
      
      <categories>
          
          <category> MySQL学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>day-11-怎么给字符串字段加索引</title>
      <link href="/MySQL%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-day-11-%E6%80%8E%E4%B9%88%E7%BB%99%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%AD%97%E6%AE%B5%E5%8A%A0%E7%B4%A2%E5%BC%95/"/>
      <url>/MySQL%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-day-11-%E6%80%8E%E4%B9%88%E7%BB%99%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%AD%97%E6%AE%B5%E5%8A%A0%E7%B4%A2%E5%BC%95/</url>
      
        <content type="html"><![CDATA[<p>使用前缀索引，定义好长度，就可以做到既节省空间，又不用额外增加太多的查询成本。</p><h3 id="一、前缀索引对覆盖索引的影响"><a href="#一、前缀索引对覆盖索引的影响" class="headerlink" title="一、前缀索引对覆盖索引的影响"></a>一、前缀索引对覆盖索引的影响</h3><p>使用前缀索引可能会增加扫描行数，这会影响到性能。</p><p>使用前缀索引就用不上覆盖索引对查询性能的优化了，这也是你在选择是否使用前缀索引时需要考虑的一个因素。</p><h3 id="二、其他方式"><a href="#二、其他方式" class="headerlink" title="二、其他方式"></a>二、其他方式</h3><p>索引选取的越长，占用的磁盘空间就越大，相同的数据页能放下的索引值就越少，搜索的效率也就会越低。</p><ul><li>使用倒序存储</li><li>使用 hash 字段</li></ul><p>使用倒序存储和使用 hash 字段这两种方法的异同点。<br>相同点：都不支持范围查询。<br>区别：</p><ul><li>1.从占用的额外空间来看，倒序存储方式在主键索引上，不会消耗额外的存储空间，而 hash 字段方法需要增加一个字段。</li><li>2.在 CPU 消耗方面，倒序方式每次写和读的时候，都需要额外调用一次 reverse 函数，而 hash 字段的方式需要额外调用一次 crc32() 函数。</li><li>3.从查询效率上看，使用 hash 字段方式的查询性能相对更稳定一些。</li></ul><h3 id="三、小结"><a href="#三、小结" class="headerlink" title="三、小结"></a>三、小结</h3><p>字符串字段创建索引的方式：</p><ul><li>1.直接创建完整索引，这样可能比较占用空间；</li><li>2.创建前缀索引，节省空间，但会增加查询扫描次数，并且不能使用覆盖索引；</li><li>3.倒序存储，再创建前缀索引，用于绕过字符串本身前缀的区分度不够的问题；</li><li>4.创建 hash 字段索引，查询性能稳定，有额外的存储和计算消耗，跟第三种方式一样，都不支持范围扫描。</li></ul><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      
      
      <categories>
          
          <category> MySQL学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>day-14-二分查找（下）</title>
      <link href="/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-day-14-%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE%EF%BC%88%E4%B8%8B%EF%BC%89/"/>
      <url>/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-day-14-%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE%EF%BC%88%E4%B8%8B%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h3 id="一、二分查找的变形问题"><a href="#一、二分查找的变形问题" class="headerlink" title="一、二分查找的变形问题"></a>一、二分查找的变形问题</h3><p><img src="https://minio.zhangyl.top/img/2024/20240726224834.png" alt="image.png"></p><h4 id="变体一：查找第一个值等于给定值的元素"><a href="#变体一：查找第一个值等于给定值的元素" class="headerlink" title="变体一：查找第一个值等于给定值的元素"></a>变体一：查找第一个值等于给定值的元素</h4><p>对于我们做工程开发的人来说，代码易读懂、没 Bug，其实更重要。</p><h4 id="变体二：查找最后一个值等于给定值的元素"><a href="#变体二：查找最后一个值等于给定值的元素" class="headerlink" title="变体二：查找最后一个值等于给定值的元素"></a>变体二：查找最后一个值等于给定值的元素</h4><h4 id="变体三：查找第一个大于等于给定值的元素"><a href="#变体三：查找第一个大于等于给定值的元素" class="headerlink" title="变体三：查找第一个大于等于给定值的元素"></a>变体三：查找第一个大于等于给定值的元素</h4><h4 id="变体四：查找最后一个小于等于给定值的元素"><a href="#变体四：查找最后一个小于等于给定值的元素" class="headerlink" title="变体四：查找最后一个小于等于给定值的元素"></a>变体四：查找最后一个小于等于给定值的元素</h4><h3 id="二、小结"><a href="#二、小结" class="headerlink" title="二、小结"></a>二、小结</h3><p>变体的二分查找算法写起来非常烧脑，很容易因为细节处理不好而产生 Bug，这些容易出错的细节有：终止条件、区间上下界更新方法、返回值选择。</p><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      
      
      <categories>
          
          <category> 数据结构与算法学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构与算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>day-10-MySQL为什么有时候会选错索引</title>
      <link href="/MySQL%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-day-10-MySQL%E4%B8%BA%E4%BB%80%E4%B9%88%E6%9C%89%E6%97%B6%E5%80%99%E4%BC%9A%E9%80%89%E9%94%99%E7%B4%A2%E5%BC%95/"/>
      <url>/MySQL%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-day-10-MySQL%E4%B8%BA%E4%BB%80%E4%B9%88%E6%9C%89%E6%97%B6%E5%80%99%E4%BC%9A%E9%80%89%E9%94%99%E7%B4%A2%E5%BC%95/</url>
      
        <content type="html"><![CDATA[<h3 id="一、优化器的逻辑"><a href="#一、优化器的逻辑" class="headerlink" title="一、优化器的逻辑"></a>一、优化器的逻辑</h3><p>选择索引是优化器的工作。</p><p>优化器选择索引的目的，是找到一个最优的执行方案，并用最小的代价去执行语句。在数据库里面，扫描行数是影响执行代价的因素之一。扫描的行数越少，意味着访问磁盘数据的次数越少，消耗的 CPU 资源越少。</p><p>扫描行数并不是唯一的判断标准，优化器还会结合是否使用临时表、是否排序等因素进行综合判断。</p><h3 id="二、索引选择异常和处理"><a href="#二、索引选择异常和处理" class="headerlink" title="二、索引选择异常和处理"></a>二、索引选择异常和处理</h3><p>大多数时候优化器都能找到正确的索引，但偶尔还是会碰到这两种情况：原本可以执行得很快的 SQL 语句，执行速度却比你预期的慢很多，你应该怎么办呢？</p><h4 id="2-1-采用-force-index-强行选择一个索引。"><a href="#2-1-采用-force-index-强行选择一个索引。" class="headerlink" title="2.1 采用 force index 强行选择一个索引。"></a>2.1 采用 force index 强行选择一个索引。</h4><h4 id="2-2-可以考虑修改语句，引导-MySQL-使用我们期望的索引。"><a href="#2-2-可以考虑修改语句，引导-MySQL-使用我们期望的索引。" class="headerlink" title="2.2 可以考虑修改语句，引导 MySQL 使用我们期望的索引。"></a>2.2 可以考虑修改语句，引导 MySQL 使用我们期望的索引。</h4><h4 id="2-3-可以新建一个更合适的索引，来提供给优化器做选择，或删掉误用的索引。"><a href="#2-3-可以新建一个更合适的索引，来提供给优化器做选择，或删掉误用的索引。" class="headerlink" title="2.3 可以新建一个更合适的索引，来提供给优化器做选择，或删掉误用的索引。"></a>2.3 可以新建一个更合适的索引，来提供给优化器做选择，或删掉误用的索引。</h4><h3 id="三、小结"><a href="#三、小结" class="headerlink" title="三、小结"></a>三、小结</h3><p>对于由于索引统计信息不准确导致的问题，可以用 analyze table 来解决。</p><p>而对于其他优化器误判的情况，可以在应用端用 force index 来强行指定索引，也可以通过修改语句来引导优化器，还可以通过增加或者删除索引来绕过这个问题。</p><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      
      
      <categories>
          
          <category> MySQL学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>day-9-普通索引和唯一索引</title>
      <link href="/MySQL%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-day-9-%E6%99%AE%E9%80%9A%E7%B4%A2%E5%BC%95%E5%92%8C%E5%94%AF%E4%B8%80%E7%B4%A2%E5%BC%95/"/>
      <url>/MySQL%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-day-9-%E6%99%AE%E9%80%9A%E7%B4%A2%E5%BC%95%E5%92%8C%E5%94%AF%E4%B8%80%E7%B4%A2%E5%BC%95/</url>
      
        <content type="html"><![CDATA[<h3 id="一、查询过程"><a href="#一、查询过程" class="headerlink" title="一、查询过程"></a>一、查询过程</h3><ul><li>对于普通索引来说，查找到满足条件的第一个记录后，需要查找下一个记录，直到碰到第一个不满足条件的记录。</li><li>对于唯一索引来说，由于索引定义了唯一性，查找到第一个满足条件的记录后，就会停止继续检索。</li></ul><h3 id="二、更新过程"><a href="#二、更新过程" class="headerlink" title="二、更新过程"></a>二、更新过程</h3><p>当需要更新一个数据页时，如果数据页在内存中就直接更新，而如果这个数据页还没有在内存中的话，在不影响数据一致性的前提下，InnoDB 会将这些更新操作缓存在 change buffer 中，这样就不需要从磁盘中读入这个数据页了。在下次查询需要访问这个数据页的时候，将数据页读入内存，然后执行 change buffer 中与这个页有关的操作。通过这种方式就能保证这个数据逻辑的正确性。</p><h3 id="三、change-buffer-的使用场景"><a href="#三、change-buffer-的使用场景" class="headerlink" title="三、change buffer 的使用场景"></a>三、change buffer 的使用场景</h3><p>change buffer 只限于用在普通索引的场景下，而不适用于唯一索引。</p><p>对于写多读少的业务来说，页面在写完以后马上被访问到的概率比较小，此时 change buffer 的使用效果最好。这种业务模型常见的就是账单类、日志类的系统。</p><h3 id="四、索引选择与实践"><a href="#四、索引选择与实践" class="headerlink" title="四、索引选择与实践"></a>四、索引选择与实践</h3><p>这两类索引在查询能力上是没差别的，主要考虑的是对更新性能的影响。所以，建议尽量选择普通索引。</p><h3 id="五、change-buffer-和-redo-log"><a href="#五、change-buffer-和-redo-log" class="headerlink" title="五、change buffer 和 redo log"></a>五、change buffer 和 redo log</h3><p>redo log 主要节省的是随机写磁盘的 IO 消耗（转成顺序写），<br>而 change buffer 主要节省的则是随机读磁盘的 IO 消耗。</p><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      
      
      <categories>
          
          <category> MySQL学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>day-13-二分查找（上）</title>
      <link href="/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-day-13-%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE%EF%BC%88%E4%B8%8A%EF%BC%89/"/>
      <url>/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-day-13-%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE%EF%BC%88%E4%B8%8A%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h3 id="一、二分思想"><a href="#一、二分思想" class="headerlink" title="一、二分思想"></a>一、二分思想</h3><p>二分查找针对的是一个有序的数据集合，查找思想有点类似分治思想。每次都通过跟区间的中间元素对比，将待查找的区间缩小为之前的一半，直到找到要查找的元素，或者区间被缩小为 0。</p><h3 id="二、二分查找的实现"><a href="#二、二分查找的实现" class="headerlink" title="二、二分查找的实现"></a>二、二分查找的实现</h3><p>容易出错的3个地方：</p><ul><li><ol><li>循环退出条件</li></ol></li><li>2.中数的取值</li><li>3.低位和高位的更新</li></ul><h3 id="三、二分查找的局限性"><a href="#三、二分查找的局限性" class="headerlink" title="三、二分查找的局限性"></a>三、二分查找的局限性</h3><h5 id="首先，二分查找依赖的是顺序表结构，简单点说就是数组。"><a href="#首先，二分查找依赖的是顺序表结构，简单点说就是数组。" class="headerlink" title="首先，二分查找依赖的是顺序表结构，简单点说就是数组。"></a>首先，二分查找依赖的是顺序表结构，简单点说就是数组。</h5><p>二分查找只能用在数据是通过顺序表来存储的数据结构上。如果你的数据是通过其他数据结构存储的，则无法应用二分查找。</p><h5 id="其次，二分查找针对的是有序数据。"><a href="#其次，二分查找针对的是有序数据。" class="headerlink" title="其次，二分查找针对的是有序数据。"></a>其次，二分查找针对的是有序数据。</h5><p>二分查找只能用在插入、删除操作不频繁，一次排序多次查找的场景中。针对动态变化的数据集合，二分查找将不再适用。</p><h5 id="再次，数据量太小不适合二分查找。"><a href="#再次，数据量太小不适合二分查找。" class="headerlink" title="再次，数据量太小不适合二分查找。"></a>再次，数据量太小不适合二分查找。</h5><p>如果要处理的数据量很小，完全没有必要用二分查找，顺序遍历就足够了。</p><h5 id="最后，数据量太大也不适合二分查找。"><a href="#最后，数据量太大也不适合二分查找。" class="headerlink" title="最后，数据量太大也不适合二分查找。"></a>最后，数据量太大也不适合二分查找。</h5><p>二分查找的底层需要依赖数组这种数据结构，而数组为了支持随机访问的特性，要求内存空间连续，对内存的要求比较苛刻。</p><h3 id="四、小结"><a href="#四、小结" class="headerlink" title="四、小结"></a>四、小结</h3><p>二分查找的核心思想理解起来非常简单，有点类似分治思想。即每次都通过跟区间中的中间元素对比，将待查找的区间缩小为一半，直到找到要查找的元素，或者区间被缩小为 0。但是二分查找的代码实现比较容易写错。你需要着重掌握它的三个容易出错的地方：循环退出条件、mid 的取值，low 和 high 的更新。</p><p>二分查找虽然性能比较优秀，但应用场景也比较有限。底层必须依赖数组，并且还要求数据是有序的。对于较小规模的数据查找，我们直接使用顺序遍历就可以了，二分查找的优势并不明显。二分查找更适合处理静态数据，也就是没有频繁的数据插入、删除操作。</p><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      
      
      <categories>
          
          <category> 数据结构与算法学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构与算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>day-8-事务</title>
      <link href="/MySQL%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-day-8-%E4%BA%8B%E5%8A%A1/"/>
      <url>/MySQL%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-day-8-%E4%BA%8B%E5%8A%A1/</url>
      
        <content type="html"><![CDATA[<h3 id="一、视图"><a href="#一、视图" class="headerlink" title="一、视图"></a>一、视图</h3><p>在 MySQL 里，有两个“视图”的概念：</p><ul><li>一个是 view。它是一个用查询语句定义的虚拟表，在调用的时候执行查询语句并生成结果。创建视图的语法是 create view … ，而它的查询方法与表一样。</li><li>另一个是 InnoDB 在实现 MVCC 时用到的一致性读视图，即 consistent read view，用于支持 RC（Read Committed，读提交）和 RR（Repeatable Read，可重复读）隔离级别的实现。</li></ul><p>一个数据版本，对于一个事务视图来说，除了自己的更新总是可见以外，有三种情况：</p><ul><li>版本未提交，不可见；</li><li>版本已提交，但是是在视图创建后提交的，不可见；</li><li>版本已提交，而且是在视图创建前提交的，可见。</li></ul><h3 id="二、更新逻辑"><a href="#二、更新逻辑" class="headerlink" title="二、更新逻辑"></a>二、更新逻辑</h3><p>更新数据都是先读后写的，而这个读，只能读当前的值，称为“当前读”（current read）。</p><h4 id="事务的可重复读的能力是怎么实现的？"><a href="#事务的可重复读的能力是怎么实现的？" class="headerlink" title="事务的可重复读的能力是怎么实现的？"></a>事务的可重复读的能力是怎么实现的？</h4><p>可重复读的核心就是一致性读（consistent read）；而事务更新数据的时候，只能用当前读。如果当前的记录的行锁被其他事务占用的话，就需要进入锁等待。</p><h3 id="三、小结"><a href="#三、小结" class="headerlink" title="三、小结"></a>三、小结</h3><p>InnoDB 的行数据有多个版本，每个数据版本有自己的 row trx_id，每个事务或者语句有自己的一致性视图。普通查询语句是一致性读，一致性读会根据 row trx_id 和一致性视图确定数据版本的可见性。</p><ul><li>对于可重复读，查询只承认在事务启动前就已经提交完成的数据；</li><li>对于读提交，查询只承认在语句启动前就已经提交完成的数据；</li></ul><p>而当前读，总是读取已经提交完成的最新版本。</p><p>为什么表结构不支持“可重复读”？这是因为表结构没有对应的行数据，也没有 row trx_id，因此只能遵循当前读的逻辑。</p><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      
      
      <categories>
          
          <category> MySQL学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>day-12-排序优化</title>
      <link href="/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-day-12-%E6%8E%92%E5%BA%8F%E4%BC%98%E5%8C%96/"/>
      <url>/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-day-12-%E6%8E%92%E5%BA%8F%E4%BC%98%E5%8C%96/</url>
      
        <content type="html"><![CDATA[<h3 id="一、如何选择合适的排序算法"><a href="#一、如何选择合适的排序算法" class="headerlink" title="一、如何选择合适的排序算法"></a>一、如何选择合适的排序算法</h3><p><img src="https://minio.zhangyl.top/img/2024/20240723213636.png" alt="image.png"></p><p>如果对小规模数据进行排序，可以选择时间复杂度是 O(n2) 的算法；如果对大规模数据进行排序，时间复杂度是 O(nlogn) 的算法更加高效。所以，为了兼顾任意规模数据的排序，一般都会首选时间复杂度是 O(nlogn) 的排序算法来实现排序函数。</p><p>O(n2) 时间复杂度出现的主要原因还是因为我们分区点选得不够合理。</p><p>最理想的分区点是：被分区点分开的两个分区中，数据的数量差不多。</p><h4 id="1-1-三数取中法"><a href="#1-1-三数取中法" class="headerlink" title="1.1 三数取中法"></a>1.1 三数取中法</h4><p>我们从区间的首、尾、中间，分别取出一个数，然后对比大小，取这 3 个数的中间值作为分区点。这样每间隔某个固定的长度，取数据出来比较，将中间值作为分区点的分区算法，肯定要比单纯取某一个数据更好。</p><h4 id="1-2-随机法"><a href="#1-2-随机法" class="headerlink" title="1.2 随机法"></a>1.2 随机法</h4><p>随机法就是每次从要排序的区间中，随机选择一个元素作为分区点。这种方法并不能保证每次分区点都选的比较好，但是从概率的角度来看，也不大可能会出现每次分区点都选得很差的情况，所以平均情况下，这样选的分区点是比较好的。</p><h3 id="二、小结"><a href="#二、小结" class="headerlink" title="二、小结"></a>二、小结</h3><p>我们大部分排序函数都是采用 O(nlogn) 排序算法来实现，但是为了尽可能地提高性能，会做很多优化。</p><p>快速排序的一些优化策略，比如合理选择分区点、避免递归太深等等。</p><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      
      
      <categories>
          
          <category> 数据结构与算法学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构与算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>day-7-行锁</title>
      <link href="/MySQL%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-day-7-%E8%A1%8C%E9%94%81/"/>
      <url>/MySQL%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-day-7-%E8%A1%8C%E9%94%81/</url>
      
        <content type="html"><![CDATA[<blockquote><p>行锁就是针对数据表中行记录的锁。</p></blockquote><h3 id="一、两阶段锁"><a href="#一、两阶段锁" class="headerlink" title="一、两阶段锁"></a>一、两阶段锁</h3><p>在 InnoDB 事务中，行锁是在需要的时候才加上的，但并不是不需要了就立刻释放，而是要等到事务结束时才释放。这个就是两阶段锁协议。</p><p>如果你的事务中需要锁多个行，要把最可能造成锁冲突、最可能影响并发度的锁尽量往后放。</p><h3 id="二、死锁和死锁检测"><a href="#二、死锁和死锁检测" class="headerlink" title="二、死锁和死锁检测"></a>二、死锁和死锁检测</h3><p>当并发系统中不同线程出现循环资源依赖，涉及的线程都在等待别的线程释放资源时，就会导致这几个线程都进入无限等待的状态，称为死锁。</p><p>当出现死锁以后，有两种策略：</p><ul><li>一种策略是，直接进入等待，直到超时。</li><li>另一种策略是，发起死锁检测，发现死锁后，主动回滚死锁链条中的某一个事务，让其他事务得以继续执行。</li></ul><h3 id="三、小结"><a href="#三、小结" class="headerlink" title="三、小结"></a>三、小结</h3><p>如果你的事务中需要锁多个行，要把最可能造成锁冲突、最可能影响并发度的锁的申请时机尽量往后放。</p><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      
      
      <categories>
          
          <category> MySQL学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>day-6-全局锁和表锁</title>
      <link href="/MySQL%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-day-6-%E5%85%A8%E5%B1%80%E9%94%81%E5%92%8C%E8%A1%A8%E9%94%81/"/>
      <url>/MySQL%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-day-6-%E5%85%A8%E5%B1%80%E9%94%81%E5%92%8C%E8%A1%A8%E9%94%81/</url>
      
        <content type="html"><![CDATA[<blockquote><p>数据库锁设计的初衷是处理并发问题。作为多用户共享的资源，当出现并发访问的时候，数据库需要合理地控制资源的访问规则。而锁就是用来实现这些访问规则的重要数据结构。</p></blockquote><h3 id="一、全局锁"><a href="#一、全局锁" class="headerlink" title="一、全局锁"></a>一、全局锁</h3><p>全局锁就是对整个数据库实例加锁。</p><p>全局锁的典型使用场景是，做全库逻辑备份。</p><p>业务的更新不只是增删改数据（DML)，还有可能是加字段等修改表结构的操作（DDL）。</p><h3 id="二、表级锁"><a href="#二、表级锁" class="headerlink" title="二、表级锁"></a>二、表级锁</h3><p>MySQL 里面表级别的锁有两种：一种是表锁，一种是元数据锁（meta data lock，MDL)。</p><p>表锁的语法是 lock tables … read&#x2F;write。</p><p>在还没有出现更细粒度的锁的时候，表锁是最常用的处理并发的方式。而对于 InnoDB 这种支持行锁的引擎，一般不使用 lock tables 命令来控制并发，毕竟锁住整个表的影响面还是太大。</p><h3 id="三、小结"><a href="#三、小结" class="headerlink" title="三、小结"></a>三、小结</h3><p>全局锁主要用在逻辑备份过程中。对于全部是 InnoDB 引擎的库，建议选择使用–single-transaction 参数，对应用会更友好。</p><p>表锁一般是在数据库引擎不支持行锁的时候才会被用到的。<br>如果你发现你的应用程序里有 lock tables 这样的语句，你需要追查一下，比较可能的情况是：</p><ul><li>要么是你的系统现在还在用 MyISAM 这类不支持事务的引擎，那要安排升级换引擎；</li><li>要么是你的引擎升级了，但是代码还没升级。我见过这样的情况，最后业务开发就是把 lock tables 和 unlock tables 改成 begin 和 commit，问题就解决了。</li></ul><p>MDL 会直到事务提交才释放，在做表结构变更的时候，你一定要小心不要导致锁住线上查询和更新。</p><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      
      
      <categories>
          
          <category> MySQL学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>day-11-线性排序</title>
      <link href="/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-day-11-%E7%BA%BF%E6%80%A7%E6%8E%92%E5%BA%8F/"/>
      <url>/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-day-11-%E7%BA%BF%E6%80%A7%E6%8E%92%E5%BA%8F/</url>
      
        <content type="html"><![CDATA[<h3 id="一、桶排序"><a href="#一、桶排序" class="headerlink" title="一、桶排序"></a>一、桶排序</h3><p>核心思想是将要排序的数据分到几个有序的桶里，每个桶里的数据再单独进行排序。桶内排完序之后，再把每个桶里的数据按照顺序依次取出，组成的序列就是有序的了。</p><p>桶排序比较适合用在外部排序中。</p><h3 id="二、计数排序"><a href="#二、计数排序" class="headerlink" title="二、计数排序"></a>二、计数排序</h3><p>计数排序只能用在数据范围不大的场景中，如果数据范围 k 比要排序的数据 n 大很多，就不适合用计数排序了。而且，计数排序只能给非负整数排序，如果要排序的数据是其他类型的，要将其在不改变相对大小的情况下，转化为非负整数。</p><h3 id="三、基数排序"><a href="#三、基数排序" class="headerlink" title="三、基数排序"></a>三、基数排序</h3><p>基数排序对要排序的数据是有要求的，需要可以分割出独立的“位”来比较，而且位之间有递进的关系，如果 a 数据的高位比 b 数据大，那剩下的低位就不用比较了。除此之外，每一位的数据范围不能太大，要可以用线性排序算法来排序，否则，基数排序的时间复杂度就无法做到 O(n) 了。</p><h3 id="四、小结"><a href="#四、小结" class="headerlink" title="四、小结"></a>四、小结</h3><p>桶排序和计数排序的排序思想是非常相似的，都是针对范围不大的数据，将数据划分成不同的桶来实现排序。基数排序要求数据可以划分成高低位，位之间有递进关系。比较两个数，我们只需要比较高位，高位相同的再比较低位。而且每一位的数据范围不能太大，因为基数排序算法需要借助桶排序或者计数排序来完成每一个位的排序工作。</p><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      
      
      <categories>
          
          <category> 数据结构与算法学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构与算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>day-5-索引（下）</title>
      <link href="/MySQL%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-day-5-%E7%B4%A2%E5%BC%95%EF%BC%88%E4%B8%8B%EF%BC%89/"/>
      <url>/MySQL%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-day-5-%E7%B4%A2%E5%BC%95%EF%BC%88%E4%B8%8B%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h3 id="一、覆盖索引"><a href="#一、覆盖索引" class="headerlink" title="一、覆盖索引"></a>一、覆盖索引</h3><p>回表：回到主键索引树搜索的过程。<br>覆盖索引：在查询里面，如果某个索引覆盖了我们的查询需求，我们称这个索引为覆盖索引。</p><p>由于覆盖索引可以减少树的搜索次数，显著提升查询性能，所以使用覆盖索引是一个常用的性能优化手段。</p><h3 id="二、最左前缀原则"><a href="#二、最左前缀原则" class="headerlink" title="二、最左前缀原则"></a>二、最左前缀原则</h3><p>B+ 树这种索引结构，可以利用索引的“最左前缀”，来定位记录。</p><p>最左前缀可以是联合索引的最左 N 个字段，也可以是字符串索引的最左 M 个字符。</p><h4 id="在建立联合索引的时候，如何安排索引内的字段顺序？"><a href="#在建立联合索引的时候，如何安排索引内的字段顺序？" class="headerlink" title="在建立联合索引的时候，如何安排索引内的字段顺序？"></a>在建立联合索引的时候，如何安排索引内的字段顺序？</h4><p>第一原则是，如果通过调整顺序，可以少维护一个索引，那么这个顺序往往就是需要优先考虑采用的。</p><h3 id="三、索引下推"><a href="#三、索引下推" class="headerlink" title="三、索引下推"></a>三、索引下推</h3><p>MySQL 5.6 引入的索引下推优化（index condition pushdown)， 可以在索引遍历过程中，对索引中包含的字段先做判断，直接过滤掉不满足条件的记录，减少回表次数。</p><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      
      
      <categories>
          
          <category> MySQL学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>day-4-索引（上）</title>
      <link href="/MySQL%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-day-4-%E7%B4%A2%E5%BC%95%EF%BC%88%E4%B8%8A%EF%BC%89/"/>
      <url>/MySQL%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-day-4-%E7%B4%A2%E5%BC%95%EF%BC%88%E4%B8%8A%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h3 id="一、索引的常见模型"><a href="#一、索引的常见模型" class="headerlink" title="一、索引的常见模型"></a>一、索引的常见模型</h3><h4 id="1-1-哈希表"><a href="#1-1-哈希表" class="headerlink" title="1.1 哈希表"></a>1.1 哈希表</h4><p>哈希表是一种以键 - 值（key-value）存储数据的结构，我们只要输入待查找的键即 key，就可以找到其对应的值即 Value。哈希的思路很简单，把值放在数组里，用一个哈希函数把 key 换算成一个确定的位置，然后把 value 放在数组的这个位置。</p><p>哈希表这种结构适用于只有等值查询的场景，比如 Memcached 及其他一些 NoSQL 引擎。</p><h4 id="1-2-有序数组"><a href="#1-2-有序数组" class="headerlink" title="1.2 有序数组"></a>1.2 有序数组</h4><p>有序数组在等值查询和范围查询场景中的性能就都非常优秀。<br>如果仅仅看查询效率，有序数组就是最好的数据结构了。但是，在需要更新数据的时候就麻烦了，你往中间插入一个记录就必须得挪动后面所有的记录，成本太高。</p><p>有序数组索引只适用于静态存储引擎。</p><h4 id="1-3-二叉搜索树"><a href="#1-3-二叉搜索树" class="headerlink" title="1.3 二叉搜索树"></a>1.3 二叉搜索树</h4><p>二叉搜索树的特点是：父节点左子树所有结点的值小于父节点的值，右子树所有结点的值大于父节点的值。</p><h3 id="二、InnoDB-的索引模型"><a href="#二、InnoDB-的索引模型" class="headerlink" title="二、InnoDB 的索引模型"></a>二、InnoDB 的索引模型</h3><p>在 InnoDB 中，表都是根据主键顺序以索引的形式存放的，这种存储方式的表称为索引组织表。又InnoDB 使用了 B+ 树索引模型，所以数据都是存储在 B+ 树中的。</p><p>每一个索引在 InnoDB 里面对应一棵 B+ 树。</p><p>基于非主键索引的查询需要多扫描一棵索引树。因此，我们在应用中应该尽量使用主键查询。</p><p>主键长度越小，普通索引的叶子节点就越小，普通索引占用的空间也就越小。</p><h4 id="适合用业务字段直接做主键的场景"><a href="#适合用业务字段直接做主键的场景" class="headerlink" title="适合用业务字段直接做主键的场景"></a>适合用业务字段直接做主键的场景</h4><ul><li>只有一个索引；</li><li>该索引必须是唯一索引。</li></ul><h3 id="三、小结"><a href="#三、小结" class="headerlink" title="三、小结"></a>三、小结</h3><p>B+ 树能够很好地配合磁盘的读写特性，减少单次查询的磁盘访问次数。</p><p>由于 InnoDB 是索引组织表，一般情况下建议你创建一个自增主键，这样非主键索引占用的空间最小。但事无绝对，有些场景适合使用业务逻辑字段做主键。</p><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      
      
      <categories>
          
          <category> MySQL学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>day-3-事务隔离</title>
      <link href="/MySQL%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-day-3-%E4%BA%8B%E5%8A%A1%E9%9A%94%E7%A6%BB/"/>
      <url>/MySQL%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-day-3-%E4%BA%8B%E5%8A%A1%E9%9A%94%E7%A6%BB/</url>
      
        <content type="html"><![CDATA[<h3 id="一、隔离性与隔离级别"><a href="#一、隔离性与隔离级别" class="headerlink" title="一、隔离性与隔离级别"></a>一、隔离性与隔离级别</h3><p>事务的四大特性：原子性、一致性、隔离性、持久性。</p><p>SQL 标准的事务隔离级别包括：读未提交（read uncommitted）、读提交（read committed）、可重复读（repeatable read）和串行化（serializable ）。</p><ul><li>读未提交：一个事务还没提交时，它做的变更就能被别的事务看到。</li><li>读已提交：一个事务提交之后，它做的变更才会被其他事务看到。</li><li>可重复读：一个事务执行过程中看到的数据，总是跟这个事务在启动时看到的数据是一致的。</li><li>串行化：对于同一行记录，“写”会加“写锁”，“读”会加“读锁”。当出现读写锁冲突的时候，后访问的事务必须等前一个事务执行完成，才能继续执行。</li></ul><h3 id="二、事务隔离的实现"><a href="#二、事务隔离的实现" class="headerlink" title="二、事务隔离的实现"></a>二、事务隔离的实现</h3><p>长事务意味着系统里面会存在很老的事务视图。由于这些事务随时可能访问数据库里面的任何数据，所以这个事务提交之前，数据库里面它可能用到的回滚记录都必须保留，这就会导致大量占用存储空间。</p><h4 id="事务的启动方式："><a href="#事务的启动方式：" class="headerlink" title="事务的启动方式："></a>事务的启动方式：</h4><ul><li>1.显式启动事务语句， begin 或 start transaction。配套的提交语句是 commit，回滚语句是 rollback。</li><li>2.set autocommit&#x3D;0，这个命令会将这个线程的自动提交关掉。意味着如果你只执行一个 select 语句，这个事务就启动了，而且并不会自动提交。这个事务持续存在直到你主动执行 commit 或 rollback 语句，或者断开连接。</li></ul><p>建议总是使用 set autocommit&#x3D;1, 通过显式语句的方式来启动事务。</p><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      
      
      <categories>
          
          <category> MySQL学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>day-2-日志系统</title>
      <link href="/MySQL%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-day-2-%E6%97%A5%E5%BF%97%E7%B3%BB%E7%BB%9F/"/>
      <url>/MySQL%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-day-2-%E6%97%A5%E5%BF%97%E7%B3%BB%E7%BB%9F/</url>
      
        <content type="html"><![CDATA[<h3 id="一、重做日志：redo-log"><a href="#一、重做日志：redo-log" class="headerlink" title="一、重做日志：redo log"></a>一、重做日志：redo log</h3><p>当有一条记录需要更新的时候，InnoDB 引擎就会先把记录写到 redo log 里面，并更新内存，这个时候更新就算完成了。同时，InnoDB 引擎会在适当的时候，将这个操作记录更新到磁盘里面，而这个更新往往是在系统比较空闲的时候做。</p><p>有了 redo log，InnoDB 就可以保证即使数据库发生异常重启，之前提交的记录都不会丢失，这个能力称为 crash-safe。</p><h3 id="二、归档日志：bin-log"><a href="#二、归档日志：bin-log" class="headerlink" title="二、归档日志：bin log"></a>二、归档日志：bin log</h3><p>redo log 是 InnoDB 引擎特有的日志，而 Server 层也有自己的日志，称为 binlog（归档日志）。</p><p>MySQL 自带的引擎是 MyISAM，但是 MyISAM 没有 crash-safe 的能力，binlog 日志只能用于归档。而 InnoDB 是另一个公司以插件形式引入 MySQL 的，既然只依靠 binlog 是没有 crash-safe 能力的，所以 InnoDB 使用另外一套日志系统——也就是 redo log 来实现 crash-safe 能力。</p><h3 id="三、两种日志的不同点"><a href="#三、两种日志的不同点" class="headerlink" title="三、两种日志的不同点"></a>三、两种日志的不同点</h3><ul><li>redo log 是 InnoDB 引擎特有的；binlog 是 MySQL 的 Server 层实现的，所有引擎都可以使用。</li><li>redo log 是物理日志，记录的是“在某个数据页上做了什么修改”；binlog 是逻辑日志，记录的是这个语句的原始逻辑，比如“给 ID&#x3D;2 这一行的 c 字段加 1 ”。</li><li>redo log 是循环写的，空间固定会用完；binlog 是可以追加写入的。“追加写”是指 binlog 文件写到一定大小后会切换到下一个，并不会覆盖以前的日志。</li></ul><h3 id="四、两阶段提交"><a href="#四、两阶段提交" class="headerlink" title="四、两阶段提交"></a>四、两阶段提交</h3><p>redo log 的写入拆成了两个步骤：prepare 和 commit，这就是”两阶段提交”。</p><p>如果不使用“两阶段提交”，那么数据库的状态就有可能和用它的日志恢复出来的库的状态不一致。</p><p>redo log 和 binlog 都可以用于表示事务的提交状态，而两阶段提交就是让这两个状态保持逻辑上的一致。</p><h3 id="五、小结"><a href="#五、小结" class="headerlink" title="五、小结"></a>五、小结</h3><p>redo log 用于保证 crash-safe 能力。innodb_flush_log_at_trx_commit 这个参数设置成 1 的时候，表示每次事务的 redo log 都直接持久化到磁盘。这个参数建议设置成 1，这样可以保证 MySQL 异常重启之后数据不丢失。</p><p>sync_binlog 这个参数设置成 1 的时候，表示每次事务的 binlog 都持久化到磁盘。这个参数也建议设置成 1，这样可以保证 MySQL 异常重启之后 binlog 不丢失。</p><p>两阶段提交是跨系统维持数据逻辑一致性时常用的一个方案。</p><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      
      
      <categories>
          
          <category> MySQL学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>day-1-MySQL的基础架构</title>
      <link href="/MySQL%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-day-1-MySQL%E7%9A%84%E5%9F%BA%E7%A1%80%E6%9E%B6%E6%9E%84/"/>
      <url>/MySQL%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-day-1-MySQL%E7%9A%84%E5%9F%BA%E7%A1%80%E6%9E%B6%E6%9E%84/</url>
      
        <content type="html"><![CDATA[<h3 id="一、-MySQL的基础架构"><a href="#一、-MySQL的基础架构" class="headerlink" title="一、 MySQL的基础架构"></a>一、 MySQL的基础架构</h3><p><img src="https://minio.zhangyl.top/img/2024/20240716224651.png" alt="image.png"></p><ul><li>Server层：连接器、查询缓存、分析器、优化器、执行器等核心服务功能，以及所有的内置函数和跨存储引擎的功能（存储过程、触发器、视图等）。</li><li>存储引擎层：负责数据的存储和提取。</li></ul><h3 id="二、连接器"><a href="#二、连接器" class="headerlink" title="二、连接器"></a>二、连接器</h3><p><strong>连接器负责跟客户端建立连接、获取权限、维持和管理连接。</strong></p><p>数据库里面，长连接是指连接成功后，如果客户端持续有请求，则一直使用同一个连接。<br>短连接则是指每次执行完很少的几次查询就断开连接，下次查询再重新建立一个。</p><h3 id="三、查询缓存"><a href="#三、查询缓存" class="headerlink" title="三、查询缓存"></a>三、查询缓存</h3><p>MySQL 拿到一个查询请求后，会先到查询缓存看看，之前是不是执行过这条语句。之前执行过的语句及其结果可能会以 key-value 对的形式，被直接缓存在内存中。</p><p>MySQL 8.0 版本直接将查询缓存的整块功能删掉了，也就是说 8.0 开始彻底没有这个功能了。</p><h3 id="四、分析器"><a href="#四、分析器" class="headerlink" title="四、分析器"></a>四、分析器</h3><p>如果没有命中查询缓存，就要开始真正执行语句了。</p><p>分析器先会做“词法分析”。你输入的是由多个字符串和空格组成的一条 SQL 语句，MySQL 需要识别出里面的字符串分别是什么，代表什么。</p><h3 id="五、优化器"><a href="#五、优化器" class="headerlink" title="五、优化器"></a>五、优化器</h3><p>优化器是在表里面有多个索引的时候，决定使用哪个索引；或者在一个语句有多表关联（join）的时候，决定各个表的连接顺序。</p><h3 id="六、执行器"><a href="#六、执行器" class="headerlink" title="六、执行器"></a>六、执行器</h3><p>开始执行的时候，要先判断一下你对这个表 T 有没有执行查询的权限，如果没有，就会返回没有权限的错误。<br>如果有权限，就打开表继续执行。打开表的时候，执行器就会根据表的引擎定义，去使用这个引擎提供的接口。</p><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      
      
      <categories>
          
          <category> MySQL学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>如何在Redis中保存时间序列数据</title>
      <link href="/Redis%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-%E5%A6%82%E4%BD%95%E5%9C%A8Redis%E4%B8%AD%E4%BF%9D%E5%AD%98%E6%97%B6%E9%97%B4%E5%BA%8F%E5%88%97%E6%95%B0%E6%8D%AE/"/>
      <url>/Redis%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-%E5%A6%82%E4%BD%95%E5%9C%A8Redis%E4%B8%AD%E4%BF%9D%E5%AD%98%E6%97%B6%E9%97%B4%E5%BA%8F%E5%88%97%E6%95%B0%E6%8D%AE/</url>
      
        <content type="html"><![CDATA[<h3 id="一、时间序列数据的读写特点"><a href="#一、时间序列数据的读写特点" class="headerlink" title="一、时间序列数据的读写特点"></a>一、时间序列数据的读写特点</h3><p>时间序列数据通常是持续高并发写入的。<br>时间序列数据的写入特点很简单，就是插入数据快，这就要求我们选择的数据类型，在进行数据插入时，复杂度要低，尽量不要阻塞。</p><p>时间序列数据读的特点：查询模式多。即要支持单点查询、范围查询和聚合计算。</p><p>Redis提供了保存时间序列数据的两种方案，分别可以基于 Hash 和 Sorted Set实现，以及基于 RedisTimeSeries 模块实现。</p><h3 id="二、基于-Hash-和-Sorted-Set-保存时间序列数据"><a href="#二、基于-Hash-和-Sorted-Set-保存时间序列数据" class="headerlink" title="二、基于 Hash 和 Sorted Set 保存时间序列数据"></a>二、基于 Hash 和 Sorted Set 保存时间序列数据</h3><h4 id="2-1-为什么保存时间序列数据，要同时使用这两种类型？"><a href="#2-1-为什么保存时间序列数据，要同时使用这两种类型？" class="headerlink" title="2.1 为什么保存时间序列数据，要同时使用这两种类型？"></a>2.1 为什么保存时间序列数据，要同时使用这两种类型？</h4><p>Hash 类型的特点：可以实现对单键的快速查询，这满足时间序列数据的单键查询需求。<br>但 Hash 类型有个短板：它并不支持对数据进行范围查询。</p><p>Sorted Set 支持按时间戳范围查询，因为它能够根据元素的权重分数来排序。</p><h4 id="2-1-如何保证写入-Hash-和-Sorted-Set-是一个原子性的操作？"><a href="#2-1-如何保证写入-Hash-和-Sorted-Set-是一个原子性的操作？" class="headerlink" title="2.1 如何保证写入 Hash 和 Sorted Set 是一个原子性的操作？"></a>2.1 如何保证写入 Hash 和 Sorted Set 是一个原子性的操作？</h4><p>Redis 用来实现简单事务的命令：MUTIL 命令和 EXEC 命令。</p><ul><li>MUTIL 命令：表示一系列原子性操作的开始。收到这个命令后，Redis 就知道，接下来再收到的命令需要放到一个内部队列中，后续一起执行，保证原子性。</li><li>EXEC 命令：表示一系列原子性操作的结束。一旦 Redis 收到了这个命令，就表示所有要保证原子性的命令操作都已经发送完成了。此时，Redis 开始执行刚才放到内部队列中的所有命令操作。<br><img src="https://minio.zhangyl.top/img/2024/20240710215509.png" alt="image.png"></li></ul><h4 id="2-3-如何对时间序列数据进行聚合计算？"><a href="#2-3-如何对时间序列数据进行聚合计算？" class="headerlink" title="2.3 如何对时间序列数据进行聚合计算？"></a>2.3 如何对时间序列数据进行聚合计算？</h4><p>聚合计算一般被用来周期性地统计时间窗口内的数据汇总状态，在实时监控与预警等场景下会频繁执行。</p><p>因为 Sorted Set 只支持范围查询，无法直接进行聚合计算，所以，我们只能先把时间范围内的数据取回到客户端，然后在客户端自行完成聚合计算。</p><p>这个方法虽然能完成聚合计算，但是会带来一定的潜在风险，也就是大量数据在 Redis 实例和客户端间频繁传输，这会和其他操作命令竞争网络资源，导致其他操作变慢。</p><p>为了避免客户端和 Redis 实例间频繁的大量数据传输，我们可以使用 RedisTimeSeries 来保存时间序列数据。</p><p>RedisTimeSeries 支持直接在 Redis 实例上进行聚合计算。</p><p>如果我们只需要进行单个时间点查询或是对某个时间范围查询的话，适合使用 Hash 和 Sorted Set 的组合，它们都是 Redis 的内在数据结构，性能好，稳定性高。但是，如果我们需要进行大量的聚合计算，同时网络带宽条件不是太好时，Hash 和 Sorted Set 的组合就不太适合了。此时，使用 RedisTimeSeries 就更加合适一些。</p><h3 id="三、基于-RedisTime-Series-模块保存时间序列数据"><a href="#三、基于-RedisTime-Series-模块保存时间序列数据" class="headerlink" title="三、基于 RedisTime Series 模块保存时间序列数据"></a>三、基于 RedisTime Series 模块保存时间序列数据</h3><p>RedisTimeSeries 是 Redis 的一个扩展模块。它专门面向时间序列数据提供了数据类型和访问接口，并且支持在 Redis 实例上直接对数据进行按时间范围的聚合计算。</p><p>当用于时间序列数据存取时，RedisTimeSeries 的操作主要有 5 个：</p><ul><li>用 TS.CREATE 命令创建时间序列数据集合；</li><li>用 TS.ADD 命令插入数据；</li><li>用 TS.GET 命令读取最新数据；</li><li>用 TS.MGET 命令按标签过滤查询数据集合；</li><li>用 TS.RANGE 支持聚合计算的范围查询。</li></ul><h3 id="四、小结"><a href="#四、小结" class="headerlink" title="四、小结"></a>四、小结</h3><p>时间序列数据的写入特点是要能快速写入，而查询的特点有三个：</p><ul><li>点查询，根据一个时间戳，查询相应时间的数据；</li><li>范围查询，查询起始和截止时间戳范围内的数据；</li><li>聚合计算，针对起始和截止时间戳范围内的所有数据进行计算，例如求最大 &#x2F; 最小值，求均值等。</li></ul><p>关于快速写入的要求，Redis 的高性能写特性足以应对了；而针对多样化的查询需求，Redis 提供了两种方案。</p><p>第一种方案是，组合使用 Redis 内置的 Hash 和 Sorted Set 类型，把数据同时保存在 Hash 集合和 Sorted Set 集合中。这种方案既可以利用 Hash 类型实现对单键的快速查询，还能利用 Sorted Set 实现对范围查询的高效支持，一下子满足了时间序列数据的两大查询需求。</p><p>不过，第一种方案也有两个不足：一个是，在执行聚合计算时，我们需要把数据读取到客户端再进行聚合，当有大量数据要聚合时，数据传输开销大；另一个是，所有的数据会在两个数据类型中各保存一份，内存开销不小。不过，我们可以通过设置适当的数据过期时间，释放内存，减小内存压力。</p><p>我们学习的第二种实现方案是使用 RedisTimeSeries 模块。这是专门为存取时间序列数据而设计的扩展模块。和第一种方案相比，RedisTimeSeries 能支持直接在 Redis 实例上进行多种数据聚合计算，避免了大量数据在实例和客户端间传输。不过，RedisTimeSeries 的底层数据结构使用了链表，它的范围查询的复杂度是 O(N) 级别的，同时，它的 TS.GET 查询只能返回最新的数据，没有办法像第一种方案的 Hash 类型一样，可以返回任一时间点的数据。</p><p>所以，组合使用 Hash 和 Sorted Set，或者使用 RedisTimeSeries，在支持时间序列数据存取上各有优劣势。我给你的建议是：</p><ul><li>如果你的部署环境中网络带宽高、Redis 实例内存大，可以优先考虑第一种方案；</li><li>如果你的部署环境中网络、内存资源有限，而且数据量大，聚合计算频繁，需要按数据集合属性查询，可以优先考虑第二种方案。</li></ul><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      
      
      <categories>
          
          <category> Redis学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>day-10-排序（下）</title>
      <link href="/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-day-10-%E6%8E%92%E5%BA%8F%EF%BC%88%E4%B8%8B%EF%BC%89/"/>
      <url>/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-day-10-%E6%8E%92%E5%BA%8F%EF%BC%88%E4%B8%8B%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h3 id="一、归并排序的原理"><a href="#一、归并排序的原理" class="headerlink" title="一、归并排序的原理"></a>一、归并排序的原理</h3><p>归并排序的核心思想：如果要排序一个数组，先把数组从中间分成前后两部分，然后对前后两部分分别排序，再将排好序的两部分合并在一起，这样整个数组就都有序了。</p><p><img src="https://minio.zhangyl.top/img/2024/20240710213434.png" alt="image.png"></p><p>归并排序使用的就是分治思想。分治，顾名思义，就是分而治之，将一个大问题分解成小的子问题来解决。小的子问题解决了，大问题也就解决了。</p><p><strong>分治是一种解决问题的处理思想，递归是一种编程技巧</strong></p><h3 id="二、快速排序的原理"><a href="#二、快速排序的原理" class="headerlink" title="二、快速排序的原理"></a>二、快速排序的原理</h3><p>快排的思想是这样的：如果要排序数组中下标从 p 到 r 之间的一组数据，我们选择 p 到 r 之间的任意一个数据作为 pivot（分区点）。</p><p>我们遍历 p 到 r 之间的数据，将小于 pivot 的放到左边，将大于 pivot 的放到右边，将 pivot 放到中间。经过这一步骤之后，数组 p 到 r 之间的数据就被分成了三个部分，前面 p 到 q-1 之间都是小于 pivot 的，中间是 pivot，后面的 q+1 到 r 之间是大于 pivot 的。<br><img src="https://minio.zhangyl.top/img/2024/20240710213826.png" alt="image.png"></p><h3 id="三、快排和归并的区别"><a href="#三、快排和归并的区别" class="headerlink" title="三、快排和归并的区别"></a>三、快排和归并的区别</h3><p><img src="https://minio.zhangyl.top/img/2024/20240710213917.png" alt="image.png"><br>归并排序的处理过程是由下到上的，先处理子问题，然后再合并。而快排正好相反，它的处理过程是由上到下的，先分区，然后再处理子问题。</p><h3 id="四、小结"><a href="#四、小结" class="headerlink" title="四、小结"></a>四、小结</h3><p>归并排序和快速排序是两种稍微复杂的排序算法，它们用的都是分治的思想，代码都通过递归来实现，过程非常相似。理解归并排序的重点是理解递推公式和 merge() 合并函数。同理，理解快排的重点也是理解递推公式，还有 partition() 分区函数。</p><p>归并排序算法是一种在任何情况下时间复杂度都比较稳定的排序算法，这也使它存在致命的缺点，即归并排序不是原地排序算法，空间复杂度比较高，是 O(n)。正因为此，它也没有快排应用广泛。</p><p>快速排序算法虽然最坏情况下的时间复杂度是 O(n2)，但是平均情况下时间复杂度都是 O(nlogn)。不仅如此，快速排序算法时间复杂度退化到 O(n2) 的概率非常小，我们可以通过合理地选择 pivot 来避免这种情况。</p><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      
      
      <categories>
          
          <category> 数据结构与算法学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构与算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java程序设置为开机自启</title>
      <link href="/%E5%BC%80%E5%8F%91%E7%9B%B8%E5%85%B3-Java%E7%A8%8B%E5%BA%8F%E8%AE%BE%E7%BD%AE%E4%B8%BA%E5%BC%80%E6%9C%BA%E8%87%AA%E5%90%AF/"/>
      <url>/%E5%BC%80%E5%8F%91%E7%9B%B8%E5%85%B3-Java%E7%A8%8B%E5%BA%8F%E8%AE%BE%E7%BD%AE%E4%B8%BA%E5%BC%80%E6%9C%BA%E8%87%AA%E5%90%AF/</url>
      
        <content type="html"><![CDATA[<h3 id="一、Windows"><a href="#一、Windows" class="headerlink" title="一、Windows"></a>一、Windows</h3><p>使用WinSW工具，下载地址：<a href="https://github.com/winsw/winsw/releases">https://github.com/winsw/winsw/releases</a></p><h4 id="1-1-新建一个文件夹目录，命名随意，这个文件夹下放你的jar包和下载的WinSW-exe-工具"><a href="#1-1-新建一个文件夹目录，命名随意，这个文件夹下放你的jar包和下载的WinSW-exe-工具" class="headerlink" title="1.1 新建一个文件夹目录，命名随意，这个文件夹下放你的jar包和下载的WinSW.exe 工具"></a>1.1 新建一个文件夹目录，命名随意，这个文件夹下放你的jar包和下载的WinSW.exe 工具</h4><p>将WinSW.exe改名为 myJava-service.exe</p><h3 id="1-2-新建一个xml配置文件"><a href="#1-2-新建一个xml配置文件" class="headerlink" title="1.2 新建一个xml配置文件"></a>1.2 新建一个xml配置文件</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">service</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">id</span>&gt;</span>myJava<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">name</span>&gt;</span>myJava<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">description</span>&gt;</span>This service runs myJava continuous integration system.<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">executable</span>&gt;</span>java<span class="tag">&lt;/<span class="name">executable</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">arguments</span>&gt;</span>-Xrs -Xmx256m -jar &quot;%BASE%\jenkins.jar&quot;<span class="tag">&lt;/<span class="name">arguments</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">service</span>&gt;</span></span><br></pre></td></tr></table></figure><p>保存配置文件，文件名与步骤一的名称一致，myJava-service.xml</p><h3 id="1-3-安装服务"><a href="#1-3-安装服务" class="headerlink" title="1.3 安装服务"></a>1.3 安装服务</h3><p>cmd到当前目录下，执行 <code>myJava-service.exe install</code><br>如果命令行窗口显示提示类似sucessfully 表示安装成功<br>此时打开<code>服务</code>，便能看到名为<code>myJava</code>的后台服务，启动类型为<code>自动</code>，默认开机自启。</p><h3 id="二、Linux"><a href="#二、Linux" class="headerlink" title="二、Linux"></a>二、Linux</h3><h3 id="2-1-创建服务文件"><a href="#2-1-创建服务文件" class="headerlink" title="2.1 创建服务文件"></a>2.1 创建服务文件</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd /etc/systemd/system</span><br><span class="line">touch myapp.service</span><br></pre></td></tr></table></figure><h3 id="2-2-配置服务文件"><a href="#2-2-配置服务文件" class="headerlink" title="2.2 配置服务文件"></a>2.2 配置服务文件</h3><p>vi &#x2F;etc&#x2F;systemd&#x2F;system&#x2F;myapp.service</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">[Unit]</span><br><span class="line">Description=My Spring Boot Application</span><br><span class="line">After=syslog.target</span><br><span class="line">[Service]</span><br><span class="line">User=your-username</span><br><span class="line">ExecStart=/usr/bin/java -jar /path/to/your/application.jar</span><br><span class="line">SuccessExitStatus=143</span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br></pre></td></tr></table></figure><p>保存并关闭文件。确保替换“your-username”和“&#x2F;path&#x2F;to&#x2F;your&#x2F;application.jar”为实际的用户名和应用程序路径。</p><h4 id="2-3-安装服务"><a href="#2-3-安装服务" class="headerlink" title="2.3 安装服务"></a>2.3 安装服务</h4><p>重新加载Systemd配置文件，以便它可以识别新的服务文件：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl daemon-reload</span><br></pre></td></tr></table></figure><p>启动服务并将其设置为自动启动：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl start myapp.service</span><br><span class="line">sudo systemctl enable myapp.service</span><br></pre></td></tr></table></figure><p>可以使用以下命令来停止或重启服务：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl stop myapp.service</span><br><span class="line">sudo systemctl restart myapp.service</span><br></pre></td></tr></table></figure><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      
      
      <categories>
          
          <category> 开发相关 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>day-9-排序（上）</title>
      <link href="/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-day-9-%E6%8E%92%E5%BA%8F%EF%BC%88%E4%B8%8A%EF%BC%89/"/>
      <url>/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-day-9-%E6%8E%92%E5%BA%8F%EF%BC%88%E4%B8%8A%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h3 id="一、如何分析一个“排序算法”"><a href="#一、如何分析一个“排序算法”" class="headerlink" title="一、如何分析一个“排序算法”"></a>一、如何分析一个“排序算法”</h3><h4 id="1-1-排序算法的执行效率"><a href="#1-1-排序算法的执行效率" class="headerlink" title="1.1 排序算法的执行效率"></a>1.1 排序算法的执行效率</h4><p>对于排序算法执行效率的分析，一般从以下几个方面来衡量：</p><ul><li>最好情况、最坏情况、平均情况时间复杂度</li><li>时间复杂度的系数、常数、低阶</li><li>比较次数和交换（或移动）次数</li></ul><h4 id="1-2-排序算法的内存消耗"><a href="#1-2-排序算法的内存消耗" class="headerlink" title="1.2 排序算法的内存消耗"></a>1.2 排序算法的内存消耗</h4><p>原地排序算法：特指空间复杂度是 O(1) 的排序算法。</p><h4 id="1-3-排序算法的稳定性"><a href="#1-3-排序算法的稳定性" class="headerlink" title="1.3 排序算法的稳定性"></a>1.3 排序算法的稳定性</h4><h3 id="二、冒泡排序"><a href="#二、冒泡排序" class="headerlink" title="二、冒泡排序"></a>二、冒泡排序</h3><p>冒泡排序只会操作相邻的两个数据。每次冒泡操作都会对相邻的两个元素进行比较，看是否满足大小关系要求。如果不满足就让它俩互换。一次冒泡会让至少一个元素移动到它应该在的位置，重复 n 次，就完成了 n 个数据的排序工作。<br><img src="https://minio.zhangyl.top/img/2024/20240703223618.png" alt="image.png"></p><h3 id="三、插入排序"><a href="#三、插入排序" class="headerlink" title="三、插入排序"></a>三、插入排序</h3><p>插入排序也包含两种操作，一种是元素的比较，一种是元素的移动。<br><img src="https://minio.zhangyl.top/img/2024/20240703223834.png" alt="image.png"></p><h3 id="四、选择排序"><a href="#四、选择排序" class="headerlink" title="四、选择排序"></a>四、选择排序</h3><p>选择排序算法的实现思路有点类似插入排序，也分已排序区间和未排序区间。但是选择排序每次会从未排序区间中找到最小的元素，将其放到已排序区间的末尾。<br><img src="https://minio.zhangyl.top/img/2024/20240703223821.png" alt="image.png"></p><h3 id="五、小结"><a href="#五、小结" class="headerlink" title="五、小结"></a>五、小结</h3><p>要想分析、评价一个排序算法，需要从执行效率、内存消耗和稳定性三个方面来看。<br><img src="https://minio.zhangyl.top/img/2024/20240703223920.png" alt="image.png"><br>这三种时间复杂度为 O(n2) 的排序算法中，冒泡排序、选择排序，可能就纯粹停留在理论的层面了，学习的目的也只是为了开拓思维，实际开发中应用并不多，但是插入排序还是挺有用的。</p><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      
      
      <categories>
          
          <category> 数据结构与算法学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构与算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>day-8-递归</title>
      <link href="/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-day-8-%E9%80%92%E5%BD%92/"/>
      <url>/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-day-8-%E9%80%92%E5%BD%92/</url>
      
        <content type="html"><![CDATA[<h3 id="一、如何理解“递归”"><a href="#一、如何理解“递归”" class="headerlink" title="一、如何理解“递归”"></a>一、如何理解“递归”</h3><h4 id="递归需要满足的三个条件"><a href="#递归需要满足的三个条件" class="headerlink" title="递归需要满足的三个条件"></a>递归需要满足的三个条件</h4><h5 id="1-一个问题的解可以分解为几个子问题的解"><a href="#1-一个问题的解可以分解为几个子问题的解" class="headerlink" title="1. 一个问题的解可以分解为几个子问题的解"></a>1. 一个问题的解可以分解为几个子问题的解</h5><h5 id="2-这个问题与分解之后的子问题，除了数据规模不同，求解思路完全一样"><a href="#2-这个问题与分解之后的子问题，除了数据规模不同，求解思路完全一样" class="headerlink" title="2. 这个问题与分解之后的子问题，除了数据规模不同，求解思路完全一样"></a>2. 这个问题与分解之后的子问题，除了数据规模不同，求解思路完全一样</h5><h5 id="3-存在递归终止条件"><a href="#3-存在递归终止条件" class="headerlink" title="3. 存在递归终止条件"></a>3. 存在递归终止条件</h5><h3 id="二、如何编写递归代码"><a href="#二、如何编写递归代码" class="headerlink" title="二、如何编写递归代码"></a>二、如何编写递归代码</h3><p><strong>写递归代码的关键就是找到如何将大问题分解为小问题的规律，并且基于此写出递推公式，然后再推敲终止条件，最后将递推公式和终止条件翻译成代码。</strong></p><p>编写递归代码的关键是，只要遇到递归，我们就把它抽象成一个递推公式，不用想一层层的调用关系，不要试图用人脑去分解递归的每个步骤。</p><p><strong>递归代码要警惕堆栈溢出</strong><br><strong>递归代码要警惕重复计算</strong></p><h3 id="三、小结"><a href="#三、小结" class="headerlink" title="三、小结"></a>三、小结</h3><p>递归是一种非常高效、简洁的编码技巧。<br>编写递归代码的关键就是不要把自己绕进去，正确姿势是写出递推公式，找出终止条件，然后再翻译成递归代码。<br>递归代码虽然简洁高效，但是，递归代码也有很多弊端。比如，堆栈溢出、重复计算、函数调用耗时多、空间复杂度高等，所以，在编写递归代码的时候，一定要控制好这些副作用。</p><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      
      
      <categories>
          
          <category> 数据结构与算法学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构与算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>day-7-队列</title>
      <link href="/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-day-7-%E9%98%9F%E5%88%97/"/>
      <url>/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-day-7-%E9%98%9F%E5%88%97/</url>
      
        <content type="html"><![CDATA[<h3 id="一、如何理解队列"><a href="#一、如何理解队列" class="headerlink" title="一、如何理解队列"></a>一、如何理解队列</h3><p>队列跟栈一样，也是一种操作受限的线性表数据结构，特点是先进者先出。<br>入队：放一个数据到队列尾部。<br>出队：从队列头部取一个元素。<br><img src="https://minio.zhangyl.top/img/2024/20240629212208.png" alt="image.png"></p><h3 id="二、顺序队列和链式队列"><a href="#二、顺序队列和链式队列" class="headerlink" title="二、顺序队列和链式队列"></a>二、顺序队列和链式队列</h3><p>顺序队列：用数组实现的队列；<br>链式队列：用链表实现的队列。</p><h3 id="三、循环队列"><a href="#三、循环队列" class="headerlink" title="三、循环队列"></a>三、循环队列</h3><p><img src="https://minio.zhangyl.top/img/2024/20240629212411.png" alt="image.png"></p><h3 id="四、阻塞队列和并发队列"><a href="#四、阻塞队列和并发队列" class="headerlink" title="四、阻塞队列和并发队列"></a>四、阻塞队列和并发队列</h3><p>阻塞队列：就是在队列基础上增加了阻塞操作。<br>简单来说，就是在队列为空的时候，从队头取数据会被阻塞。因为此时还没有数据可取，直到队列中有了数据才能返回；如果队列已经满了，那么插入数据的操作就会被阻塞，直到队列中有空闲位置后再插入数据，然后再返回。<br><img src="https://minio.zhangyl.top/img/2024/20240629212539.png" alt="image.png"></p><p>并发队列：线程安全的队列。</p><h3 id="五、线程池没有空闲线程时，新的任务请求线程资源时，线程池该如何处理？各种处理策略又是如何实现的呢？"><a href="#五、线程池没有空闲线程时，新的任务请求线程资源时，线程池该如何处理？各种处理策略又是如何实现的呢？" class="headerlink" title="五、线程池没有空闲线程时，新的任务请求线程资源时，线程池该如何处理？各种处理策略又是如何实现的呢？"></a>五、线程池没有空闲线程时，新的任务请求线程资源时，线程池该如何处理？各种处理策略又是如何实现的呢？</h3><p>我们一般有两种处理策略。第一种是非阻塞的处理方式，直接拒绝任务请求；另一种是阻塞的处理方式，将请求排队，等到有空闲线程时，取出排队的请求继续处理。</p><p>基于链表的实现方式，可以实现一个支持无限排队的无界队列（unbounded queue），但是可能会导致过多的请求排队等待，请求处理的响应时间过长。所以，针对响应时间比较敏感的系统，基于链表实现的无限排队的线程池是不合适的。<br>而基于数组实现的有界队列（bounded queue），队列的大小有限，所以线程池中排队的请求超过队列大小时，接下来的请求就会被拒绝，这种方式对响应时间敏感的系统来说，就相对更加合理。不过，设置一个合理的队列大小，也是非常有讲究的。队列太大导致等待的请求太多，队列太小会导致无法充分利用系统资源、发挥最大性能。</p><h3 id="六、小结"><a href="#六、小结" class="headerlink" title="六、小结"></a>六、小结</h3><p>队列最大的特点就是先进先出，主要的两个操作是入队和出队。跟栈一样，它既可以用数组来实现，也可以用链表来实现。用数组实现的叫顺序队列，用链表实现的叫链式队列。特别是长得像一个环的循环队列。在数组实现队列的时候，会有数据搬移操作，要想解决数据搬移的问题，我们就需要像环一样的循环队列。</p><p>循环队列是我们这节的重点。要想写出没有 bug 的循环队列实现代码，关键要确定好队空和队满的判定条件，具体的代码你要能写出来。</p><p>阻塞队列就是入队、出队操作可以阻塞，并发队列就是队列的操作多线程安全。</p><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      
      
      <categories>
          
          <category> 数据结构与算法学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构与算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用docker-compose 部署MySQL</title>
      <link href="/%E5%B7%A5%E5%85%B7-%E4%BD%BF%E7%94%A8docker-compose-%E9%83%A8%E7%BD%B2MySQL/"/>
      <url>/%E5%B7%A5%E5%85%B7-%E4%BD%BF%E7%94%A8docker-compose-%E9%83%A8%E7%BD%B2MySQL/</url>
      
        <content type="html"><![CDATA[<h3 id="一、拉取MySQL镜像"><a href="#一、拉取MySQL镜像" class="headerlink" title="一、拉取MySQL镜像"></a>一、拉取MySQL镜像</h3><p>我这里使用的是MySQL8.0.18，可以自行选择需要的版本。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull mysql:8.0.18</span><br></pre></td></tr></table></figure><h3 id="二、创建挂载目录"><a href="#二、创建挂载目录" class="headerlink" title="二、创建挂载目录"></a>二、创建挂载目录</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mkdir -p /home/docker/mysql8/log</span><br><span class="line">mkdir -p /home/docker/mysql8/data</span><br><span class="line">mkdir -p /home/docker/mysql8/conf.d</span><br></pre></td></tr></table></figure><h3 id="三、添加配置文件my-cnf"><a href="#三、添加配置文件my-cnf" class="headerlink" title="三、添加配置文件my.cnf"></a>三、添加配置文件my.cnf</h3><p>这里需要给MySQL做点自定义的配置，比如时区字符编码等。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vi /home/docker/mysql8/conf.d/my.cnf</span><br></pre></td></tr></table></figure><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">###### [client]配置模块 ######</span><br><span class="line">[client]</span><br><span class="line">default-character-set=utf8mb4</span><br><span class="line">socket=/var/lib/mysql/mysql.sock</span><br><span class="line"></span><br><span class="line">###### [mysql]配置模块 ######</span><br><span class="line">[mysql]</span><br><span class="line"># 设置MySQL客户端默认字符集</span><br><span class="line">default-character-set=utf8mb4</span><br><span class="line">socket=/var/lib/mysql/mysql.sock</span><br><span class="line"></span><br><span class="line">###### [mysqld]配置模块 ######</span><br><span class="line">[mysqld]</span><br><span class="line">port=3306</span><br><span class="line">user=mysql</span><br><span class="line"># 设置sql模式 sql_mode模式引起的分组查询出现*this is incompatible with sql_mode=only_full_group_by，这里最好剔除ONLY_FULL_GROUP_BY</span><br><span class="line">sql_mode=STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION</span><br><span class="line">datadir=/var/lib/mysql</span><br><span class="line">socket=/var/lib/mysql/mysql.sock</span><br><span class="line">server-id = 1</span><br><span class="line"></span><br><span class="line"># MySQL8 的密码认证插件 如果不设置低版本navicat无法连接</span><br><span class="line">default_authentication_plugin=mysql_native_password</span><br><span class="line"></span><br><span class="line"># 禁用符号链接以防止各种安全风险</span><br><span class="line">symbolic-links=0</span><br><span class="line"></span><br><span class="line"># 允许最大连接数</span><br><span class="line">max_connections=1000</span><br><span class="line"></span><br><span class="line"># 服务端使用的字符集默认为8比特编码的latin1字符集</span><br><span class="line">character-set-server=utf8mb4</span><br><span class="line"></span><br><span class="line"># 创建新表时将使用的默认存储引擎</span><br><span class="line">default-storage-engine=INNODB</span><br><span class="line"></span><br><span class="line"># 0: 表名将按指定方式存储，并且比较区分大小写;</span><br><span class="line"># 1: 表名以小写形式存储在磁盘上，比较不区分大小写；</span><br><span class="line">lower_case_table_names=0</span><br><span class="line"></span><br><span class="line">max_allowed_packet=16M </span><br><span class="line"></span><br><span class="line"># 设置时区</span><br><span class="line">default-time_zone=&#x27;+8:00&#x27;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="四、编写-docker-compose-yml"><a href="#四、编写-docker-compose-yml" class="headerlink" title="四、编写 docker-compose.yml"></a>四、编写 docker-compose.yml</h3><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">&#x27;3&#x27;</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">mysql:</span> <span class="comment"># 服务名称</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">mysql:8.0.18</span> <span class="comment"># 或其它mysql版本</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">mysql8</span> <span class="comment"># 容器名称</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">MYSQL_ROOT_PASSWORD=123456</span> <span class="comment"># root用户密码</span></span><br><span class="line"><span class="comment">#      - TZ=Asia/Shanghai # 设置容器时区 我这里通过下面挂载方式同步的宿主机时区和时间了,这里忽略</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">/home/docker/mysql8/log:/var/log/mysql</span> <span class="comment"># 映射日志目录，宿主机:容器</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">/home/docker/mysql8/data:/var/lib/mysql</span> <span class="comment"># 映射数据目录，宿主机:容器</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">/home/docker/mysql8/conf.d:/etc/mysql/conf.d</span> <span class="comment"># 映射配置目录，宿主机:容器</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">/etc/localtime:/etc/localtime:ro</span> <span class="comment"># 让容器的时钟与宿主机时钟同步，避免时间的问题，ro是read only的意思，就是只读。</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">3306</span><span class="string">:3306</span> <span class="comment"># 指定宿主机端口与容器端口映射关系，宿主机:容器</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">always</span> <span class="comment"># 容器随docker启动自启</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="五、启动容器"><a href="#五、启动容器" class="headerlink" title="五、启动容器"></a>五、启动容器</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker-compose -f docker-compose.yml up -d</span><br></pre></td></tr></table></figure><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      
      
      <categories>
          
          <category> 工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker更换镜像源</title>
      <link href="/%E5%B7%A5%E5%85%B7-Docker%E6%9B%B4%E6%8D%A2%E9%95%9C%E5%83%8F%E6%BA%90/"/>
      <url>/%E5%B7%A5%E5%85%B7-Docker%E6%9B%B4%E6%8D%A2%E9%95%9C%E5%83%8F%E6%BA%90/</url>
      
        <content type="html"><![CDATA[<h3 id="一、问题"><a href="#一、问题" class="headerlink" title="一、问题"></a>一、问题</h3><p>在学习Docker的时候遇到pull失败的情况</p><h3 id="二、解决方法"><a href="#二、解决方法" class="headerlink" title="二、解决方法"></a>二、解决方法</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">sudo mkdir -p /etc/docker</span><br><span class="line">sudo tee /etc/docker/daemon.json &lt;&lt;-&#x27;EOF&#x27;</span><br><span class="line">&#123;</span><br><span class="line">  &quot;registry-mirrors&quot;: [&quot;https://yxzrazem.mirror.aliyuncs.com&quot;]</span><br><span class="line">&#125;</span><br><span class="line">EOF</span><br><span class="line">sudo systemctl daemon-reload</span><br><span class="line">sudo systemctl restart docker</span><br><span class="line"></span><br></pre></td></tr></table></figure><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      
      
      <categories>
          
          <category> 工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>day-6-栈</title>
      <link href="/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-day-6-%E6%A0%88/"/>
      <url>/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-day-6-%E6%A0%88/</url>
      
        <content type="html"><![CDATA[<h3 id="一、如何理解“栈”"><a href="#一、如何理解“栈”" class="headerlink" title="一、如何理解“栈”"></a>一、如何理解“栈”</h3><p>栈是一种“操作受限”的线性表，后进者先出，先进者后出。<br><img src="https://minio.zhangyl.top/img/2024/20240620220703.png" alt="image.png"><br>当某个数据集合只涉及在一端插入和删除数据，并且满足后进先出、先进后出的特性，这时我们就应该首选“栈”这种数据结构。</p><h3 id="二、如何实现一个“栈”"><a href="#二、如何实现一个“栈”" class="headerlink" title="二、如何实现一个“栈”"></a>二、如何实现一个“栈”</h3><p>栈既可以用数组来实现，也可以用链表来实现。<br>用数组实现的栈，叫作顺序栈；<br>用链表实现的栈，叫作链式栈。</p><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      
      
      <categories>
          
          <category> 数据结构与算法学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构与算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>day-5-链表（下）</title>
      <link href="/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-day-5-%E9%93%BE%E8%A1%A8%EF%BC%88%E4%B8%8B%EF%BC%89/"/>
      <url>/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-day-5-%E9%93%BE%E8%A1%A8%EF%BC%88%E4%B8%8B%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h3 id="一、几个写链表代码的技巧"><a href="#一、几个写链表代码的技巧" class="headerlink" title="一、几个写链表代码的技巧"></a>一、几个写链表代码的技巧</h3><h4 id="技巧一：理解指针或引用的含义"><a href="#技巧一：理解指针或引用的含义" class="headerlink" title="技巧一：理解指针或引用的含义"></a>技巧一：理解指针或引用的含义</h4><p>将某个变量赋值给指针，实际上就是将这个变量的地址赋值给指针，或者反过来说，指针中存储了这个变量的内存地址，指向了这个变量，通过指针就能找到这个变量。</p><h4 id="技巧二：警惕指针丢失和内存泄漏"><a href="#技巧二：警惕指针丢失和内存泄漏" class="headerlink" title="技巧二：警惕指针丢失和内存泄漏"></a>技巧二：警惕指针丢失和内存泄漏</h4><p>插入结点时，一定要注意操作的顺序。<br>删除链表结点时，也一定要记得手动释放内存空间。</p><h4 id="技巧三：利用哨兵简化实现难度"><a href="#技巧三：利用哨兵简化实现难度" class="headerlink" title="技巧三：利用哨兵简化实现难度"></a>技巧三：利用哨兵简化实现难度</h4><p>哨兵，解决的是国家之间的边界问题。同理，这里说的哨兵也是解决“边界问题”的，不直接参与业务逻辑。</p><h4 id="技巧四：重点留意边界条件处理"><a href="#技巧四：重点留意边界条件处理" class="headerlink" title="技巧四：重点留意边界条件处理"></a>技巧四：重点留意边界条件处理</h4><p>检查链表代码的几个边界条件：</p><ul><li>如果链表为空时，代码是否能正常工作？</li><li>如果链表只包含一个结点时，代码是否能正常工作？</li><li>如果链表只包含两个结点时，代码是否能正常工作？</li><li>代码逻辑在处理头结点和尾结点的时候，是否能正常工作？</li></ul><h4 id="技巧五：举例画图，辅助思考"><a href="#技巧五：举例画图，辅助思考" class="headerlink" title="技巧五：举例画图，辅助思考"></a>技巧五：举例画图，辅助思考</h4><h4 id="技巧六：多写多练，没有捷径"><a href="#技巧六：多写多练，没有捷径" class="headerlink" title="技巧六：多写多练，没有捷径"></a>技巧六：多写多练，没有捷径</h4><p>5个常见的链表操作：</p><ul><li>单链表反转</li><li>链表中环的检测</li><li>两个有序的链表合并</li><li>删除链表倒数第 n 个结点</li><li>求链表的中间结点</li></ul><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      
      
      <categories>
          
          <category> 数据结构与算法学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构与算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>day-4-链表（上）</title>
      <link href="/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-day-4-%E9%93%BE%E8%A1%A8%EF%BC%88%E4%B8%8A%EF%BC%89/"/>
      <url>/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-day-4-%E9%93%BE%E8%A1%A8%EF%BC%88%E4%B8%8A%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h3 id="一、链表结构"><a href="#一、链表结构" class="headerlink" title="一、链表结构"></a>一、链表结构</h3><p>链表不需要一块连续的内存空间，它通过“指针”将一组零散的内存块串联起来使用。<br><img src="https://minio.zhangyl.top/img/2024/20240616140734.png" alt="image.png"></p><h4 id="1-1-单链表"><a href="#1-1-单链表" class="headerlink" title="1.1 单链表"></a>1.1 单链表</h4><p><img src="https://minio.zhangyl.top/img/2024/20240616140838.png" alt="image.png"><br>链表的插入和删除操作，对应的时间复杂度是O(1)。<br><img src="https://minio.zhangyl.top/img/2024/20240616141009.png" alt="image.png"><br>但链表随机访问，需要 O(n) 的时间复杂度。<br>因为链表中的数据并非连续存储的，所以无法像数组那样，根据首地址和下标，通过寻址公式就能直接计算出对应的内存地址，而是需要根据指针一个结点一个结点地依次遍历，直到找到相应的结点。</p><h4 id="1-2-循环链表"><a href="#1-2-循环链表" class="headerlink" title="1.2 循环链表"></a>1.2 循环链表</h4><p>循环链表是一种特殊的单链表。<br><img src="https://minio.zhangyl.top/img/2024/20240616141442.png" alt="image.png"><br>和单链表相比，循环链表的优点是从链尾到链头比较方便。当要处理的数据具有环型结构特点时，就特别适合采用循环链表。</p><h4 id="1-3-双向链表"><a href="#1-3-双向链表" class="headerlink" title="1.3 双向链表"></a>1.3 双向链表</h4><p>双向链表，支持两个方向，每个结点不止有一个后继指针 next 指向后面的结点，还有一个前驱指针 prev 指向前面的结点。<br><img src="https://minio.zhangyl.top/img/2024/20240616141801.png" alt="image.png"><br>双向链表需要额外的两个空间来存储后继结点和前驱结点的地址。所以，如果存储同样多的数据，双向链表要比单链表占用更多的内存空间。虽然两个指针比较浪费存储空间，但可以支持双向遍历，这样也带来了双向链表操作的灵活性。</p><p>从结构上来看，双向链表可以支持 O(1) 时间复杂度的情况下找到前驱结点，正是这样的特点，也使双向链表在某些情况下的插入、删除等操作都要比单链表简单、高效。</p><p>双向链表尽管比较费内存，但还是比单链表的应用更加广泛的原因。<br>在 Java 语言中， LinkedHashMap 就用到了双向链表这种数据结构。</p><h3 id="二、链表-VS-数组性能比较"><a href="#二、链表-VS-数组性能比较" class="headerlink" title="二、链表 VS 数组性能比较"></a>二、链表 VS 数组性能比较</h3><p><img src="https://minio.zhangyl.top/img/2024/20240616142056.png" alt="image.png"></p><p>数组简单易用，在实现上使用的是连续的内存空间，可以借助 CPU 的缓存机制，预读数组中的数据，所以访问效率更高。而链表在内存中并不是连续存储，所以对 CPU 缓存不友好，没办法有效预读。</p><p>数组的缺点是大小固定，一经声明就要占用整块连续内存空间。如果声明的数组过大，系统可能没有足够的连续内存空间分配给它，导致“内存不足（out of memory）”。如果声明的数组过小，则可能出现不够用的情况。这时只能再申请一个更大的内存空间，把原数组拷贝进去，非常费时。链表本身没有大小的限制，天然地支持动态扩容，这也是它与数组最大的区别。</p><h3 id="三、小结"><a href="#三、小结" class="headerlink" title="三、小结"></a>三、小结</h3><p>和数组相比，链表更适合插入、删除操作频繁的场景，查询的时间复杂度较高。不过，在具体软件开发中，要对数组和链表的各种性能进行对比，综合来选择使用两者中的哪一个。</p><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      
      
      <categories>
          
          <category> 数据结构与算法学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构与算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>day-3-数组</title>
      <link href="/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-day-3-%E6%95%B0%E7%BB%84/"/>
      <url>/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-day-3-%E6%95%B0%E7%BB%84/</url>
      
        <content type="html"><![CDATA[<h3 id="一、什么是数组"><a href="#一、什么是数组" class="headerlink" title="一、什么是数组"></a>一、什么是数组</h3><blockquote><p>数组是一种线性表数据结构。它用一组连续的内存空间，来存储一组具有相同类型的数据。</p></blockquote><p>这个定义里有几个关键词。</p><h4 id="1-1-线性表"><a href="#1-1-线性表" class="headerlink" title="1.1 线性表"></a>1.1 线性表</h4><p>线性表就是数据排成像一条线一样的结构。每个线性表上的数据最多只有前和后两个方向。<br>其实除了数组，链表、队列、栈等也是线性表结构。<br><img src="https://minio.zhangyl.top/img/2024/20240615231351.png" alt="image.png"></p><p>概念是非线性表，比如二叉树、堆、图等。之所以叫非线性，是因为，在非线性表中，数据之间并不是简单的前后关系。<br><img src="https://minio.zhangyl.top/img/2024/20240616142509.png" alt="image.png"></p><h4 id="1-2-连续的内存空间和相同类型的数据"><a href="#1-2-连续的内存空间和相同类型的数据" class="headerlink" title="1.2 连续的内存空间和相同类型的数据"></a>1.2 连续的内存空间和相同类型的数据</h4><p><img src="https://minio.zhangyl.top/img/2024/20240616142530.png" alt="image.png"></p><p><strong>很多时候我们并不是要去死记硬背某个数据结构或者算法，而是要学习它背后的思想和处理技巧，这些东西才是有价值的。</strong></p><h3 id="二、警惕数组的访问越界问题"><a href="#二、警惕数组的访问越界问题" class="headerlink" title="二、警惕数组的访问越界问题"></a>二、警惕数组的访问越界问题</h3><p>访问数组的本质就是访问一段连续内存，只要数组通过偏移计算得到的内存地址是可用的，那么程序可能不会报任何错误。</p><h3 id="三、容器能否完全替代数组？"><a href="#三、容器能否完全替代数组？" class="headerlink" title="三、容器能否完全替代数组？"></a>三、容器能否完全替代数组？</h3><p>使用数组更适合的场景：</p><ul><li>Java ArrayList 无法存储基本类型，如果特别关注性能，或者希望使用基本类型，就可以选用数组。</li><li>如果数据大小事先已知，并且对数据的操作非常简单，用不到 ArrayList 提供的大部分方法，也可以直接使用数组。</li><li>当要表示多维数组时，用数组往往会更加直观。</li></ul><p>对于业务开发，直接使用容器就足够了，省时省力。毕竟损耗一丢丢性能，完全不会影响到系统整体的性能。但如果是做一些非常底层的开发，比如开发网络框架，性能的优化需要做到极致，这个时候数组就会优于容器，成为首选。</p><h3 id="四、为什么大多数编程语言中，数组要从-0-开始编号，而不是从-1-开始？"><a href="#四、为什么大多数编程语言中，数组要从-0-开始编号，而不是从-1-开始？" class="headerlink" title="四、为什么大多数编程语言中，数组要从 0 开始编号，而不是从 1 开始？"></a>四、为什么大多数编程语言中，数组要从 0 开始编号，而不是从 1 开始？</h3><p>主要是历史原因。C 语言设计者用 0 开始计数数组下标，之后的 Java、JavaScript 等高级语言都效仿了 C 语言，或者说，为了在一定程度上减少了 C 语言程序员学习 Java 的成本，因此继续沿用了从 0 开始计数的习惯。</p><h3 id="五、小结"><a href="#五、小结" class="headerlink" title="五、小结"></a>五、小结</h3><p>数组用一块连续的内存空间，来存储相同类型的一组数据，最大的特点就是支持随机访问，但插入、删除操作也因此变得比较低效，平均情况时间复杂度为 O(n)。<br>在平时的业务开发中，我们可以直接使用编程语言提供的容器类，但是，如果是特别底层的开发，直接使用数组可能会更合适。</p><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      
      
      <categories>
          
          <category> 数据结构与算法学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构与算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>day-2-复杂度分析（下）</title>
      <link href="/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-day-2-%E5%A4%8D%E6%9D%82%E5%BA%A6%E5%88%86%E6%9E%90%EF%BC%88%E4%B8%8B%EF%BC%89/"/>
      <url>/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-day-2-%E5%A4%8D%E6%9D%82%E5%BA%A6%E5%88%86%E6%9E%90%EF%BC%88%E4%B8%8B%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h3 id="一、最好、最坏情况时间复杂度"><a href="#一、最好、最坏情况时间复杂度" class="headerlink" title="一、最好、最坏情况时间复杂度"></a>一、最好、最坏情况时间复杂度</h3><p>最好情况时间复杂度：在最理想的情况下，执行这段代码的时间复杂度。<br>最坏情况时间复杂度：在最糟糕的情况下，执行这段代码的时间复杂度。</p><h3 id="二、平均情况时间复杂度"><a href="#二、平均情况时间复杂度" class="headerlink" title="二、平均情况时间复杂度"></a>二、平均情况时间复杂度</h3><p>平均时间复杂度：也叫加权平均时间复杂度，</p><p>在大多数情况下，我们并不需要区分最好、最坏、平均情况时间复杂度，我们使用一个复杂度就可以满足需求了。<br>只有同一块代码在不同的情况下，时间复杂度有量级的差距，我们才会使用这三种复杂度表示法来区分。</p><h3 id="三、均摊时间复杂度"><a href="#三、均摊时间复杂度" class="headerlink" title="三、均摊时间复杂度"></a>三、均摊时间复杂度</h3><p>对一个数据结构进行一组连续操作中，大部分情况下时间复杂度都很低，只有个别情况下时间复杂度比较高，而且这些操作之间存在前后连贯的时序关系，这个时候，我们就可以将这一组操作放在一块儿分析，看是否能将较高时间复杂度那次操作的耗时，平摊到其他那些时间复杂度比较低的操作上。而且，在能够应用均摊时间复杂度分析的场合，一般均摊时间复杂度就等于最好情况时间复杂度。</p><p>均摊时间复杂度就是一种特殊的平均时间复杂度，没必要花太多精力区分它们。</p><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      
      
      <categories>
          
          <category> 数据结构与算法学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构与算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>day-1-复杂度分析（上）</title>
      <link href="/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-day-1-%E5%A4%8D%E6%9D%82%E5%BA%A6%E5%88%86%E6%9E%90%EF%BC%88%E4%B8%8A%EF%BC%89/"/>
      <url>/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-day-1-%E5%A4%8D%E6%9D%82%E5%BA%A6%E5%88%86%E6%9E%90%EF%BC%88%E4%B8%8A%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h3 id="一、为什么需要复杂度分析"><a href="#一、为什么需要复杂度分析" class="headerlink" title="一、为什么需要复杂度分析"></a>一、为什么需要复杂度分析</h3><h4 id="1-1-事后统计法的局限性"><a href="#1-1-事后统计法的局限性" class="headerlink" title="1.1 事后统计法的局限性"></a>1.1 事后统计法的局限性</h4><ul><li>测试结果非常依赖测试环境</li><li>测试结果受数据规模的影响很大</li></ul><h4 id="1-2-大-O-复杂度表示法"><a href="#1-2-大-O-复杂度表示法" class="headerlink" title="1.2 大 O 复杂度表示法"></a>1.2 大 O 复杂度表示法</h4><p>大 O 时间复杂度表示法表示代码执行时间随数据规模增长的变化趋势，也叫渐进时间复杂度，简称时间复杂度。<br><img src="https://minio.zhangyl.top/img/2024/20240616142350.png" alt="image.png"></p><h3 id="二、时间复杂度分析方法"><a href="#二、时间复杂度分析方法" class="headerlink" title="二、时间复杂度分析方法"></a>二、时间复杂度分析方法</h3><h4 id="2-1-只关注循环执行次数最多的一段代码"><a href="#2-1-只关注循环执行次数最多的一段代码" class="headerlink" title="2.1 只关注循环执行次数最多的一段代码"></a>2.1 只关注循环执行次数最多的一段代码</h4><h4 id="2-2-加法法则：总复杂度等于量级最大的那段代码的复杂度"><a href="#2-2-加法法则：总复杂度等于量级最大的那段代码的复杂度" class="headerlink" title="2.2 加法法则：总复杂度等于量级最大的那段代码的复杂度"></a>2.2 加法法则：总复杂度等于量级最大的那段代码的复杂度</h4><h4 id="2-3-乘法法则：嵌套代码的复杂度等于嵌套内外代码复杂度的乘积"><a href="#2-3-乘法法则：嵌套代码的复杂度等于嵌套内外代码复杂度的乘积" class="headerlink" title="2.3 乘法法则：嵌套代码的复杂度等于嵌套内外代码复杂度的乘积"></a>2.3 乘法法则：嵌套代码的复杂度等于嵌套内外代码复杂度的乘积</h4><h3 id="三、几种常见时间复杂度分析"><a href="#三、几种常见时间复杂度分析" class="headerlink" title="三、几种常见时间复杂度分析"></a>三、几种常见时间复杂度分析</h3><p><img src="https://minio.zhangyl.top/img/2024/20240616142410.png" alt="image.png"></p><h4 id="3-1-非多项式量级"><a href="#3-1-非多项式量级" class="headerlink" title="3.1 非多项式量级"></a>3.1 非多项式量级</h4><p>非多项式量级只有两个：O(2的n次方)和O(n!)</p><h4 id="3-2-多项式量级"><a href="#3-2-多项式量级" class="headerlink" title="3.2 多项式量级"></a>3.2 多项式量级</h4><h5 id="a-O-1"><a href="#a-O-1" class="headerlink" title="a) O(1)"></a>a) O(1)</h5><p>一般情况下，只要算法中不存在循环语句、递归语句，即使有成千上万行的代码，其时间复杂度也是O(1)。</p><h5 id="b-O-logn-、O-nlogn"><a href="#b-O-logn-、O-nlogn" class="headerlink" title="b) O(logn)、O(nlogn)"></a>b) O(logn)、O(nlogn)</h5><p>对数阶时间复杂度非常常见，同时也是最难分析的一种时间复杂度。<br>归并排序、快速排序的时间复杂度都是O(nlogn)。</p><h5 id="c-O-m-n-、O-m-n"><a href="#c-O-m-n-、O-m-n" class="headerlink" title="c) O(m + n)、O(m * n)"></a>c) O(m + n)、O(m * n)</h5><p>T1(m) + T2(n) &#x3D; O(f(m) + g(n))<br>T1(m) * T2(n) &#x3D; O(f(m)  *   f(n))</p><h3 id="四、空间复杂度分析"><a href="#四、空间复杂度分析" class="headerlink" title="四、空间复杂度分析"></a>四、空间复杂度分析</h3><p>空间复杂度全称为渐进空间复杂度，表示算法的存储空间与规模之间的增长关系。</p><h3 id="五、小结"><a href="#五、小结" class="headerlink" title="五、小结"></a>五、小结</h3><p>复杂度也叫渐进复杂度，包括时间复杂度和空间复杂度，用来分析算法执行效率与数据规模之间的增长关系，可以粗略地表示，越高阶复杂度的算法，执行效率越低。<br><img src="https://minio.zhangyl.top/img/2024/20240616142430.png" alt="image.png"></p><p>常见的复杂度并不多，从低阶到高阶有：O(1)、O(logn)、O(n)、O(nlogn)、O(n2 )。</p><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      
      
      <categories>
          
          <category> 数据结构与算法学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构与算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《数据结构与算法》学习计划</title>
      <link href="/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-%E3%80%8A%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95%E3%80%8B%E5%AD%A6%E4%B9%A0%E8%AE%A1%E5%88%92/"/>
      <url>/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-%E3%80%8A%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95%E3%80%8B%E5%AD%A6%E4%B9%A0%E8%AE%A1%E5%88%92/</url>
      
        <content type="html"><![CDATA[<h3 id="一、总计划"><a href="#一、总计划" class="headerlink" title="一、总计划"></a>一、总计划</h3><table><thead><tr><th align="center">阶段</th><th align="center">学习时间</th><th align="center">学习模块</th></tr></thead><tbody><tr><td align="center">第一阶段</td><td align="center">6月10日-6月23日</td><td align="center">复杂度分析、数组、链表、栈、队列<br> 递归、排序、二分查找</td></tr><tr><td align="center">第二阶段</td><td align="center">6月24日-7月7日</td><td align="center">散列表、二叉树、堆、堆排序、图<br>BF&#x2F;RK字符串匹配算法、Trie 树<br> 深度&#x2F;广度优先搜索</td></tr><tr><td align="center">第三阶段</td><td align="center">7月8日-7月21日</td><td align="center">四种算法思想、跳表、拓扑排序<br>Dijkstra算法、A*算法、B+树</td></tr><tr><td align="center">第四阶段</td><td align="center">7月22日-8月4日</td><td align="center">位图、BM、KMP、AC自动机、红黑树<br> 哈希算法、5个实战</td></tr></tbody></table><h3 id="二、分计划"><a href="#二、分计划" class="headerlink" title="二、分计划"></a>二、分计划</h3><h4 id="2-1-第一阶段"><a href="#2-1-第一阶段" class="headerlink" title="2.1 第一阶段"></a>2.1 第一阶段</h4><table><thead><tr><th>状态</th><th>专栏章节</th><th>章节名称</th><th>计划完成时间</th><th>实际完成时间</th></tr></thead><tbody><tr><td>✅</td><td>03</td><td>复杂度分析（上）：如何分析、统计算法的执行效率和资源消耗</td><td>6月10日</td><td>6月12日</td></tr><tr><td>✅</td><td>04</td><td>复杂度分析（下）：浅析最好、最坏、平均、均摊时间复杂度</td><td>6月10日</td><td>6月13日</td></tr><tr><td>✅</td><td>05</td><td>数组：为什么很多编程语言中数组都从0开始编号？</td><td>6月11日</td><td>6月15日</td></tr><tr><td>✅</td><td>06</td><td>链表（上）如何实现LRU缓存淘汰算法？</td><td>6月12日</td><td>6月16日</td></tr><tr><td>✅</td><td>07</td><td>链表（下）如何轻松写出正确的链表代码？</td><td>6月14日</td><td>6月17日</td></tr><tr><td>✅</td><td>08</td><td>栈：如何实现浏览器的前进和后退功能？</td><td>6月15日</td><td>6月20日</td></tr><tr><td>✅</td><td>09</td><td>队列：队列在线程池等有限资源中的应用</td><td>6月16日</td><td>6月29日</td></tr><tr><td>✅</td><td>10</td><td>递归：如何用三行代码找到“最终推荐人”？</td><td>6月16日</td><td>7月1日</td></tr><tr><td>✅</td><td>11</td><td>排序（上）：为什么插入排序比冒泡排序更受欢迎？</td><td>6月18日</td><td>7月3日</td></tr><tr><td>✅</td><td>12</td><td>排序（下）：如何用快排思想在O(n)内查找第K大元素？</td><td>6月19日</td><td>7月10日</td></tr><tr><td>✅</td><td>13</td><td>线性排序：如何根据年龄给100万用户数据排序？</td><td>6月21日</td><td>7月21日</td></tr><tr><td>✅</td><td>14</td><td>排序优化：如何实现一个通用的、高性能的排序函数？</td><td>6月22日</td><td>7月23日</td></tr><tr><td>✅</td><td>15</td><td>二分查找（上）：如何用最省内存的方式实现快速查找功能？</td><td>6月23日</td><td>7月24日</td></tr><tr><td></td><td>16</td><td>二分查找（下）：如何快速定位IP对应的省份地址？</td><td>6月23日</td><td></td></tr></tbody></table><h4 id="2-2-第二阶段"><a href="#2-2-第二阶段" class="headerlink" title="2.2 第二阶段"></a>2.2 第二阶段</h4><table><thead><tr><th>状态</th><th>专栏章节</th><th>章节名称</th><th>计划完成时间</th><th>实际完成时间</th></tr></thead><tbody><tr><td></td><td>17</td><td>跳表：为什么Redis一定要用跳表来实现有序集合？</td><td>6月25日</td><td></td></tr><tr><td></td><td>18</td><td>散列表（上）：Word文档中的单词拼写检查功能是如何实现的？</td><td>6月26日</td><td></td></tr><tr><td></td><td>19</td><td>散列表（中）：如何打造一个工业级水平的散列表？</td><td>6月27日</td><td></td></tr><tr><td></td><td>20</td><td>散列表（下）：为什么散列表和链表经常会一起使用？</td><td>6月28日</td><td></td></tr><tr><td></td><td>21</td><td>哈希算法（上）：如何防止数据库中的用户信息被脱库？</td><td>6月29日</td><td></td></tr><tr><td></td><td>22</td><td>哈希算法（下）：哈希算法在分布式系统中有哪些应用？</td><td>6月30日</td><td></td></tr><tr><td></td><td>23</td><td>二叉树基础（上）：什么样的二叉树适合用数组来存储？</td><td>6月30日</td><td></td></tr><tr><td></td><td>24</td><td>二叉树基础（下）：有了如此高效的散列表，为什么还需要二叉树？</td><td>7月2日</td><td></td></tr><tr><td></td><td>25</td><td>红黑树（上）：为什么工程中都用红黑树这种二叉树？</td><td>7月3日</td><td></td></tr><tr><td></td><td>26</td><td>红黑树（下）：掌握这些技巧，你也可以实现一个红黑树？</td><td>7月4日</td><td></td></tr><tr><td></td><td>27</td><td>递归树：如何借助树来求解递归算法的时间复杂度？</td><td>7月5日</td><td></td></tr><tr><td></td><td>28</td><td>堆和堆排序：为什么说堆排序没有快速排序快？</td><td>7月6日</td><td></td></tr><tr><td></td><td>29</td><td>堆的应用：如何快速获取到Top 10最热门的搜索关键词？</td><td>7月7日</td><td></td></tr></tbody></table><h4 id="2-3-第三阶段"><a href="#2-3-第三阶段" class="headerlink" title="2.3 第三阶段"></a>2.3 第三阶段</h4><table><thead><tr><th>状态</th><th>专栏章节</th><th>章节名称</th><th>计划完成时间</th><th>实际完成时间</th></tr></thead><tbody><tr><td></td><td>30</td><td>图的表示：如何存储微博、微信等社交网络中的好友关系？</td><td>7月9日</td><td></td></tr><tr><td></td><td>31</td><td>深度和广度优先搜索：如何找出社交网络中的三度好友关系？</td><td>7月10日</td><td></td></tr><tr><td></td><td>32</td><td>字符串匹配基础（上）：如何借助哈希算法实现高效字符串匹配？</td><td>7月11日</td><td></td></tr><tr><td></td><td>33</td><td>字符串匹配基础（中）：如何实现文本编辑器中的查找功能？</td><td>7月12日</td><td></td></tr><tr><td></td><td>34</td><td>字符串匹配基础（下）：如何借助BM算法轻松理解KMP算法？</td><td>7月13日</td><td></td></tr><tr><td></td><td>35</td><td>Trie树：如何实现搜索引擎的搜索关键词提示功能？</td><td>7月14日</td><td></td></tr><tr><td></td><td>36</td><td>AC自动机：如何用多模式串匹配实现敏感词过滤功能？</td><td>7月14日</td><td></td></tr><tr><td></td><td>37</td><td>贪心算法：如何用贪心算法实现Huffman压缩编码？</td><td>7月16日</td><td></td></tr><tr><td></td><td>38</td><td>分治算法：谈一谈大规模计算框架MapReduce中的分治思想</td><td>7月17日</td><td></td></tr><tr><td></td><td>39</td><td>回溯算法：从电影《蝴蝶效应》中学习回溯算法的核心思想</td><td>7月19日</td><td></td></tr><tr><td></td><td>40</td><td>初试动态规划：如何巧妙解决“双十一”购物时的凑单问题？</td><td>7月20日</td><td></td></tr><tr><td></td><td>41</td><td>动态规划理论：一篇文章带你彻底搞懂最优子结构、无后效性和重复子问题</td><td>7月21日</td><td></td></tr><tr><td></td><td>42</td><td>动态规划实战：如何实现搜索引擎中的拼写纠错功能？</td><td>7月21日</td><td></td></tr></tbody></table><h4 id="2-4-第四阶段"><a href="#2-4-第四阶段" class="headerlink" title="2.4 第四阶段"></a>2.4 第四阶段</h4><table><thead><tr><th>状态</th><th>专栏章节</th><th>章节名称</th><th>计划完成时间</th><th>实际完成时间</th></tr></thead><tbody><tr><td></td><td>43</td><td>拓扑排序：如何确定代码源文件的编译依赖关系？</td><td>7月23日</td><td></td></tr><tr><td></td><td>44</td><td>最短路径：地图软件是如何计算出最优出行路径的？</td><td>7月24日</td><td></td></tr><tr><td></td><td>45</td><td>位图：如何实现网页爬虫中的URL去重功能？</td><td>7月25日</td><td></td></tr><tr><td></td><td>46</td><td>概率统计：如何利用朴素贝叶斯算法过滤垃圾短信？</td><td>7月26日</td><td></td></tr><tr><td></td><td>47</td><td>向量空间：如何实现一个简单的音乐推荐系统？</td><td>7月27日</td><td></td></tr><tr><td></td><td>48</td><td>B+树：MySQL数据库索引是如何实现的？</td><td>7月28日</td><td></td></tr><tr><td></td><td>49</td><td>搜索：如何用A*搜索算法实现游戏中的寻路功能？</td><td>7月28日</td><td></td></tr><tr><td></td><td>50</td><td>索引：如何在海量数据中快速查找某个数据？</td><td>7月30日</td><td></td></tr><tr><td></td><td>51</td><td>并行算法：如何利用并行处理提高算法的执行效率？</td><td>7月31日</td><td></td></tr><tr><td></td><td>52</td><td>算法实战（一）：剖析Redis常用数据类型对应的数据结构</td><td>8月1日</td><td></td></tr><tr><td></td><td>53</td><td>算法实战（二）：剖析搜索引擎背后的经典数据结构与算法</td><td>8月2日</td><td></td></tr><tr><td></td><td>54</td><td>算法实战（三）：剖析高性能队列Disruptor背后的数据结构与算法</td><td>8月3日</td><td></td></tr><tr><td></td><td>55</td><td>算法实战（四）：剖析微服务接口鉴权限流背后的数据结构与算法</td><td>8月4日</td><td></td></tr><tr><td></td><td>56</td><td>算法实战（五）：如何用学过的数据结构与算法实现一个短网址系统？</td><td>8月4日</td><td></td></tr></tbody></table><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      
      
      <categories>
          
          <category> 数据结构与算法学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构与算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>GEO类型的使用</title>
      <link href="/Redis%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-GEO%E7%B1%BB%E5%9E%8B%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
      <url>/Redis%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-GEO%E7%B1%BB%E5%9E%8B%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<h3 id="一、应用场景"><a href="#一、应用场景" class="headerlink" title="一、应用场景"></a>一、应用场景</h3><p>基础信息服务（Location- Based Service，LBS）<br>LBS应用访问的数据是和人或物关联的一组经纬度信息，而且要能查询相邻的经纬度范围。<br>例如：搜索“附近的餐馆”、在打车软件上叫车。</p><h3 id="二、GEO的底层结构"><a href="#二、GEO的底层结构" class="headerlink" title="二、GEO的底层结构"></a>二、GEO的底层结构</h3><p>GEO 类型的底层数据结构是用 Sorted Set 来实现的。</p><h4 id="2-1-GeoHash编码方法"><a href="#2-1-GeoHash编码方法" class="headerlink" title="2.1 GeoHash编码方法"></a>2.1 GeoHash编码方法</h4><p>基本原理：“二分区间，区间编码”<br>比如：当我们要对一组经纬度进行GeoHash编码时，我们要先对经度和纬度分别编码，然后再把经纬度各自的编码组合成一个最终编码。<br>比如：我们要对 经度116.37 ，纬度39.86进行编码</p><p>对于一个地理位置来说，它的经度范围是 [-180,180]。GeoHash 编码会把一个经度值编码成一个 N 位的二进制值，我们来对经度范围[-180,180]做 N 次的二分区操作，其中 N 可以自定义。<br>我们将 116.37 做5次分区，如图所示<br><img src="https://minio.zhangyl.top/img/2024/redis_study_geo_lon.png"></p><p>纬度的范围是[-90,90]，我们将 39.86 做5次分区，如下图所示：<br><img src="https://minio.zhangyl.top/img/2024/redis_study_geo_lat.png"><br>将经纬度各自的编码进行组合，如下图所示：<br><img src="https://minio.zhangyl.top/img/2024/redis_study_geo_hash.png"></p><p>使用 GeoHash 编码后，我们相当于把整个地理空间分成了一个个方格，每个方格对应了 GeoHash 的一个分区。</p><p>比如：我们分别对经度和纬度做一次二分区，如下图所示：</p><p>这 4 个分区对应了 4 个方格，每个方格覆盖了一定范围内的经纬度值，分区越多，每个方格能覆盖到的地理空间就越小，也就越精准。我们把所有方格的编码值映射到一维空间时，相邻方格的 GeoHash 编码值基本也是接近的。<br><img src="https://minio.zhangyl.top/img/2024/redis_study_geo_hash_zone.png"><br>所以，我们使用 Sorted Set 范围查询得到的相近编码值，在实际的地理空间上，也是相邻的方格，这就可以实现 LBS 应用“搜索附近的人或物”的功能了。</p><h4 id="2-2-如何操作-GEO-类型"><a href="#2-2-如何操作-GEO-类型" class="headerlink" title="2.2 如何操作 GEO 类型"></a>2.2 如何操作 GEO 类型</h4><ul><li>GEOADD 命令：用于把一组经纬度信息和相对应的一个 ID 记录到 GEO 类型集合中；</li><li>GEORADIUS 命令：会根据输入的经纬度位置，查找以这个经纬度为中心的一定范围内的其他元素。当然，我们可以自己定义这个范围。</li></ul><h3 id="三、小结"><a href="#三、小结" class="headerlink" title="三、小结"></a>三、小结</h3><p>GEO类型可以记录经纬度形式的地理位置信息，被广泛地应用在LBS服务中。GEO本身并没有设计新的底层数据结构，而是直接使用了 Sorted Set 集合类型。</p><p>GEO 类型使用 GeoHash 编码方法实现了经纬度到 Sorted Set 中元素权重分数的转换，这其中的两个关键机制就是对二维地图做区间划分，以及对区间进行编码。一组经纬度落在某个区间后，就用区间的编码值来表示，并把编码值作为 Sorted Set 元素的权重分数。这样一来，我们就可以把经纬度保存到 Sorted Set 中，利用 Sorted Set 提供的“按权重进行有序范围查找”的特性，实现 LBS 服务中频繁使用的“搜索附近”的需求。</p><p>GEO 属于 Redis 提供的扩展数据类型。扩展数据类型有两种实现途径：一种是基于现有的数据类型，通过数据编码或是实现新的操作的方式，来实现扩展数据类型，例如基于 Sorted Set 和 GeoHash 编码实现 GEO，以及基于 String 和位操作实现 Bitmap；另一种就是开发自定义的数据类型，具体的操作是增加新数据类型的定义，实现创建和释放函数，实现新数据类型支持的命令操作。</p><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      
      
      <categories>
          
          <category> Redis学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Redis用来统计的集合</title>
      <link href="/Redis%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-Redis%E7%94%A8%E6%9D%A5%E7%BB%9F%E8%AE%A1%E7%9A%84%E9%9B%86%E5%90%88/"/>
      <url>/Redis%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-Redis%E7%94%A8%E6%9D%A5%E7%BB%9F%E8%AE%A1%E7%9A%84%E9%9B%86%E5%90%88/</url>
      
        <content type="html"><![CDATA[<h3 id="一、常用的集合统计模式"><a href="#一、常用的集合统计模式" class="headerlink" title="一、常用的集合统计模式"></a>一、常用的集合统计模式</h3><ul><li>聚合统计</li><li>排序统计</li><li>二值状态统计</li><li>基数统计</li></ul><h3 id="二、聚合统计"><a href="#二、聚合统计" class="headerlink" title="二、聚合统计"></a>二、聚合统计</h3><p>聚合统计指统计多个集合元素的聚合结果，包括：</p><ul><li>统计多个集合的共有元素（交集统计）</li><li>把两个集合相比，统计其中一个集合独有的元素（差集统计）</li><li>统计多个集合的所有元素（并集统计）</li></ul><p>当你需要对多个集合进行聚合计算时，Set类型会是一个非常不错的选择。</p><p>但是Set的差集、并集和交集的计算复杂度较高，在数据量较大的情况下，如果直接执行这些计算，会导致Redis实例阻塞。建议从主从集群中选择一个从库，让它专门负责聚合计算，或者是把数据读取到客户端，在客户端来完成聚合统计，这样就可以规避阻塞主库实例和其他从库实例的风险了。</p><p>举例：统计手机App每天的新增用户数和第二天的留存用户数</p><h3 id="三、排序统计"><a href="#三、排序统计" class="headerlink" title="三、排序统计"></a>三、排序统计</h3><p>Redis常用的集合类型有：List、Hash、Set、Sorted Set，其中List和Sorted Set属于有序集合。</p><ul><li>List是按照元素进入List的顺序进行排序的</li><li>Sorted Set可以根据元素的权重来排序，我们可以自己来决定每个元素的权重值</li></ul><p>在面对需要展示最新列表、排行榜等场景时，如果数据更新频繁或者需要分页显示，优先使用Sorted Set。</p><h3 id="四、二值状态统计"><a href="#四、二值状态统计" class="headerlink" title="四、二值状态统计"></a>四、二值状态统计</h3><p>二值状态是指集合元素的取值就只有 0 和 1 两种。比如在签到打卡的场景中，我们只要记录签到（1）或未签到（0）。</p><p>Bitmap适合这种场景，它是Redis提供的扩展数据类型。</p><p>Bitmap本身是用String类型作为底层数据结构实现的一种统计二值状态的数据类型。</p><p>String类型是会保存为二进制的字节数组，所以，Redis就把字节数组的每个 bit 位利用起来，用来表示一个元素的二值状态。可以把 Bitmap 看作是一个 bit 数组。</p><p>在记录海量数据时，Bitmap能够有效地节省内存空间。</p><h3 id="五、基数统计"><a href="#五、基数统计" class="headerlink" title="五、基数统计"></a>五、基数统计</h3><p>基数统计是指统计一个集合中不重复的元素个数。比如统计网页的UV（Unique Visitor，独立访客）。</p><p>HyperLogLog是一种用于统计基数的数据集合类型。它的最大优势在于，当集合元素数量非常多时，它计算基数所需的空间总是固定的，而且还很小。</p><p>HyperLogLog的统计规则是基于概率完成的，所以它给出的统计结果是有一定误差的，标准误差率是 0.81%。</p><p>虽然误差率不大，但是，如果你需要精确统计结果的话，最好用Set或Hash类型。</p><h3 id="六、小结"><a href="#六、小结" class="headerlink" title="六、小结"></a>六、小结</h3><p><img src="https://minio.zhangyl.top/img/2024/redis_study_12_statistics.png"></p><p>Set和Sorted Set都支持多种聚合统计，不过，对于差集计算来说，只有Set支持。Bitmap也能做多个Bitmap间的聚合计算，包括与、或和异或操作。</p><p>当需要进行排序统计时，List中的元素虽然有序，但是一旦有新元素插入，原来的元素在List中的位置就会移动，那么，按位置读取的排序结果可能就不准确了。而Sorted Set本身是按照集合元素的权重排序，可以准确地有序获取结果，所以建议优先使用它。</p><p>如果我们记录的数据只有0和1两个值的状态，Bitmap会是一个很好的选择，这主要归功于Bitmap对于一个数据只用1个bit记录，可以节省内存。</p><p>对于基数统计来说，如果集合元素量达到亿级别而且不需要精确统计时，建议使用HyperLogLog。</p><h3 id="七、每课一问"><a href="#七、每课一问" class="headerlink" title="七、每课一问"></a>七、每课一问</h3><p>其他使用场景？</p><p>使用Sorted Set可以统计一段时间内的在线用户数。</p><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      
      
      <categories>
          
          <category> Redis学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用Obsidian配合Hexo写博客</title>
      <link href="/%E5%BB%BA%E7%AB%99%E7%9B%B8%E5%85%B3-%E4%BD%BF%E7%94%A8Obsidian%E9%85%8D%E5%90%88Hexo%E5%86%99%E5%8D%9A%E5%AE%A2/"/>
      <url>/%E5%BB%BA%E7%AB%99%E7%9B%B8%E5%85%B3-%E4%BD%BF%E7%94%A8Obsidian%E9%85%8D%E5%90%88Hexo%E5%86%99%E5%8D%9A%E5%AE%A2/</url>
      
        <content type="html"><![CDATA[<p>用hexo写了二十篇左右文章的时候，发现有时候挺麻烦的。<br>刚开始写的时候，写个markdown，push一下，然后看着 GitHub Actions在那跑，还是挺兴奋的，但是时间长了，就会觉得麻烦。</p><p>前两天尝试在语雀上写了两篇，感觉在线编辑器挺好用的，但是同步hexo太麻烦了。<br>而且语雀和Notion都没有本地存储，这让我这个保守派很慌。</p><p>最终选了Obsidian，基本没啥学习成本，而且客户端的编辑器也很好用，git设置定时提交，也不用老想着提交代码了，专注于内容本身即可。</p><p>主要参考了这篇博客：<br><a href="https://zahui.fan/posts/ldle4xfe/">https://zahui.fan/posts/ldle4xfe/</a><br>还有这篇：<br><a href="https://uuanqin.top/p/d4bc55f2/index.html">https://uuanqin.top/p/d4bc55f2/index.html</a></p><p>除此之外，还做了两项内容：</p><ul><li>图片由本地改为存放在MinIO里</li><li>手机端和电脑端都装了 <code>RemptelySync</code> 插件，方便同步到手机查看，用的是坚果云的Webdav。</li></ul><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      
      
      <categories>
          
          <category> 建站相关 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo常用语法与命令</title>
      <link href="/%E5%BB%BA%E7%AB%99%E7%9B%B8%E5%85%B3-hexo%E5%B8%B8%E7%94%A8%E8%AF%AD%E6%B3%95%E4%B8%8E%E5%91%BD%E4%BB%A4/"/>
      <url>/%E5%BB%BA%E7%AB%99%E7%9B%B8%E5%85%B3-hexo%E5%B8%B8%E7%94%A8%E8%AF%AD%E6%B3%95%E4%B8%8E%E5%91%BD%E4%BB%A4/</url>
      
        <content type="html"><![CDATA[<h3 id="一、常用指令"><a href="#一、常用指令" class="headerlink" title="一、常用指令"></a>一、常用指令</h3><h4 id="1-1-新建文章"><a href="#1-1-新建文章" class="headerlink" title="1.1 新建文章"></a>1.1 新建文章</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new [layout] &lt;title&gt;</span><br></pre></td></tr></table></figure><p>e.g</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new &quot;post title with whitespace&quot;</span><br></pre></td></tr></table></figure><h4 id="1-2-在子目录下创建文章"><a href="#1-2-在子目录下创建文章" class="headerlink" title="1.2 在子目录下创建文章"></a>1.2 在子目录下创建文章</h4><p>默认新建的文件都在 <code>_posts</code>目录下，文章多了，不方便查找，可以在 <code>_posts</code>目录下建立一个目录，如 <code>dir</code>，那么就可以使用如下命令在 <code>_posts/dir</code> 目录下新建文章</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">hexo new -p dir/test -s &quot;test&quot; &quot;测试&quot;</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="built_in">test</span>是文章名称</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">测试是文章标题</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">-p, --path自定义新文章的路径</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">-s, --slug文章的 Slug，作为新文章的文件名和发布后的 URL</span></span><br></pre></td></tr></table></figure><h3 id="二、常用语法"><a href="#二、常用语法" class="headerlink" title="二、常用语法"></a>二、常用语法</h3><h4 id="2-1-站内文章跳转方法"><a href="#2-1-站内文章跳转方法" class="headerlink" title="2.1 站内文章跳转方法"></a>2.1 站内文章跳转方法</h4><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% post_link 文章标题 %&#125;</span><br></pre></td></tr></table></figure><p>e.g</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% post_link nginx常用命令 %&#125;</span><br></pre></td></tr></table></figure><a href="/nginx-nginx%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/" title="nginx常用命令">nginx常用命令</a><h4 id="2-2-单篇文章置顶"><a href="#2-2-单篇文章置顶" class="headerlink" title="2.2 单篇文章置顶"></a>2.2 单篇文章置顶</h4><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">sticky:</span> <span class="number">1</span></span><br></pre></td></tr></table></figure><h4 id="2-3-缩略"><a href="#2-3-缩略" class="headerlink" title="2.3 缩略"></a>2.3 缩略</h4><details><summary>缩略内容</summary><p>(上面空一行)这里是想要展开的实际内容。</p></details><div class="spoiler collapsed">    <div class="spoiler-title">        Answer    </div>    <div class="spoiler-content">        <p>参考答案</p>    </div></div><div class="spoiler collapsed">    <div class="spoiler-title">        Several spaces in the title    </div>    <div class="spoiler-content">        <p>content</p>    </div></div><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      
      
      <categories>
          
          <category> 建站相关 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>redirect与forward的区别</title>
      <link href="/%E5%BC%80%E5%8F%91%E7%9B%B8%E5%85%B3-redirect%E4%B8%8Eforward%E7%9A%84%E5%8C%BA%E5%88%AB/"/>
      <url>/%E5%BC%80%E5%8F%91%E7%9B%B8%E5%85%B3-redirect%E4%B8%8Eforward%E7%9A%84%E5%8C%BA%E5%88%AB/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>springboot国际化配置</title>
      <link href="/spring-springboot%E5%9B%BD%E9%99%85%E5%8C%96%E9%85%8D%E7%BD%AE/"/>
      <url>/spring-springboot%E5%9B%BD%E9%99%85%E5%8C%96%E9%85%8D%E7%BD%AE/</url>
      
        <content type="html"><![CDATA[<blockquote><p>TODO：暂时留个坑，待整理好思路再写</p></blockquote><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      
      
      <categories>
          
          <category> spring </category>
          
      </categories>
      
      
        <tags>
            
            <tag> springboot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Boss软件使用的一些小Tip</title>
      <link href="/%E9%9D%A2%E8%AF%95-Boss%E8%BD%AF%E4%BB%B6%E4%BD%BF%E7%94%A8%E7%9A%84%E4%B8%80%E4%BA%9B%E5%B0%8FTip/"/>
      <url>/%E9%9D%A2%E8%AF%95-Boss%E8%BD%AF%E4%BB%B6%E4%BD%BF%E7%94%A8%E7%9A%84%E4%B8%80%E4%BA%9B%E5%B0%8FTip/</url>
      
        <content type="html"><![CDATA[<h3 id="一、在线简历的个人描述"><a href="#一、在线简历的个人描述" class="headerlink" title="一、在线简历的个人描述"></a>一、在线简历的个人描述</h3><p>在线简历200字的个人描述，好好写，boss后台根据此内容打标签，HR会根据标签筛选。</p><h3 id="二、主动刷新"><a href="#二、主动刷新" class="headerlink" title="二、主动刷新"></a>二、主动刷新</h3><p>在线简历需要每天打磨，每天主动更新几个字，重复下简历的自动刷新。</p><h3 id="三、求职状态"><a href="#三、求职状态" class="headerlink" title="三、求职状态"></a>三、求职状态</h3><p>求职状态选择随时到岗、在职月内到岗，这样岗位会优先推荐。</p><h3 id="四、打招呼"><a href="#四、打招呼" class="headerlink" title="四、打招呼"></a>四、打招呼</h3><p>boss上的打招呼一定要真心打，别用默认的提示，太容易重复了，要自己多想几句话，体现自己的诚恳、自己的舔狗、自己的称赞之类的，可以不用自动打招呼的设置。</p><h3 id="五、简历曝光"><a href="#五、简历曝光" class="headerlink" title="五、简历曝光"></a>五、简历曝光</h3><p>有些简历天天24小时曝光也不太好，可以设置为晚上和周末隐藏，白天打开。</p><h3 id="六、匹配度"><a href="#六、匹配度" class="headerlink" title="六、匹配度"></a>六、匹配度</h3><p>简历上别写那种简称，有些HR不懂技术，就看岗位匹配度，是否有匹配的技术词、匹配的要求描述等。</p><h3 id="七、回复HR"><a href="#七、回复HR" class="headerlink" title="七、回复HR"></a>七、回复HR</h3><p>HR和你主动沟通了，一定要回复，别打个招呼就走了，就去看下一个了，HR但凡能回复你任何一个字，你就可以通过boss发送附件简历了，每天也要回看下，哪些HR等你的回复。</p><h3 id="八、搜索职位"><a href="#八、搜索职位" class="headerlink" title="八、搜索职位"></a>八、搜索职位</h3><p>boss有些职位是推荐给你的，大家不能单纯就靠着推荐的数据沟通，自己应该没事就搜索一些职位，也能发现很多没有投递的职位信息，搜索词可以是技术、业务、职位名称、过滤条件等。</p><h3 id="九、重视面试机会"><a href="#九、重视面试机会" class="headerlink" title="九、重视面试机会"></a>九、重视面试机会</h3><p>在投递附件简历前或后，职位发布人会问你是否同意转Go、是否接受出差、是否同意XXX，不太建议拒绝，应该先应承下来。毕竟不是一面就入职了，还有二面和三面，况且一面不一定能过呢。前期我们要的是面试机会，而不是公司的待遇和条件。</p><h3 id="十、主动沟通"><a href="#十、主动沟通" class="headerlink" title="十、主动沟通"></a>十、主动沟通</h3><p>对于每日自己主动沟通的职位，最好反复的翻一下。有些职位你有的时候，再回复几句，人家就会从已读不回变成回复你，不要坚信只发送一句打招呼的话就行了，每天就能上线沟通100+，完全可以多翻几次，有些上线了，再诚恳的聊一下。</p><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      
      
      <categories>
          
          <category> 面试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 面试 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>面试的一些小Tip</title>
      <link href="/%E9%9D%A2%E8%AF%95-%E9%9D%A2%E8%AF%95%E7%9A%84%E4%B8%80%E4%BA%9B%E5%B0%8FTip/"/>
      <url>/%E9%9D%A2%E8%AF%95-%E9%9D%A2%E8%AF%95%E7%9A%84%E4%B8%80%E4%BA%9B%E5%B0%8FTip/</url>
      
        <content type="html"><![CDATA[<blockquote><p>最近读了JavaGuide的一篇文章，是讲面试的，写得挺好的，链接如下：<a href="https://mp.weixin.qq.com/s/LgBOVwIAZekevqGMuw_0JA">https://mp.weixin.qq.com/s/LgBOVwIAZekevqGMuw_0JA</a><br>知识星球里作者对此总结了下，现摘录如下：</p></blockquote><h3 id="一、不要等完全准备好了再面试"><a href="#一、不要等完全准备好了再面试" class="headerlink" title="一、不要等完全准备好了再面试"></a>一、不要等完全准备好了再面试</h3><p>准备个七八成的时候，就可以尽快开始面试了，不要拖！可以先拿非目标公司练练手，查漏补缺下，提高信心。一定不要等准备完全再去面试，不太现实。就算是准备非常久，你去参加面试可能还是会有不会的问题，这很正常。准备六个月，未必效果比三个月好，人的投入，是有边界递减效应的，短时间高效率的准备，也许比拉长战线更有效果。迈出第一步很难，但只要迈出第一步之后，后续都会顺利很多。</p><h3 id="二、重视简历"><a href="#二、重视简历" class="headerlink" title="二、重视简历"></a>二、重视简历</h3><p>一定一定一定要重视简历，持续地完善自己的简历，尤其是投递简历之前和你投递很多公司没有面试之后，要多反思一下是不是简历存在问题，可以找其他人帮忙看一看。即使你已经找到了工作，定期完善自己的简历亦是对自己过往工作的总结，还是非常有必要的。</p><h3 id="三、面试遇到不会的问题很正常"><a href="#三、面试遇到不会的问题很正常" class="headerlink" title="三、面试遇到不会的问题很正常"></a>三、面试遇到不会的问题很正常</h3><p>在面试过程中，遇到不会的问题，首先要做的是快速回顾自己过往的知识，看是否能找到突破口。如果实在没有思路的话，可以真诚地向面试官要一些提示，比如谈谈你对这个问题的理解以及困惑点。一定不要觉得向面试官要提示很可耻，只要沟通没问题，这其实是很正常的。最怕的就是自己不会，还乱回答一通，这样会让面试官觉得你技术态度有问题。</p><h3 id="四、认真对待每一场面试"><a href="#四、认真对待每一场面试" class="headerlink" title="四、认真对待每一场面试"></a>四、认真对待每一场面试</h3><p>认真对待每一场面试，现在这个环境，每一个机会都是非常难得的，很多面试机会，错过了就不再有。每一场面试，都尽量拿比较好的状态去面。并且，面试之后还要进行复盘，复盘的主要目的是补自己的短板，不然你面试再多也没用。</p><h3 id="五、不要抵触八股文和基础问题"><a href="#五、不要抵触八股文和基础问题" class="headerlink" title="五、不要抵触八股文和基础问题"></a>五、不要抵触八股文和基础问题</h3><p>一定不要抱着一种思想，觉得八股文或者基础问题的考查意义不大。如果你抱着这种思想复习的话，那效果可能不会太好。实际上，个人认为还是很有意义的，八股文或者基础性的知识在日常开发中也会需要经常用到。例如，线程池这块的拒绝策略、核心参数配置什么的，如果你不了解，实际项目中使用线程池可能就用的不是很明白，容易出问题。而且，其实这种基础性的问题是最容易准备的，像各种底层原理、系统设计、场景题以及深挖你的项目这类才是最难的！</p><h3 id="六、自己整理一份八股笔记"><a href="#六、自己整理一份八股笔记" class="headerlink" title="六、自己整理一份八股笔记"></a>六、自己整理一份八股笔记</h3><p>看八股的时候，尽量自己也整理一下笔记，方便后续复习，也顺便加深印象。笔记尽量避免长篇幅的直接复制，尽量把握重点，按照自己的学习习惯去整理。</p><h3 id="七、不要幻想找到完美的工作"><a href="#七、不要幻想找到完美的工作" class="headerlink" title="七、不要幻想找到完美的工作"></a>七、不要幻想找到完美的工作</h3><p>“钱多事少干的爽”几乎是所有打工人的终极梦想，但这样的工作真的有吗？或许有，但为什么就落到你身上了呢？“钱多”、“事少”、“干的爽”三者里面能满足一个就很不错了，钱多一般事也多，事少一般钱也少，“干的爽”更是一个非常主观的因素，自己不去干一干真不知道，干了也可以调整。就好比找对象一样，是不可能找到一个完全如你心意的对象，这是不现实的！要懂得取舍，学会接受，接受不完美的工作，接受不完美的自己。</p><h3 id="八、工作和面试是不冲突的"><a href="#八、工作和面试是不冲突的" class="headerlink" title="八、工作和面试是不冲突的"></a>八、工作和面试是不冲突的</h3><p>如果确定自己要离职，那就好好准备面试。如果不离职的话，就认真对待现有的工作。另外，工作和面试，不是绝对冲突的。只要有想离开的想法，每天再忙也能抽点时间出来准备的，把刷抖音、打游戏的时间拿一部分出来准备面试，做好规划，每天时间充足就拉短周期，每天时间少就拉长周期。</p><h3 id="九、正确看待面试失败"><a href="#九、正确看待面试失败" class="headerlink" title="九、正确看待面试失败"></a>九、正确看待面试失败</h3><p>面试失败，是一件很正常的事情，“面了不一定能过，过了不一定能Offer”，我们可能因为各种原因挂掉。但是，千万不能因为失败几次，就灰心丧气，面一次总结一次，查缺补漏，面的多了，自然会面了，就能面过了。</p><h3 id="十、保持礼貌和谦虚"><a href="#十、保持礼貌和谦虚" class="headerlink" title="十、保持礼貌和谦虚"></a>十、保持礼貌和谦虚</h3><p>面试你对于面试官来说可能并不是一个好的差事，面试官的一些话你可能也不认可。不管怎样，尽量保持礼貌和谦虚，体现自己的素养。</p><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      
      
      <categories>
          
          <category> 面试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 面试 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用liquibase管理数据库变更</title>
      <link href="/spring-%E4%BD%BF%E7%94%A8liquibase%E7%AE%A1%E7%90%86%E6%95%B0%E6%8D%AE%E5%BA%93%E5%8F%98%E6%9B%B4/"/>
      <url>/spring-%E4%BD%BF%E7%94%A8liquibase%E7%AE%A1%E7%90%86%E6%95%B0%E6%8D%AE%E5%BA%93%E5%8F%98%E6%9B%B4/</url>
      
        <content type="html"><![CDATA[<blockquote><p>项目更新或升级时，总会因为缺失数据库字段导致部分功能无法正常使用。<br>liquibase可以很好的解决这个问题。网上对于其使用有很多例子，但我更喜欢的还是根据sql文件来记录变更。</p></blockquote><h3 id="一、引入依赖"><a href="#一、引入依赖" class="headerlink" title="一、引入依赖"></a>一、引入依赖</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.liquibase<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>liquibase-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="二、文件配置"><a href="#二、文件配置" class="headerlink" title="二、文件配置"></a>二、文件配置</h3><h4 id="2-1-spring配置"><a href="#2-1-spring配置" class="headerlink" title="2.1 spring配置"></a>2.1 spring配置</h4><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">liquibase:</span></span><br><span class="line">    <span class="attr">enabled:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">change-log:</span> <span class="string">sql/changelog.yml</span></span><br></pre></td></tr></table></figure><ul><li><code>enabled</code> 属性设置为true</li><li><code>change-log</code> 属性设置sql变更的配置文件</li></ul><h4 id="2-2-change-log文件配置"><a href="#2-2-change-log文件配置" class="headerlink" title="2.2 change-log文件配置"></a>2.2 change-log文件配置</h4><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">databaseChangeLog:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">changeSet:</span></span><br><span class="line">      <span class="attr">id:</span> <span class="string">init</span></span><br><span class="line">      <span class="attr">author:</span> <span class="string">zhangyuliang</span></span><br><span class="line">      <span class="attr">comment:</span> <span class="string">初始化</span></span><br><span class="line">      <span class="attr">changes:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">sqlFile:</span></span><br><span class="line">            <span class="attr">splitStatements:</span> <span class="literal">true</span></span><br><span class="line">            <span class="attr">stripComments:</span> <span class="literal">false</span></span><br><span class="line">            <span class="attr">path:</span> <span class="string">sql/init.sql</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">tagDatabase:</span></span><br><span class="line">            <span class="attr">tag:</span> <span class="number">1.0</span><span class="number">.0</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">changeSet:</span></span><br><span class="line">      <span class="attr">id:</span> <span class="string">init.data</span></span><br><span class="line">      <span class="attr">author:</span> <span class="string">zhangyuliang</span></span><br><span class="line">      <span class="attr">comment:</span> <span class="string">初始化数据</span></span><br><span class="line">      <span class="attr">changes:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">sqlFile:</span></span><br><span class="line">            <span class="attr">splitStatements:</span> <span class="literal">true</span></span><br><span class="line">            <span class="attr">stripComments:</span> <span class="literal">false</span></span><br><span class="line">            <span class="attr">path:</span> <span class="string">sql/init.data.sql</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">tagDatabase:</span></span><br><span class="line">            <span class="attr">tag:</span> <span class="number">1.0</span><span class="number">.0</span></span><br></pre></td></tr></table></figure><h4 id="2-3-change-log文件及sql文件在项目中的展示"><a href="#2-3-change-log文件及sql文件在项目中的展示" class="headerlink" title="2.3 change-log文件及sql文件在项目中的展示"></a>2.3 change-log文件及sql文件在项目中的展示</h4><p><img src="https://minio.zhangyl.top/img/2024/liqubase_idea_show.png" alt="本地图片"></p><h3 id="三、sql执行"><a href="#三、sql执行" class="headerlink" title="三、sql执行"></a>三、sql执行</h3><p>liquibase开启后，会在项目启动的时候执行，注意sql文件不要报错，否则会启动失败。<br>另外，sql文件建立后千万不要修改文件，否则liquibase会认为是相同id的sql变更，会重新执行，而 <code>changeSet</code> 的id相同会执行失败，导致启动失败。<br>建议以追加sql文件的形式来进行数据库变更，任何字段的修改都遵循这一原则，这样即使不同版本的项目进行更新时，都能根据 <code>changeSet</code> 补全sql变更。</p><p><img src="https://minio.zhangyl.top/img/2024/liqubase_data_source.png" alt="本地图片"></p><p>sql执行成功后，数据库会多两张表，<code>DATABASECHANGELOG</code> 和 <code>DATABASECHANGELOGLOCK</code>。<br><code>DATABASECHANGELOG</code>表里记录了sql的变更日志。<br>如果确实要修改sql文件，则需要在数据库里删除 ID &#x3D; <code>changeSet</code> 的记录。</p><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      
      
      <categories>
          
          <category> spring </category>
          
      </categories>
      
      
        <tags>
            
            <tag> springboot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>git commit 代码提交规范</title>
      <link href="/%E5%BC%80%E5%8F%91%E7%9B%B8%E5%85%B3-git-commit-%E4%BB%A3%E7%A0%81%E6%8F%90%E4%BA%A4%E8%A7%84%E8%8C%83/"/>
      <url>/%E5%BC%80%E5%8F%91%E7%9B%B8%E5%85%B3-git-commit-%E4%BB%A3%E7%A0%81%E6%8F%90%E4%BA%A4%E8%A7%84%E8%8C%83/</url>
      
        <content type="html"><![CDATA[<blockquote><p>TODO:暂时留个坑，待整理好思路再写</p></blockquote><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      
      
      <categories>
          
          <category> 开发相关 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>smart-doc使用注释生成接口文档</title>
      <link href="/spring-smart-doc%E4%BD%BF%E7%94%A8%E6%B3%A8%E9%87%8A%E7%94%9F%E6%88%90%E6%8E%A5%E5%8F%A3%E6%96%87%E6%A1%A3/"/>
      <url>/spring-smart-doc%E4%BD%BF%E7%94%A8%E6%B3%A8%E9%87%8A%E7%94%9F%E6%88%90%E6%8E%A5%E5%8F%A3%E6%96%87%E6%A1%A3/</url>
      
        <content type="html"><![CDATA[<h3 id="一、写在前面"><a href="#一、写在前面" class="headerlink" title="一、写在前面"></a>一、写在前面</h3><p>程序员最讨厌的事情就是写文档，尤其是接口文档。之前也用过swagger，但是感觉每个类、方法、字段都要加注解，实在是太麻烦了，最近发现smart-doc很好的解决了这个问题，因为它是无侵入式的，只要正常写Java注释，它就能帮你生成各种格式的接口文档。<br>官方文档地址：<a href="https://smart-doc-group.github.io/#/zh-cn/">https://smart-doc-group.github.io/#/zh-cn/</a></p><h3 id="二、maven插件配置"><a href="#二、maven插件配置" class="headerlink" title="二、maven插件配置"></a>二、maven插件配置</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.github.shalousun<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>smart-doc-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.6.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">executions</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">execution</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">phase</span>&gt;</span>compile<span class="tag">&lt;/<span class="name">phase</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">goals</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">goal</span>&gt;</span>html<span class="tag">&lt;/<span class="name">goal</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">goals</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">execution</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">executions</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">configFile</span>&gt;</span>./src/main/resources/smart-doc.json<span class="tag">&lt;/<span class="name">configFile</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span>          </span><br><span class="line"><span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br></pre></td></tr></table></figure><p>这里生成的格式为html，配置文件目录为 <code>./src/main/resources/smart-doc.json</code></p><h3 id="三、配置文件"><a href="#三、配置文件" class="headerlink" title="三、配置文件"></a>三、配置文件</h3><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;serverUrl&quot;</span><span class="punctuation">:</span> <span class="string">&quot;http://127.0.0.1:8236&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;pathPrefix&quot;</span><span class="punctuation">:</span> <span class="string">&quot;/&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;isStrict&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;allInOne&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;outPath&quot;</span><span class="punctuation">:</span> <span class="string">&quot;target/classes/static/doc&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;coverOld&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;createDebugPage&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;style&quot;</span><span class="punctuation">:</span><span class="string">&quot;atelier_cave-light&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;allInOneDocFileName&quot;</span><span class="punctuation">:</span><span class="string">&quot;index.html&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;errorCodeDictionaries&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;title&quot;</span><span class="punctuation">:</span> <span class="string">&quot;响应码&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;enumClassName&quot;</span><span class="punctuation">:</span> <span class="string">&quot;com.aizz.mindmingle.common.ResponseCode&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;codeField&quot;</span><span class="punctuation">:</span> <span class="string">&quot;code&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;descField&quot;</span><span class="punctuation">:</span> <span class="string">&quot;desc&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;revisionLogs&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;version&quot;</span><span class="punctuation">:</span> <span class="string">&quot;1.0&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;revisionTime&quot;</span><span class="punctuation">:</span> <span class="string">&quot;2023-11-24 10:30&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;status&quot;</span><span class="punctuation">:</span> <span class="string">&quot;create&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;author&quot;</span><span class="punctuation">:</span> <span class="string">&quot;zhangyuliang&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;remarks&quot;</span><span class="punctuation">:</span> <span class="string">&quot;创建&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>这里配置了接口文档的生成目录和响应码等信息，还可以配置静态常量和数据字典，具体可参考官方文档。</p><h3 id="四、生成接口文档"><a href="#四、生成接口文档" class="headerlink" title="四、生成接口文档"></a>四、生成接口文档</h3><p>正常 <code>mvn clean package</code> 可以生成接口文档<br>也可通过命令生成<br><img src="https://minio.zhangyl.top/img/2024/smart-doc_mvn.png" alt="本地图片"></p><p>下图为 <code>smart-doc.json</code> 配置文件和生成后的接口文档在项目中的展示<br><img src="https://minio.zhangyl.top/img/2024/smart-doc_idea_show.png" alt="本地图片"></p><h3 id="五、文档展示"><a href="#五、文档展示" class="headerlink" title="五、文档展示"></a>五、文档展示</h3><h4 id="5-1-本地"><a href="#5-1-本地" class="headerlink" title="5.1 本地"></a>5.1 本地</h4><p>本地直接打开html文件即可<br><img src="https://minio.zhangyl.top/img/2024/smart-doc_local_html.png" alt="本地图片"></p><h4 id="5-2-服务器"><a href="#5-2-服务器" class="headerlink" title="5.2 服务器"></a>5.2 服务器</h4><p>远端访问格式为——ip:端口&#x2F;context-path&#x2F;doc&#x2F;index.html<br><img src="https://minio.zhangyl.top/img/2024/smart-doc_server_html.png" alt="本地图片"></p><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      
      
      <categories>
          
          <category> spring </category>
          
      </categories>
      
      
        <tags>
            
            <tag> springboot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>springboot使用jasypt加密解密</title>
      <link href="/spring-springboot%E4%BD%BF%E7%94%A8jasypt%E5%8A%A0%E5%AF%86%E8%A7%A3%E5%AF%86/"/>
      <url>/spring-springboot%E4%BD%BF%E7%94%A8jasypt%E5%8A%A0%E5%AF%86%E8%A7%A3%E5%AF%86/</url>
      
        <content type="html"><![CDATA[<blockquote><p>项目上有些配置需要加密，比如数据库的密码，jasypt可以实现加密解密功能。</p></blockquote><h3 id="一、引入依赖"><a href="#一、引入依赖" class="headerlink" title="一、引入依赖"></a>一、引入依赖</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.github.ulisesbocchio<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jasypt-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.0.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="二、配置文件"><a href="#二、配置文件" class="headerlink" title="二、配置文件"></a>二、配置文件</h3><h4 id="加密前"><a href="#加密前" class="headerlink" title="加密前"></a>加密前</h4><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">password:</span> <span class="number">123456</span></span><br></pre></td></tr></table></figure><h4 id="加密后"><a href="#加密后" class="headerlink" title="加密后"></a>加密后</h4><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">ENC(slZULLmbudl1M6/43iq6y8100XQ4DlqnxtToLxtUODxqlsCm02M2ujbx6ayy4j92)</span></span><br></pre></td></tr></table></figure><h3 id="三、加密"><a href="#三、加密" class="headerlink" title="三、加密"></a>三、加密</h3><p>这里以ASE256为例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 指定算法</span></span><br><span class="line"><span class="type">AES256TextEncryptor</span> <span class="variable">textEncryptor</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AES256TextEncryptor</span>();</span><br><span class="line"><span class="comment">// 指定秘钥</span></span><br><span class="line">textEncryptor.setPassword(<span class="string">&quot;test&quot;</span>);</span><br><span class="line"><span class="comment">// 生成加密数据</span></span><br><span class="line"><span class="type">String</span> <span class="variable">encrypt</span> <span class="operator">=</span> textEncryptor.encrypt(<span class="string">&quot;123456&quot;</span>);</span><br><span class="line">System.out.println(encrypt);</span><br><span class="line"><span class="comment">// slZULLmbudl1M6/43iq6y8100XQ4DlqnxtToLxtUODxqlsCm02M2ujbx6ayy4j92</span></span><br></pre></td></tr></table></figure><h3 id="四、解密"><a href="#四、解密" class="headerlink" title="四、解密"></a>四、解密</h3><h4 id="4-1-IDE设置"><a href="#4-1-IDE设置" class="headerlink" title="4.1 IDE设置"></a>4.1 IDE设置</h4><p>vm options加入如下代码:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-Djasypt.encryptor.password=test</span><br></pre></td></tr></table></figure><p><img src="https://minio.zhangyl.top/img/2024/jasypt_idea_config.png" alt="本地图片"></p><h4 id="4-2-运行"><a href="#4-2-运行" class="headerlink" title="4.2 运行"></a>4.2 运行</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java -jar -Djasypt.encryptor.password=test xxx.jar</span><br></pre></td></tr></table></figure><h4 id="4-3-测试类"><a href="#4-3-测试类" class="headerlink" title="4.3 测试类"></a>4.3 测试类</h4><p>对于需要单元测试的类，只要在类上加 <code>@Import(EnableEncryptableProperties.class)</code> 注解即可</p><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      
      
      <categories>
          
          <category> spring </category>
          
      </categories>
      
      
        <tags>
            
            <tag> springboot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>springboot鉴权</title>
      <link href="/spring-springboot%E9%89%B4%E6%9D%83/"/>
      <url>/spring-springboot%E9%89%B4%E6%9D%83/</url>
      
        <content type="html"><![CDATA[<blockquote><p>TODO:暂时留个坑，待整理好思路再写</p></blockquote><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      
      
      <categories>
          
          <category> spring </category>
          
      </categories>
      
      
        <tags>
            
            <tag> spring </tag>
            
            <tag> springboot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>nginx常用命令</title>
      <link href="/nginx-nginx%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"/>
      <url>/nginx-nginx%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</url>
      
        <content type="html"><![CDATA[<h3 id="一、重启"><a href="#一、重启" class="headerlink" title="一、重启"></a>一、重启</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/usr/nginx/sbin/nginx -s reload</span><br></pre></td></tr></table></figure><h3 id="二、判断配置文件是否正确"><a href="#二、判断配置文件是否正确" class="headerlink" title="二、判断配置文件是否正确"></a>二、判断配置文件是否正确</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nginx -t -c /usr/nginx/conf/nginx.conf</span><br></pre></td></tr></table></figure><p>或者</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/usr/nginx/sbin/nginx -t</span><br></pre></td></tr></table></figure><h3 id="三、代理配置"><a href="#三、代理配置" class="headerlink" title="三、代理配置"></a>三、代理配置</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    listen 80;</span><br><span class="line">    server_name yourdomain.com;</span><br><span class="line"></span><br><span class="line">    location / &#123;</span><br><span class="line">        proxy_pass http://localhost:8080;  # Spring Boot 应用的地址</span><br><span class="line">        proxy_set_header Host $host;</span><br><span class="line">        proxy_set_header X-Real-IP $remote_addr;</span><br><span class="line">        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;</span><br><span class="line">        proxy_set_header X-Forwarded-Proto $scheme;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>proxy_set_header可以代理访问权限和请求头，如后端加了白名单，此处配置就很必要</p><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      
      
      <categories>
          
          <category> nginx </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
            <tag> nginx </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>自定义校验注解</title>
      <link href="/spring-%E8%87%AA%E5%AE%9A%E4%B9%89%E6%A0%A1%E9%AA%8C%E6%B3%A8%E8%A7%A3/"/>
      <url>/spring-%E8%87%AA%E5%AE%9A%E4%B9%89%E6%A0%A1%E9%AA%8C%E6%B3%A8%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<h3 id="一、背景"><a href="#一、背景" class="headerlink" title="一、背景"></a>一、背景</h3><p>近期在用 <code>javax.validation</code> 做校验的时候发现没有对 <code>BigDecimal</code> 类型进行校验的注解，便自己动手写了一个。</p><h3 id="二、定义注解及校验类"><a href="#二、定义注解及校验类" class="headerlink" title="二、定义注解及校验类"></a>二、定义注解及校验类</h3><h4 id="2-1-注解类"><a href="#2-1-注解类" class="headerlink" title="2.1 注解类"></a>2.1 注解类</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="meta">@Constraint(validatedBy = BigDecimalRangeValidator.class)</span></span><br><span class="line"><span class="meta">@Target(ElementType.FIELD)</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> BigDecimalRange &#123;</span><br><span class="line">    <span class="type">double</span> <span class="title function_">min</span><span class="params">()</span> <span class="keyword">default</span> Double.MIN_VALUE;</span><br><span class="line"></span><br><span class="line">    <span class="type">double</span> <span class="title function_">max</span><span class="params">()</span> <span class="keyword">default</span> Double.MAX_VALUE;</span><br><span class="line"></span><br><span class="line">    String <span class="title function_">message</span><span class="params">()</span> <span class="keyword">default</span> <span class="string">&quot;Validation failed&quot;</span>;</span><br><span class="line"></span><br><span class="line">    Class&lt;?&gt;[] groups() <span class="keyword">default</span> &#123;&#125;;</span><br><span class="line"></span><br><span class="line">    Class&lt;? <span class="keyword">extends</span> <span class="title class_">Payload</span>&gt;[] payload() <span class="keyword">default</span> &#123;&#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-2-校验类"><a href="#2-2-校验类" class="headerlink" title="2.2 校验类"></a>2.2 校验类</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BigDecimalRangeValidator</span> <span class="keyword">implements</span> <span class="title class_">ConstraintValidator</span>&lt;BigDecimalRange, BigDecimal&gt; &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> BigDecimal minValue;</span><br><span class="line">    <span class="keyword">private</span> BigDecimal maxValue;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">initialize</span><span class="params">(BigDecimalRange constraintAnnotation)</span> &#123;</span><br><span class="line">        minValue = <span class="keyword">new</span> <span class="title class_">BigDecimal</span>(constraintAnnotation.min());</span><br><span class="line">        maxValue = <span class="keyword">new</span> <span class="title class_">BigDecimal</span>(constraintAnnotation.max());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isValid</span><span class="params">(BigDecimal value, ConstraintValidatorContext constraintValidatorContext)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (value == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> value.compareTo(minValue) &gt;= <span class="number">0</span> &amp;&amp; value.compareTo(maxValue) &lt;= <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="三、使用注解"><a href="#三、使用注解" class="headerlink" title="三、使用注解"></a>三、使用注解</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Example</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 测试字段</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@BigDecimalRange(min = 0.1, max = 9.9, message = &quot;测试字段的范围为0.1~9.9&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> BigDecimal testValue;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      
      
      <categories>
          
          <category> spring </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> spring </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>springboot基于ldap协议实现用户认证</title>
      <link href="/spring-springboot%E5%9F%BA%E4%BA%8Eldap%E5%8D%8F%E8%AE%AE%E5%AE%9E%E7%8E%B0%E7%94%A8%E6%88%B7%E8%AE%A4%E8%AF%81/"/>
      <url>/spring-springboot%E5%9F%BA%E4%BA%8Eldap%E5%8D%8F%E8%AE%AE%E5%AE%9E%E7%8E%B0%E7%94%A8%E6%88%B7%E8%AE%A4%E8%AF%81/</url>
      
        <content type="html"><![CDATA[<h3 id="一、引入spring-boot-starter-data-ldap依赖"><a href="#一、引入spring-boot-starter-data-ldap依赖" class="headerlink" title="一、引入spring-boot-starter-data-ldap依赖"></a>一、引入<code>spring-boot-starter-data-ldap</code>依赖</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-ldap<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="二、配置文件"><a href="#二、配置文件" class="headerlink" title="二、配置文件"></a>二、配置文件</h3><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">ldap:</span></span><br><span class="line">    <span class="attr">urls:</span> <span class="string">ldap://xx.xx.xx.xx:389</span></span><br><span class="line">    <span class="attr">base:</span> <span class="string">OU=xxx,DC=xxx,DC=com</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">xxx@xx.com</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">xxx</span></span><br></pre></td></tr></table></figure><p>在配置文件里填入地址、baseDN、用户名和密码信息</p><h3 id="三、创建用户对象类"><a href="#三、创建用户对象类" class="headerlink" title="三、创建用户对象类"></a>三、创建用户对象类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.annotation.JSONField;</span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"><span class="keyword">import</span> org.springframework.ldap.odm.annotations.Attribute;</span><br><span class="line"><span class="keyword">import</span> org.springframework.ldap.odm.annotations.Entry;</span><br><span class="line"><span class="keyword">import</span> org.springframework.ldap.odm.annotations.Id;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.naming.Name;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * ldap协议person类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@Entry(objectClasses = &quot;person&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 唯一标识</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Id</span></span><br><span class="line">    <span class="meta">@JSONField(serialize = false)</span></span><br><span class="line">    <span class="keyword">private</span> Name distinguishedName;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 登录账号</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Attribute(name = &quot;sAMAccountName&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String loginName;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 用户姓名</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Attribute(name = &quot;cn&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 权限码</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Attribute(name = &quot;userAccountControl&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Integer userAccountControl;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 是否删除</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> Boolean isDelete;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="四、用户登录"><a href="#四、用户登录" class="headerlink" title="四、用户登录"></a>四、用户登录</h3><h4 id="4-1-示例代码"><a href="#4-1-示例代码" class="headerlink" title="4.1 示例代码"></a>4.1 示例代码</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.ldap.core.LdapTemplate;</span><br><span class="line"><span class="keyword">import</span> org.springframework.ldap.filter.EqualsFilter;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> LdapTemplate ldapTemplate;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">LDAP_USERNAME_ATTR</span> <span class="operator">=</span> <span class="string">&quot;sAMAccountName&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">login</span><span class="params">(String userName, String password)</span> &#123;</span><br><span class="line">    <span class="type">EqualsFilter</span> <span class="variable">filter</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">EqualsFilter</span>(LDAP_USERNAME_ATTR, userName);</span><br><span class="line">    <span class="type">boolean</span> <span class="variable">result</span> <span class="operator">=</span> ldapTemplate.authenticate(<span class="string">&quot;&quot;</span>, filter.toString(), password);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>基本逻辑就是调用ldapTemplate的authenticate方法来进行认证。</p><h4 id="4-2-完整代码"><a href="#4-2-完整代码" class="headerlink" title="4.2 完整代码"></a>4.2 完整代码</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.cowave.meter.admin.user.service.impl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> cn.hutool.core.util.IdUtil;</span><br><span class="line"><span class="keyword">import</span> com.cowave.commons.framework.access.Access;</span><br><span class="line"><span class="keyword">import</span> com.cowave.commons.framework.filter.security.AccessToken;</span><br><span class="line"><span class="keyword">import</span> com.cowave.commons.framework.filter.security.TokenService;</span><br><span class="line"><span class="keyword">import</span> com.cowave.commons.framework.support.mybatis.page.PageDO;</span><br><span class="line"><span class="keyword">import</span> com.cowave.commons.framework.util.Asserts;</span><br><span class="line"><span class="keyword">import</span> com.cowave.commons.framework.util.AssertsException;</span><br><span class="line"><span class="keyword">import</span> com.cowave.meter.admin.user.dao.SysDeptDao;</span><br><span class="line"><span class="keyword">import</span> com.cowave.meter.admin.user.dao.SysRoleDao;</span><br><span class="line"><span class="keyword">import</span> com.cowave.meter.admin.user.dao.SysUserDao;</span><br><span class="line"><span class="keyword">import</span> com.cowave.meter.admin.user.pojo.Person;</span><br><span class="line"><span class="keyword">import</span> com.cowave.meter.admin.user.pojo.SysDept;</span><br><span class="line"><span class="keyword">import</span> com.cowave.meter.admin.user.pojo.SysRole;</span><br><span class="line"><span class="keyword">import</span> com.cowave.meter.admin.user.pojo.SysUser;</span><br><span class="line"><span class="keyword">import</span> com.cowave.meter.admin.user.service.LdapService;</span><br><span class="line"><span class="keyword">import</span> com.cowave.meter.admin.user.service.SysUserService;</span><br><span class="line"><span class="keyword">import</span> lombok.RequiredArgsConstructor;</span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.springframework.ldap.core.LdapTemplate;</span><br><span class="line"><span class="keyword">import</span> org.springframework.ldap.filter.EqualsFilter;</span><br><span class="line"><span class="keyword">import</span> org.springframework.ldap.query.LdapQueryBuilder;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"><span class="keyword">import</span> org.springframework.util.ObjectUtils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="meta">@RequiredArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LdapServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">LdapService</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> LdapTemplate ldapTemplate;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> TokenService tokenService;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> SysUserDao sysUserDao;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> SysUserService userService;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> SysDeptDao sysDeptDao;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> SysRoleDao sysRoleDao;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">BCryptPasswordEncoder</span> <span class="variable">bcryptPasswordEncoder</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BCryptPasswordEncoder</span>();</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">LDAP_USERNAME_ATTR</span> <span class="operator">=</span> <span class="string">&quot;sAMAccountName&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 域账号登录</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> userName</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> password</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> AccessToken <span class="title function_">domainLogin</span><span class="params">(String userName, String password)</span> &#123;</span><br><span class="line">        <span class="type">EqualsFilter</span> <span class="variable">filter</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">EqualsFilter</span>(LDAP_USERNAME_ATTR, userName);</span><br><span class="line">        <span class="type">boolean</span> <span class="variable">authenticate</span> <span class="operator">=</span> ldapTemplate.authenticate(<span class="string">&quot;&quot;</span>, filter.toString(), password);</span><br><span class="line">        <span class="keyword">if</span> (!authenticate) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">AssertsException</span>(<span class="string">&quot;auth.failed&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">Boolean</span> <span class="variable">domainUserAccountExist</span> <span class="operator">=</span> sysUserDao.domainUserAccountExist(userName);</span><br><span class="line">        <span class="keyword">if</span> (Boolean.FALSE.equals(domainUserAccountExist)) &#123;</span><br><span class="line">            <span class="type">LdapQueryBuilder</span> <span class="variable">ldapQuery</span> <span class="operator">=</span> LdapQueryBuilder.query();</span><br><span class="line">            ldapQuery.filter(filter);</span><br><span class="line">            <span class="type">Person</span> <span class="variable">person</span> <span class="operator">=</span> ldapTemplate.findOne(ldapQuery, Person.class);</span><br><span class="line">            <span class="keyword">if</span> (ObjectUtils.isEmpty(person)) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">AssertsException</span>(<span class="string">&quot;user.notexist&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="type">SysUser</span> <span class="variable">sysUser</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SysUser</span>();</span><br><span class="line">            sysUser.setUserAccount(userName);</span><br><span class="line">            Asserts.isFalse(userService.userAccountExist(sysUser), <span class="string">&quot;账户名已存在&quot;</span>);</span><br><span class="line">            sysUser.setUserName(person.getName());</span><br><span class="line">            sysUser.setUserPasswd(bcryptPasswordEncoder.encode(password));</span><br><span class="line">            sysUser.setDomainUserAccount(userName);</span><br><span class="line">            <span class="comment">// 设置部门</span></span><br><span class="line">            <span class="type">SysDept</span> <span class="variable">sysDept</span> <span class="operator">=</span> sysDeptDao.queryRootDept();</span><br><span class="line">            <span class="keyword">if</span> (!ObjectUtils.isEmpty(sysDept)) &#123;</span><br><span class="line">                sysUser.setDeptId(sysDept.getDeptId());</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 设置角色</span></span><br><span class="line">            PageDO&lt;SysRole&gt; sysRolePageDO = sysRoleDao.queryPage(<span class="literal">null</span>, <span class="string">&quot;2&quot;</span>, <span class="number">1</span>, <span class="number">1</span>);</span><br><span class="line">            <span class="keyword">if</span> (sysRolePageDO.getPages() &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="type">SysRole</span> <span class="variable">sysRole</span> <span class="operator">=</span> sysRolePageDO.getList().get(<span class="number">0</span>);</span><br><span class="line">                sysUser.setRoleId(sysRole.getRoleId());</span><br><span class="line">            &#125;</span><br><span class="line">            userService.saveOrUpdate(sysUser);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">SysUser</span> <span class="variable">sysUser</span> <span class="operator">=</span> sysUserDao.getByDomainUserAccount(userName);</span><br><span class="line">        <span class="type">String</span> <span class="variable">userId</span> <span class="operator">=</span> sysUser.getUserId();</span><br><span class="line">        <span class="type">AccessToken</span> <span class="variable">accessToken</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AccessToken</span>();</span><br><span class="line">        accessToken.setType(AccessToken.TYPE_USER);</span><br><span class="line"></span><br><span class="line">        accessToken.setUserCode(userId);</span><br><span class="line">        accessToken.setUsername(sysUser.getUserAccount());</span><br><span class="line">        accessToken.setUserNick(sysUser.getUserName());</span><br><span class="line">        accessToken.setDeptCode(sysUser.getDeptId());</span><br><span class="line">        accessToken.setRoles(List.of(sysUser.getRoleId()));</span><br><span class="line"></span><br><span class="line">        accessToken.setLoginIp(Access.ip());</span><br><span class="line">        accessToken.setLoginTime(Access.time());</span><br><span class="line">        accessToken.setAccessIp(Access.ip());</span><br><span class="line">        accessToken.setAccessTime(Access.time());</span><br><span class="line">        accessToken.setId(IdUtil.fastSimpleUUID());</span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">token</span> <span class="operator">=</span> tokenService.newToken(accessToken);</span><br><span class="line">        accessToken.setToken(token);</span><br><span class="line">        <span class="keyword">return</span> accessToken;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="4-3-判断用户是否禁用"><a href="#4-3-判断用户是否禁用" class="headerlink" title="4.3 判断用户是否禁用"></a>4.3 判断用户是否禁用</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 根据AD域的userAccountControl属性判断用户是否禁用</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> userAccContr</span></span><br><span class="line"><span class="comment">* <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">private</span> Boolean <span class="title function_">getUserDelete</span><span class="params">(<span class="type">int</span> userAccContr)</span> &#123;</span><br><span class="line">    <span class="comment">//TRUSTED_TO_AUTH_FOR_DELEGATION - 允许该帐户进行委派</span></span><br><span class="line">    <span class="keyword">if</span> (userAccContr &gt;= <span class="number">16777216</span>) &#123;</span><br><span class="line">        userAccContr = userAccContr - <span class="number">16777216</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//PASSWORD_EXPIRED - (Windows 2000/Windows Server 2003) 用户的密码已过期</span></span><br><span class="line">    <span class="keyword">if</span> (userAccContr &gt;= <span class="number">8388608</span>) &#123;</span><br><span class="line">        userAccContr = userAccContr - <span class="number">8388608</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//DONT_REQ_PREAUTH</span></span><br><span class="line">    <span class="keyword">if</span> (userAccContr &gt;= <span class="number">4194304</span>) &#123;</span><br><span class="line">        userAccContr = userAccContr - <span class="number">4194304</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//USE_DES_KEY_ONLY - (Windows 2000/Windows Server 2003) 将此用户限制为仅使用数据加密标准 (DES) 加密类型的密钥</span></span><br><span class="line">    <span class="keyword">if</span> (userAccContr &gt;= <span class="number">2097152</span>) &#123;</span><br><span class="line">        userAccContr = userAccContr - <span class="number">2097152</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//NOT_DELEGATED - 设置此标志后，即使将服务帐户设置为信任其进行 Kerberos 委派，也不会将用户的安全上下文委派给该服务</span></span><br><span class="line">    <span class="keyword">if</span> (userAccContr &gt;= <span class="number">1048576</span>) &#123;</span><br><span class="line">        userAccContr = userAccContr - <span class="number">1048576</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//TRUSTED_FOR_DELEGATION - 设置此标志后，将信任运行服务的服务帐户（用户或计算机帐户）进行 Kerberos 委派。</span></span><br><span class="line">    <span class="comment">// 任何此类服务都可模拟请求该服务的客户端。若要允许服务进行 Kerberos 委派，必须在服务帐户的 userAccountControl 属性上设置此标志</span></span><br><span class="line">    <span class="keyword">if</span> (userAccContr &gt;= <span class="number">524288</span>) &#123;</span><br><span class="line">        userAccContr = userAccContr - <span class="number">524288</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//SMARTCARD_REQUIRED - 设置此标志后，将强制用户使用智能卡登录</span></span><br><span class="line">    <span class="keyword">if</span> (userAccContr &gt;= <span class="number">262144</span>) &#123;</span><br><span class="line">        userAccContr = userAccContr - <span class="number">262144</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//MNS_LOGON_ACCOUNT - 这是 MNS 登录帐户</span></span><br><span class="line">    <span class="keyword">if</span> (userAccContr &gt;= <span class="number">131072</span>) &#123;</span><br><span class="line">        userAccContr = userAccContr - <span class="number">131072</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//DONT_EXPIRE_PASSWORD-密码永不过期</span></span><br><span class="line">    <span class="keyword">if</span> (userAccContr &gt;= <span class="number">65536</span>) &#123;</span><br><span class="line">        userAccContr = userAccContr - <span class="number">65536</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//MNS_LOGON_ACCOUNT - 这是 MNS 登录帐户</span></span><br><span class="line">    <span class="keyword">if</span> (userAccContr &gt;= <span class="number">2097152</span>) &#123;</span><br><span class="line">        userAccContr = userAccContr - <span class="number">2097152</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//SERVER_TRUST_ACCOUNT - 这是属于该域的域控制器的计算机帐户</span></span><br><span class="line">    <span class="keyword">if</span> (userAccContr &gt;= <span class="number">8192</span>) &#123;</span><br><span class="line">        userAccContr = userAccContr - <span class="number">8192</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//WORKSTATION_TRUST_ACCOUNT - 这是运行 Microsoft Windows NT 4.0 Workstation、Microsoft Windows NT 4.0 Server、</span></span><br><span class="line">    <span class="comment">// Microsoft Windows 2000 Professional 或 Windows 2000 Server 并且属于该域的计算机的计算机帐户</span></span><br><span class="line">    <span class="keyword">if</span> (userAccContr &gt;= <span class="number">4096</span>) &#123;</span><br><span class="line">        userAccContr = userAccContr - <span class="number">4096</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//INTERDOMAIN_TRUST_ACCOUNT - 对于信任其他域的系统域，此属性允许信任该系统域的帐户</span></span><br><span class="line">    <span class="keyword">if</span> (userAccContr &gt;= <span class="number">2048</span>) &#123;</span><br><span class="line">        userAccContr = userAccContr - <span class="number">2048</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//NORMAL_ACCOUNT - 这是表示典型用户的默认帐户类型</span></span><br><span class="line">    <span class="keyword">if</span> (userAccContr &gt;= <span class="number">512</span>) &#123;</span><br><span class="line">        userAccContr = userAccContr - <span class="number">512</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//TEMP_DUPLICATE_ACCOUNT - 此帐户属于其主帐户位于另一个域中的用户。此帐户为用户提供访问该域的权限，</span></span><br><span class="line">    <span class="comment">// 但不提供访问信任该域的任何域的权限。有时将这种帐户称为“本地用户帐户”</span></span><br><span class="line">    <span class="keyword">if</span> (userAccContr &gt;= <span class="number">256</span>) &#123;</span><br><span class="line">        userAccContr = userAccContr - <span class="number">256</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//ENCRYPTED_TEXT_PASSWORD_ALLOWED - 用户可以发送加密的密码</span></span><br><span class="line">    <span class="keyword">if</span> (userAccContr &gt;= <span class="number">128</span>) &#123;</span><br><span class="line">        userAccContr = userAccContr - <span class="number">128</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//PASSWD_CANT_CHANGE - 用户不能更改密码。可以读取此标志，但不能直接设置它</span></span><br><span class="line">    <span class="keyword">if</span> (userAccContr &gt;= <span class="number">64</span>) &#123;</span><br><span class="line">        userAccContr = userAccContr - <span class="number">64</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//PASSWD_NOTREQD - 不需要密码</span></span><br><span class="line">    <span class="keyword">if</span> (userAccContr &gt;= <span class="number">32</span>) &#123;</span><br><span class="line">        userAccContr = userAccContr - <span class="number">32</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//LOCKOUT</span></span><br><span class="line">    <span class="keyword">if</span> (userAccContr &gt;= <span class="number">16</span>) &#123;</span><br><span class="line">        userAccContr = userAccContr - <span class="number">16</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//HOMEDIR_REQUIRED - 需要主文件夹</span></span><br><span class="line">    <span class="keyword">if</span> (userAccContr &gt;= <span class="number">8</span>) &#123;</span><br><span class="line">        userAccContr = userAccContr - <span class="number">8</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (userAccContr &gt;= <span class="number">2</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      
      
      <categories>
          
          <category> spring </category>
          
      </categories>
      
      
        <tags>
            
            <tag> springboot </tag>
            
            <tag> ldap </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Jira配置Ldap服务器进行用户认证</title>
      <link href="/%E5%BC%80%E5%8F%91%E7%9B%B8%E5%85%B3-Jira%E9%85%8D%E7%BD%AELdap%E6%9C%8D%E5%8A%A1%E5%99%A8%E8%BF%9B%E8%A1%8C%E7%94%A8%E6%88%B7%E8%AE%A4%E8%AF%81/"/>
      <url>/%E5%BC%80%E5%8F%91%E7%9B%B8%E5%85%B3-Jira%E9%85%8D%E7%BD%AELdap%E6%9C%8D%E5%8A%A1%E5%99%A8%E8%BF%9B%E8%A1%8C%E7%94%A8%E6%88%B7%E8%AE%A4%E8%AF%81/</url>
      
        <content type="html"><![CDATA[<blockquote><p>Jira需要通过公司的域账号来登录，配置过程中踩了点坑，记录一下。</p></blockquote><h3 id="一、配置步骤"><a href="#一、配置步骤" class="headerlink" title="一、配置步骤"></a>一、配置步骤</h3><h4 id="1-1-添加LDAP认证"><a href="#1-1-添加LDAP认证" class="headerlink" title="1.1 添加LDAP认证"></a>1.1 添加LDAP认证</h4><p>用管理员账户登录Jira页面，在配置页面，找到“用户管理” -&gt; 点击“用户目录” -&gt; 点击“添加目录” -&gt; 选择“内部LDAP认证”<br><img src="https://minio.zhangyl.top/img/2024/jira_ldap_add.png" alt="本地图片"></p><h4 id="1-2-配置服务器"><a href="#1-2-配置服务器" class="headerlink" title="1.2 配置服务器"></a>1.2 配置服务器</h4><p>目录类型选择“OpenLDAP”，填写主机名、端口、用户名及密码，提前创建组，并在“默认组成员”输入框内填写该组名，防止域账户没有权限登录Jira系统<br><img src="https://minio.zhangyl.top/img/2024/jira_ldap_server.png" alt="本地图片"></p><h4 id="1-3-设置基本DN和用户名属性"><a href="#1-3-设置基本DN和用户名属性" class="headerlink" title="1.3 设置基本DN和用户名属性"></a>1.3 设置基本DN和用户名属性</h4><p>这里要看ldap服务器的具体值，我这个版本用户名属性的默认值是cn，但ldap服务器的是sAMAccountName<br><img src="https://minio.zhangyl.top/img/2024/jira_ldap_ldap.png" alt="本地图片"></p><h4 id="1-4-设置用户模式属性"><a href="#1-4-设置用户模式属性" class="headerlink" title="1.4 设置用户模式属性"></a>1.4 设置用户模式属性</h4><p><img src="https://minio.zhangyl.top/img/2024/jira_ldap_user.png" alt="本地图片"><br>虽然这些属性有默认值，但还是要看ldap服务器的具体值，我的ldap服务器的用户对象类是person，用户唯一的ID属性是distinguishedName</p><h4 id="1-5-设置组模式"><a href="#1-5-设置组模式" class="headerlink" title="1.5 设置组模式"></a>1.5 设置组模式</h4><p><img src="https://minio.zhangyl.top/img/2024/jira_ldap_group.png" alt="本地图片"><br>这里我改了组对象类。</p><h3 id="二、推荐工具"><a href="#二、推荐工具" class="headerlink" title="二、推荐工具"></a>二、推荐工具</h3><p>我用的是Ldap Browser，还不错。<br>下载地址： <a href="https://ldapbrowserwindows.com/">https://ldapbrowserwindows.com/</a></p><blockquote><p>在Jira配置Ldap过程中遇到的最大问题就是属性对不上，通过这个工具就能很方便的去查看了。<br>另外，添加目录时可以选择“LDAP”，这个模式下报错提示更清晰一些，我在配置过程中也是通过这个模式来发现属性配置错误的。</p></blockquote><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      
      
      <categories>
          
          <category> 开发相关 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ldap </tag>
            
            <tag> jira </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Postman常用技巧</title>
      <link href="/%E5%B7%A5%E5%85%B7-Postman%E5%B8%B8%E7%94%A8%E6%8A%80%E5%B7%A7/"/>
      <url>/%E5%B7%A5%E5%85%B7-Postman%E5%B8%B8%E7%94%A8%E6%8A%80%E5%B7%A7/</url>
      
        <content type="html"><![CDATA[<h3 id="一、全局Token设置"><a href="#一、全局Token设置" class="headerlink" title="一、全局Token设置"></a>一、全局Token设置</h3><h4 id="1-登录时获取token"><a href="#1-登录时获取token" class="headerlink" title="1.登录时获取token"></a>1.登录时获取token</h4><p><img src="https://minio.zhangyl.top/img/2024/postman_get_token.png" alt="本地图片"></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 获取登录接口的返回数据</span></span><br><span class="line"><span class="keyword">var</span> jsondata=pm.<span class="property">response</span>.<span class="title function_">json</span>();</span><br><span class="line"><span class="comment">// 判断登录是否成功</span></span><br><span class="line"><span class="keyword">if</span> (jsondata.<span class="property">code</span> === <span class="number">200</span>) &#123;</span><br><span class="line">    <span class="comment">// 获取token并设置到环境变量token的值</span></span><br><span class="line">    <span class="keyword">var</span> token=jsondata.<span class="property">data</span>.<span class="property">token</span></span><br><span class="line">    pm.<span class="property">globals</span>.<span class="title function_">set</span>(<span class="string">&quot;token&quot;</span>,token)</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">error</span>(jsondata.<span class="property">msg</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-Collection设置token"><a href="#2-Collection设置token" class="headerlink" title="2.Collection设置token"></a>2.Collection设置token</h4><p><img src="https://minio.zhangyl.top/img/2024/postman_set_token.png" alt="本地图片"></p><h3 id="二、接口自动执行"><a href="#二、接口自动执行" class="headerlink" title="二、接口自动执行"></a>二、接口自动执行</h3><p><img src="https://minio.zhangyl.top/img/2024/postman_run_collection.png" alt="本地图片"></p><p>右击Collection，选择 “Run Collection”；</p><p>选中要执行的接口，在右侧填入执行次数和间隔时间，然后点击 “Run 测试自动执行”即可。</p><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      
      
      <categories>
          
          <category> 工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> postman </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>spring boot logback日志显示时间差8小时</title>
      <link href="/spring-spring-boot-logback%E6%97%A5%E5%BF%97%E6%98%BE%E7%A4%BA%E6%97%B6%E9%97%B4%E5%B7%AE8%E5%B0%8F%E6%97%B6/"/>
      <url>/spring-spring-boot-logback%E6%97%A5%E5%BF%97%E6%98%BE%E7%A4%BA%E6%97%B6%E9%97%B4%E5%B7%AE8%E5%B0%8F%E6%97%B6/</url>
      
        <content type="html"><![CDATA[<h3 id="一、问题"><a href="#一、问题" class="headerlink" title="一、问题"></a>一、问题</h3><p>logback日志的时间和系统时间对不上，总是差几个小时，设置了项目时区没有用，项目里 new Date() 的时间没问题。</p><h3 id="二、原因"><a href="#二、原因" class="headerlink" title="二、原因"></a>二、原因</h3><p>同一个项目部署在两台机器上，之前那台时间是正常的，这台时间不正常，暂时没找到具体原因。</p><h3 id="三、解决方法"><a href="#三、解决方法" class="headerlink" title="三、解决方法"></a>三、解决方法</h3><p>改一下logback的配置文件 pattern 的时间格式</p><ul><li>修改前<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;pattern&quot;</span> <span class="attr">value</span>=<span class="string">&quot;%d&#123;yyyy-MM-dd HH:mm:ss:SSS&#125; %thread [%level] %m%n&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure></li><li>修改后<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;pattern&quot;</span> <span class="attr">value</span>=<span class="string">&quot;%d&#123;yyyy-MM-dd HH:mm:ss:SSS,CTT&#125; %thread [%level] %m%n&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure>在yyyy-MM-dd HH:mm:ss.SSS后面加一个指定的时区,用逗号分隔开。如yyyy-MM-dd HH:mm:ss.SSS,CTT。CTT为上海时间。改完后确实可以了。</li></ul><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      
      
      <categories>
          
          <category> spring </category>
          
      </categories>
      
      
        <tags>
            
            <tag> springboot </tag>
            
            <tag> logback </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>websocket 自动断开报错, java.io.EOFException 解决办法</title>
      <link href="/nginx-websocket%E8%BF%9E%E6%8E%A5%E9%94%99%E8%AF%AF-java-io-EOFException-null/"/>
      <url>/nginx-websocket%E8%BF%9E%E6%8E%A5%E9%94%99%E8%AF%AF-java-io-EOFException-null/</url>
      
        <content type="html"><![CDATA[<h3 id="一、问题"><a href="#一、问题" class="headerlink" title="一、问题"></a>一、问题</h3><p>websocket 服务使用 Nginx 反向代理后，发现会自动断开，查看日志如下</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">2024-02-22 18:51:05:964 1901020240223104709130 [ERROR] websocket连接错误,</span><br><span class="line">java.io.EOFException: null</span><br><span class="line">        at org.apache.tomcat.util.net.NioEndpoint$NioSocketWrapper.fillReadBuffer(NioEndpoint.java:1339)</span><br><span class="line">        at org.apache.tomcat.util.net.NioEndpoint$NioSocketWrapper.read(NioEndpoint.java:1226)</span><br><span class="line">        at org.apache.tomcat.websocket.server.WsFrameServer.onDataAvailable(WsFrameServer.java:75)</span><br><span class="line">        at org.apache.tomcat.websocket.server.WsFrameServer.doOnDataAvailable(WsFrameServer.java:183)</span><br><span class="line">        at org.apache.tomcat.websocket.server.WsFrameServer.notifyDataAvailable(WsFrameServer.java:162)</span><br><span class="line">        at org.apache.tomcat.websocket.server.WsHttpUpgradeHandler.upgradeDispatch(WsHttpUpgradeHandler.java:157)</span><br><span class="line">        at org.apache.coyote.http11.upgrade.UpgradeProcessorInternal.dispatch(UpgradeProcessorInternal.java:60)</span><br><span class="line">        at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:59)</span><br><span class="line">        at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:890)</span><br><span class="line">        at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1743)</span><br><span class="line">        at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)</span><br><span class="line">        at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)</span><br><span class="line">        at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)</span><br><span class="line">        at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)</span><br><span class="line">        at java.base/java.lang.Thread.run(Thread.java:842)</span><br></pre></td></tr></table></figure><h3 id="二、原因"><a href="#二、原因" class="headerlink" title="二、原因"></a>二、原因</h3><p>使用了 Nginx 反向代理后，超过60秒没有数据传输的连接会自动断开。</p><h3 id="三、解决方法"><a href="#三、解决方法" class="headerlink" title="三、解决方法"></a>三、解决方法</h3><h4 id="1-修改-nginx-配置"><a href="#1-修改-nginx-配置" class="headerlink" title="1. 修改 nginx 配置"></a>1. 修改 nginx 配置</h4><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">proxy_read_timeout 3600;</span><br></pre></td></tr></table></figure><p>将超时时间改长一点</p><h3 id="2-前端或者后端加个定时任务发个心跳包就好了，例如："><a href="#2-前端或者后端加个定时任务发个心跳包就好了，例如：" class="headerlink" title="2. 前端或者后端加个定时任务发个心跳包就好了，例如："></a>2. 前端或者后端加个定时任务发个心跳包就好了，例如：</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//定时任务，由于使用nginx反向代理，60秒无数据传输会断开</span></span><br><span class="line">timer=<span class="built_in">setInterval</span>(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line"><span class="keyword">if</span> (websocket.<span class="property">readyState</span> == <span class="number">1</span>) &#123;</span><br><span class="line">websocket.<span class="title function_">send</span>(<span class="string">&quot;心跳包检测&quot;</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="comment">//IM连接已断开</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;, <span class="number">50</span> * <span class="number">1000</span>);</span><br></pre></td></tr></table></figure><blockquote><p>我两种方法都用了，<br>首先将超时时间改成了一小时。<br>然后让前端没半小时给后台发送一次心跳，后台响应心跳。<br><img src="https://minio.zhangyl.top/img/2024/chrome_plugin_websocket.png" alt="本地图片"></p></blockquote><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      
      
      <categories>
          
          <category> nginx </category>
          
      </categories>
      
      
        <tags>
            
            <tag> nginx </tag>
            
            <tag> websocket </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>BigDecimal比较大小</title>
      <link href="/java-BigDecimal%E6%AF%94%E8%BE%83%E5%A4%A7%E5%B0%8F/"/>
      <url>/java-BigDecimal%E6%AF%94%E8%BE%83%E5%A4%A7%E5%B0%8F/</url>
      
        <content type="html"><![CDATA[<blockquote><p>这个类是Java里精确计算的类，下面说一下BidDecimal大小、相等的判断</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">BigDecimal</span> <span class="variable">a</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BigDecimal</span>(<span class="number">1.0</span>);</span><br><span class="line"><span class="type">BigDecimal</span> <span class="variable">b</span> <span class="operator">=</span> BigDecimal.valueOf(<span class="number">1.000</span>);</span><br></pre></td></tr></table></figure><h3 id="一、比较方法"><a href="#一、比较方法" class="headerlink" title="一、比较方法"></a>一、比较方法</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="variable">result</span> <span class="operator">=</span> a.compareTo(b);</span><br></pre></td></tr></table></figure><h3 id="二、比较结果"><a href="#二、比较结果" class="headerlink" title="二、比较结果"></a>二、比较结果</h3><ul><li>-1 小于</li><li>0  等于</li><li>1  大于</li></ul><blockquote><p>判断时以大于0、小于0、等于0为条件。</p></blockquote><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java通过SSH连接路由器，输入命令并读取响应</title>
      <link href="/java-Java%E9%80%9A%E8%BF%87SSH%E8%BF%9E%E6%8E%A5%E8%B7%AF%E7%94%B1%E5%99%A8%EF%BC%8C%E8%BE%93%E5%85%A5%E5%91%BD%E4%BB%A4%E5%B9%B6%E8%AF%BB%E5%8F%96%E5%93%8D%E5%BA%94/"/>
      <url>/java-Java%E9%80%9A%E8%BF%87SSH%E8%BF%9E%E6%8E%A5%E8%B7%AF%E7%94%B1%E5%99%A8%EF%BC%8C%E8%BE%93%E5%85%A5%E5%91%BD%E4%BB%A4%E5%B9%B6%E8%AF%BB%E5%8F%96%E5%93%8D%E5%BA%94/</url>
      
        <content type="html"><![CDATA[<blockquote><p>最近需要读取和修改华为路由器的配置，使用Java语言开发，通过SSH连接，输入命令并读取响应。</p></blockquote><h3 id="1-添加mwiede-jsch依赖"><a href="#1-添加mwiede-jsch依赖" class="headerlink" title="1.添加mwiede/jsch依赖"></a>1.添加<code>mwiede/jsch</code>依赖</h3><ul><li>如果使用Maven，可以在pom.xml文件中添加以下依赖:<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.github.mwiede<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jsch<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.2.15<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li>如果使用Gradle，则添加到build.gradle文件:<figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">dependencies</span> &#123;</span><br><span class="line">    implementation <span class="string">&#x27;com.github.mwiede:jsch:0.2.15&#x27;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="2-使用Jsch创建SSH连接，输入命令并返回响应"><a href="#2-使用Jsch创建SSH连接，输入命令并返回响应" class="headerlink" title="2.使用Jsch创建SSH连接，输入命令并返回响应"></a>2.使用<code>Jsch</code>创建SSH连接，输入命令并返回响应</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** </span></span><br><span class="line"><span class="comment">*  获取SSH命令响应</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> userName        用户名</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> password        密码</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> host              ip地址</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> port              端口</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> commandList  命令列表</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">getShellCmdRes</span><span class="params">(String userName, String password, String host, Integer port, List&lt;String&gt; commandList)</span> <span class="keyword">throws</span> JSchException, IOException &#123;</span><br><span class="line">        <span class="type">StringBuilder</span> <span class="variable">stringBuilder</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line">        <span class="type">JSch</span> <span class="variable">jsch</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JSch</span>();</span><br><span class="line">        <span class="type">Session</span> <span class="variable">session</span> <span class="operator">=</span> jsch.getSession(userName, host, port());</span><br><span class="line">        session.setPassword(password);</span><br><span class="line">        session.setConfig(<span class="string">&quot;StrictHostKeyChecking&quot;</span>, <span class="string">&quot;no&quot;</span>);</span><br><span class="line">        session.connect();</span><br><span class="line"></span><br><span class="line">        <span class="type">ChannelShell</span> <span class="variable">channel</span> <span class="operator">=</span> (ChannelShell) session.openChannel(<span class="string">&quot;shell&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获取输入输出流</span></span><br><span class="line">        <span class="type">OutputStream</span> <span class="variable">inputStreamForTheChannel</span> <span class="operator">=</span> channel.getOutputStream();</span><br><span class="line">        <span class="type">InputStream</span> <span class="variable">outputStreamForTheChannel</span> <span class="operator">=</span> channel.getInputStream();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 连接通道</span></span><br><span class="line">        channel.connect();</span><br><span class="line"></span><br><span class="line">        <span class="type">PrintStream</span> <span class="variable">commander</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">PrintStream</span>(inputStreamForTheChannel, <span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">byte</span>[] tmp = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">1024</span>];</span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">            <span class="keyword">while</span> (outputStreamForTheChannel.available() &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> outputStreamForTheChannel.read(tmp, <span class="number">0</span>, <span class="number">1024</span>);</span><br><span class="line">                <span class="keyword">if</span> (i &lt; <span class="number">0</span>) &#123;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="type">String</span> <span class="variable">output</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(tmp, <span class="number">0</span>, i);</span><br><span class="line">                <span class="comment">// 读取响应</span></span><br><span class="line">                stringBuilder.append(output);</span><br><span class="line">                stringBuilder.append(System.lineSeparator());</span><br><span class="line">                <span class="comment">// 发送命令</span></span><br><span class="line">                commandList.forEach(command -&gt; &#123;</span><br><span class="line">                    commander.println(command);</span><br><span class="line">                &#125;);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (channel.isClosed()) &#123;</span><br><span class="line">                <span class="keyword">if</span> (outputStreamForTheChannel.available() &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Thread.sleep(<span class="number">10</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception ee) &#123;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 关闭通道和会话</span></span><br><span class="line">        channel.disconnect();</span><br><span class="line">        session.disconnect();</span><br><span class="line">        <span class="keyword">return</span> stringBuilder.toString();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="3-调用上文方法"><a href="#3-调用上文方法" class="headerlink" title="3.调用上文方法"></a>3.调用上文方法</h3><h4 id="3-1-单条命令"><a href="#3-1-单条命令" class="headerlink" title="3.1 单条命令"></a>3.1 单条命令</h4><p>记得结束时加入退出语句，这里以路由器为例，用quit退出</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">List&lt;String&gt; commandList = <span class="keyword">new</span>  <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line"><span class="comment">// 查看</span></span><br><span class="line">commandList.add(<span class="string">&quot;display bfd session all&quot;</span>);</span><br><span class="line"><span class="comment">// 退出会话</span></span><br><span class="line">commandList.add(<span class="string">&quot;quit&quot;</span>);</span><br><span class="line"><span class="comment">// 获取响应</span></span><br><span class="line"><span class="type">String</span> <span class="variable">response</span> <span class="operator">=</span> getShellCmdRes(<span class="string">&quot;admin&quot;</span>, <span class="string">&quot;admin&quot;</span>, <span class="string">&quot;1.1.1.1&quot;</span>, <span class="number">22</span>, List&lt;String&gt; commandList)</span><br></pre></td></tr></table></figure><p><img src="https://minio.zhangyl.top/img/2024/java_ssh_single.jpg" alt="本地图片"></p><h4 id="3-2-多条命令"><a href="#3-2-多条命令" class="headerlink" title="3.2 多条命令"></a>3.2 多条命令</h4><p>如果是多条命令，每进入一个会话，就多一个退出语句</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">List&lt;String&gt; commandList = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line"><span class="comment">// 进入system-view</span></span><br><span class="line">commandList.add(<span class="string">&quot;system-view&quot;</span>);</span><br><span class="line"><span class="comment">// 进入Tunnel 0/0/5</span></span><br><span class="line">commandList.add(<span class="string">&quot;interface Tunnel 0/0/5&quot;</span>);</span><br><span class="line"><span class="comment">// 查看信息</span></span><br><span class="line">commandList.add(<span class="string">&quot;display this&quot;</span>);</span><br><span class="line"><span class="comment">// 退出Tunnel 0/0/5</span></span><br><span class="line">commandList.add(<span class="string">&quot;quit&quot;</span>);</span><br><span class="line"><span class="comment">// 退出system-view</span></span><br><span class="line">commandList.add(<span class="string">&quot;quit&quot;</span>);</span><br><span class="line"><span class="comment">// 退出会话</span></span><br><span class="line">commandList.add(<span class="string">&quot;quit&quot;</span>);</span><br><span class="line"><span class="comment">// 获取响应</span></span><br><span class="line"><span class="type">String</span> <span class="variable">response</span> <span class="operator">=</span> getShellCmdRes(<span class="string">&quot;admin&quot;</span>, <span class="string">&quot;admin&quot;</span>, <span class="string">&quot;1.1.1.1&quot;</span>, <span class="number">22</span>, List&lt;String&gt; commandList)</span><br></pre></td></tr></table></figure><p><img src="https://minio.zhangyl.top/img/2024/java_ssh_mutile.jpg" alt="本地图片"></p><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>将nginx设置为开机自启动的配置</title>
      <link href="/nginx-%E5%B0%86nginx%E8%AE%BE%E7%BD%AE%E4%B8%BA%E5%BC%80%E6%9C%BA%E8%87%AA%E5%90%AF%E5%8A%A8%E7%9A%84%E9%85%8D%E7%BD%AE/"/>
      <url>/nginx-%E5%B0%86nginx%E8%AE%BE%E7%BD%AE%E4%B8%BA%E5%BC%80%E6%9C%BA%E8%87%AA%E5%90%AF%E5%8A%A8%E7%9A%84%E9%85%8D%E7%BD%AE/</url>
      
        <content type="html"><![CDATA[<h3 id="一、背景描述"><a href="#一、背景描述" class="headerlink" title="一、背景描述"></a>一、背景描述</h3><p>虚拟机上安装了nginx，希望能够开机自启动。</p><h3 id="二、操作步骤"><a href="#二、操作步骤" class="headerlink" title="二、操作步骤"></a>二、操作步骤</h3><h4 id="1-进入-lib-systemd-system-目录下"><a href="#1-进入-lib-systemd-system-目录下" class="headerlink" title="1.进入 &#x2F;lib&#x2F;systemd&#x2F;system&#x2F; 目录下"></a>1.进入 &#x2F;lib&#x2F;systemd&#x2F;system&#x2F; 目录下</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cd /lib/systemd/system/</span><br></pre></td></tr></table></figure><h4 id="2-创建文件：nginx-service"><a href="#2-创建文件：nginx-service" class="headerlink" title="2.创建文件：nginx.service"></a>2.创建文件：nginx.service</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">touch nginx.service</span><br><span class="line">vim nginx.service</span><br></pre></td></tr></table></figure><h4 id="3-编辑文件内容"><a href="#3-编辑文件内容" class="headerlink" title="3.编辑文件内容"></a>3.编辑文件内容</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">[Unit]</span><br><span class="line">Description=nginx service</span><br><span class="line">After=network.target </span><br><span class="line">   </span><br><span class="line">[Service] </span><br><span class="line">Type=forking </span><br><span class="line">ExecStart=/usr/local/nginx/sbin/nginx</span><br><span class="line">ExecReload=/usr/local/nginx/sbin/nginx -s reload</span><br><span class="line">ExecStop=/usr/local/nginx/sbin/nginx -s quit</span><br><span class="line">PrivateTmp=true </span><br><span class="line">   </span><br><span class="line">[Install] </span><br><span class="line">WantedBy=multi-user.target</span><br></pre></td></tr></table></figure><h4 id="4-开机自启动"><a href="#4-开机自启动" class="headerlink" title="4.开机自启动"></a>4.开机自启动</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl enable nginx</span><br></pre></td></tr></table></figure><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      
      
      <categories>
          
          <category> nginx </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
            <tag> nginx </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>解决Nginx的failed 13 Permission denied while connecting to upstream</title>
      <link href="/nginx-%E8%A7%A3%E5%86%B3Nginx%E7%9A%8413-Permission-denied%E9%97%AE%E9%A2%98/"/>
      <url>/nginx-%E8%A7%A3%E5%86%B3Nginx%E7%9A%8413-Permission-denied%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<h3 id="一、问题"><a href="#一、问题" class="headerlink" title="一、问题"></a>一、问题</h3><p>最近在用nginx做反向代理的时候遇到这样一个问题：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">2024/02/19 17:15:32 [crit] 3025#3025: *2 connect() to 127.0.0.1:19010 failed (13: Permission denied) while connecting to upstream, client: 10.64.68.30, server: , request: &quot;POST /opticTransceiver/addDeviceList HTTP/1.1&quot;, upstream: &quot;http://127.0.0.1:19010/opticTransceiver/addDeviceList&quot;, host: &quot;localhost:8080&quot;, referrer: &quot;http://localhost:8080/device-connect&quot;</span><br></pre></td></tr></table></figure><h3 id="二、原因"><a href="#二、原因" class="headerlink" title="二、原因"></a>二、原因</h3><p>是因为SeLinux的限制。</p><h3 id="三、解决"><a href="#三、解决" class="headerlink" title="三、解决"></a>三、解决</h3><h4 id="1-关闭SeLinux的限制"><a href="#1-关闭SeLinux的限制" class="headerlink" title="1.关闭SeLinux的限制"></a>1.关闭SeLinux的限制</h4><h5 id="1-临时关闭-不用重启机器"><a href="#1-临时关闭-不用重启机器" class="headerlink" title="1) 临时关闭(不用重启机器)"></a>1) 临时关闭(不用重启机器)</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">setenforce 0 ##设置SELinux 成为permissive模式</span><br></pre></td></tr></table></figure><h5 id="2-修改配置文件-需要重启机器"><a href="#2-修改配置文件-需要重启机器" class="headerlink" title="2) 修改配置文件(需要重启机器)"></a>2) 修改配置文件(需要重启机器)</h5><p>修改&#x2F;etc&#x2F;selinux&#x2F;config 文件<br>将SELINUX&#x3D;enforcing改为SELINUX&#x3D;disabled<br>重启机器即可</p><h4 id="2-执行下面的命令"><a href="#2-执行下面的命令" class="headerlink" title="2.执行下面的命令"></a>2.执行下面的命令</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">setsebool -P httpd_can_network_connect 1</span><br></pre></td></tr></table></figure><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      
      
      <categories>
          
          <category> nginx </category>
          
      </categories>
      
      
        <tags>
            
            <tag> nginx </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>springboot加入websocket</title>
      <link href="/spring-springboot%E5%8A%A0%E5%85%A5websocket/"/>
      <url>/spring-springboot%E5%8A%A0%E5%85%A5websocket/</url>
      
        <content type="html"><![CDATA[<h3 id="一、引入spring-websocket依赖"><a href="#一、引入spring-websocket依赖" class="headerlink" title="一、引入spring-websocket依赖"></a>一、引入<code>spring-websocket</code>依赖</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-websocket<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="二、开启websocket支持"><a href="#二、开启websocket支持" class="headerlink" title="二、开启websocket支持"></a>二、开启websocket支持</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 开启websocket的支持</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WebsocketConfig</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> ServerEndpointExporter <span class="title function_">serverEndpointExporter</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ServerEndpointExporter</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="三、websocket工具类"><a href="#三、websocket工具类" class="headerlink" title="三、websocket工具类"></a>三、websocket工具类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * websocket工具类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WebsocketUtil</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">WebsocketUtil</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 服务端存放客户端对应的session对象</span></span><br><span class="line"><span class="comment">     * key:clientId value:session</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> Map&lt;String, Session&gt; WEBSOCKET_CLIENT_SESSION_MAP = Maps.newConcurrentMap();</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 服务端发送消息给所有客户端</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> message</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">sendMessageToAllClient</span><span class="params">(String message)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (WEBSOCKET_CLIENT_SESSION_MAP.isEmpty()) &#123;</span><br><span class="line">            log.info(<span class="string">&quot;当前无连接的客户端, 消息忽略推送.&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        WEBSOCKET_CLIENT_SESSION_MAP.forEach((sessionId, session) -&gt; &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                session.getBasicRemote().sendText(message);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                log.error(<span class="string">&quot;服务端向客户端[&#123;&#125;]发送消息异常.&quot;</span>, sessionId, e);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="四、websocket服务端"><a href="#四、websocket服务端" class="headerlink" title="四、websocket服务端"></a>四、websocket服务端</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * websocket服务端</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@ServerEndpoint(&quot;/websocket&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WebsocketServer</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String sessionId;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * websocket建立连接</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> session</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> IOException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@OnOpen</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onOpen</span><span class="params">(Session session)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="built_in">this</span>.sessionId = session.getId();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (WebsocketUtil.WEBSOCKET_CLIENT_SESSION_MAP.containsKey(<span class="built_in">this</span>.sessionId)) &#123;</span><br><span class="line">            WebsocketUtil.WEBSOCKET_CLIENT_SESSION_MAP.remove(<span class="built_in">this</span>.sessionId).close();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        WebsocketUtil.WEBSOCKET_CLIENT_SESSION_MAP.put(<span class="built_in">this</span>.sessionId, session);</span><br><span class="line"></span><br><span class="line">        log.info(<span class="string">&quot;客户端[&#123;&#125;]建立websocket连接.&quot;</span>, <span class="built_in">this</span>.sessionId);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 关闭socket连接</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> session</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@OnClose</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onClose</span><span class="params">(Session session)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (WebsocketUtil.WEBSOCKET_CLIENT_SESSION_MAP.containsKey(session.getId())) &#123;</span><br><span class="line">            WebsocketUtil.WEBSOCKET_CLIENT_SESSION_MAP.remove(session.getId());</span><br><span class="line">            log.info(<span class="string">&quot;客户端[&#123;&#125;]断开websocket连接.&quot;</span>, session.getId());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 接收到消息</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> message</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@OnMessage</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">OnMessage</span><span class="params">(String message)</span> &#123;</span><br><span class="line">        log.info(<span class="string">&quot;接收到客户端&#123;&#125;发送的消息:[&#123;&#125;].&quot;</span>, <span class="built_in">this</span>.sessionId, message);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 连接错误</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> session</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> error</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@OnError</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">OnError</span><span class="params">(Session session, Throwable error)</span> &#123;</span><br><span class="line">        log.error(<span class="string">&quot;websocket连接错误,&quot;</span>, error);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="五、测试"><a href="#五、测试" class="headerlink" title="五、测试"></a>五、测试</h3><blockquote><p>推荐使用Chrome插件–Simple Web Socket Client</p></blockquote><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      
      
      <categories>
          
          <category> spring </category>
          
      </categories>
      
      
        <tags>
            
            <tag> websocket </tag>
            
            <tag> springboot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>git常用命令</title>
      <link href="/%E5%BC%80%E5%8F%91%E7%9B%B8%E5%85%B3-git%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"/>
      <url>/%E5%BC%80%E5%8F%91%E7%9B%B8%E5%85%B3-git%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</url>
      
        <content type="html"><![CDATA[<h2 id="代理相关"><a href="#代理相关" class="headerlink" title="代理相关"></a>代理相关</h2><h3 id="设置http代理"><a href="#设置http代理" class="headerlink" title="设置http代理"></a>设置http代理</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config --global http.proxy 127.0.0.1:7890</span><br><span class="line">git config --global https.proxy 127.0.0.1:7890</span><br></pre></td></tr></table></figure><h3 id="查看http代理"><a href="#查看http代理" class="headerlink" title="查看http代理"></a>查看http代理</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config --global --get http.proxy</span><br><span class="line">git config --global --get https.proxy</span><br></pre></td></tr></table></figure><h3 id="取消设置http代理"><a href="#取消设置http代理" class="headerlink" title="取消设置http代理"></a>取消设置http代理</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config --global --<span class="built_in">unset</span> http.proxy</span><br><span class="line">git config --global --<span class="built_in">unset</span> https.proxy</span><br></pre></td></tr></table></figure><h3 id="github"><a href="#github" class="headerlink" title="github"></a>github</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 设置代理</span></span><br><span class="line">git config --global http.https://github.com.proxy socks5://127.0.0.1:10808</span><br><span class="line"><span class="comment"># 取消代理</span></span><br><span class="line">git config --global --<span class="built_in">unset</span> http.https://github.com.proxy</span><br></pre></td></tr></table></figure><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      
      
      <categories>
          
          <category> 开发相关 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
